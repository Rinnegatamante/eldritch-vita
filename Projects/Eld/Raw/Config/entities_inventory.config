[RightHand]
EldTransform	= "RightHandTransform"
EldMesh			= "RightHandMesh"
EldItem			= "RightHandItem"
Owner			= "."

	[RightHandTransform]
	IsAttachedToOwner	= true
	OwnerOffsetX		= 0.15
	OwnerOffsetZ		= -0.15

	[RightHandMesh]
	Mesh = "Meshes/Character/shared-right-hand-1.cms"
	DrawForeground = true

	[RightHandItem]
	Slot = "RightHand"

[LeftHand]
EldTransform	= "LeftHandTransform"
EldMesh			= "LeftHandMesh"
EldItem			= "LeftHandItem"
Owner			= "."

	[LeftHandTransform]
	IsAttachedToOwner	= true
	OwnerOffsetX		= -0.15
	OwnerOffsetZ		= -0.15

	[LeftHandMesh]
	Mesh = "Meshes/Character/shared-left-hand-1.cms"
	DrawForeground = true

	[LeftHandItem]
	Slot = "LeftHand"

# ****************************************************************
# **************************** Souls *****************************
# ****************************************************************

[SoulPickup_Base]
EldTransform	= "."
EldMesh			= "SoulPickupMesh"
EldLight		= "SoulPickupLight"
EldFrobbable	= "SoulPickupFrobbable"

	[SoulPickupMesh]
	Mesh				= "Meshes/soul.cms"
	MaterialOverride	= "Material_EntityAnimatedAlphaTest"
	ConstantIrradianceR	= 0.5
	ConstantIrradianceG	= 0.5
	ConstantIrradianceB	= 0.5

	[SoulPickupLight]
	Radius = 3.0

	[SoulPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FrobVerb		= "PickUp"

[HardSoulPickup]
Extends			= "SoulPickup_Base"
EldMesh			= "HardSoulPickupMesh"
EldFrobbable	= "HardSoulPickupFrobbable"
EldLight		= "HardSoulPickupLight"
EldPickup		= "HardSoulPickupPickup"
EldParticles	= "HardSoulPickupParticles"
Label			= "."
Reactions		= "HardSoulPickupReactions"

	[HardSoulPickupMesh]
	Extends				= "SoulPickupMesh"
	TextureOverride	= "Textures/soul-hard_NODXT.tga"

	[HardSoulPickupFrobbable]
	Extends			= "SoulPickupFrobbable"
	FriendlyName	= "HardSoul"

	[HardSoulPickupLight]
	Extends	= "SoulPickupLight"
	ColorR	= 0.5
	ColorG	= 0.5
	ColorB	= 0.5

	[HardSoulPickupPickup]
	GiveItem = "HardSoul"

	[HardSoulPickupParticles]
	Particles	= "PS_SoulSparklesHard"

	[HardSoulPickupReactions]
	NumObserveEvents	= &
	@ ObserveEvent
	@@&					= "PreLevelTransition"
	NumReactions	= &
	@ Reaction
	@@&				= "SoulOnSpawnedReaction"
	@@&				= "HardSoulPickupOnFrobbedReaction"
	@@&				= "HardSoulPreLevelTransitionReaction"

		[HardSoulPreLevelTransitionReaction]
		Rule		= "PreLevelTransitionRule"
		NumActions	= &
		@ Action
		@@&			= "DestroyHardSoulPickupAction"

			[PreLevelTransitionRule]
			Event	= "PreLevelTransition"

			# I can't use DestroySelfAction because PreLevelTransition provides no context
			[DestroyHardSoulPickupAction]
			ActionType	= "Destroy"
			DestroyPE	= "HardSoulPickupPE"

				[HardSoulPickupPE]
				PEType	= "GetEntityByLabel"
				Label	= "HardSoulPickup"

		[HardSoulPickupOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowHardSoulBook"
		@@&			= "PlaySoulSFX"
		@@&			= "SetPlayerHardAction"

			[ConditionalShowHardSoulBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadHardSoulBook"
			@@^Action		= "TeachHardSoulBook"

				[HasNotReadHardSoulBook]
				PEType	= "NOT"
				Input	= "HasReadHardSoulBook"

					[HasReadHardSoulBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadHardSoulBook"

				[TeachHardSoulBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowHardSoulBook"
				@@&			= "MarkHardSoulBookRead"

					[ShowHardSoulBook]
					ActionType	= "EldShowBook"
					BookString	= "Book_HardSoul"

					[MarkHardSoulBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadHardSoulBook"
					ValuePE		= "TruePE"

			[SetPlayerHardAction]
			ActionType	= "SendEvent"
			EventName	= "SetHard"
			Recipient	= "PlayerPE"

[WaterSoulPickup]
Extends			= "SoulPickup_Base"
EldFrobbable	= "WaterSoulPickupFrobbable"
EldLight		= "WaterSoulPickupLight"
EldPickup		= "WaterSoulPickupPickup"
EldParticles	= "WaterSoulPickupParticles"
Reactions		= "WaterSoulPickupReactions"

	[WaterSoulPickupFrobbable]
	Extends			= "SoulPickupFrobbable"
	FriendlyName	= "WaterSoul"

	[WaterSoulPickupLight]
	Extends	= "SoulPickupLight"
	ColorR	= 0.5
	ColorG	= 0.5
	ColorB	= 1.0

	[WaterSoulPickupPickup]
	GiveItem = "WaterSoul"

	[WaterSoulPickupParticles]
	Particles	= "PS_SoulSparklesWater"

	[WaterSoulPickupReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SoulOnSpawnedReaction"
	@@&				= "WaterSoulPickupOnFrobbedReaction"

		[SoulOnSpawnedReaction]
		Rule		= "OnSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "SoulPlayIdleAnim"

			[SoulPlayIdleAnim]
			ActionType	= "EldPlayAnim"
			Animation	= "Idle"
			Loop		= true
			PlayRatePE	= "SoulIdlePlayRatePE"

				[SoulIdlePlayRatePE]
				PEType	= "ConstantFloat"
				Value	= 0.2

		[WaterSoulPickupOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowWaterSoulBook"
		@@&			= "PlaySoulSFX"
		@@&			= "NotifyWaterColumn"

			[PlaySoulSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "SoulSFXPE"

				[SoulSFXPE]
				PEType	= "ConstantString"
				Value	= "SoulSound"

			[NotifyWaterColumn]
			ActionType	= "SendEvent"
			EventName	= "OnSoulRemoved"
			EventOwner	= "WaterColumnPE"
			Recipient	= "WaterColumnPE"

				[WaterColumnPE]
				PEType	= "GetEntityByLabel"
				Label	= "WaterColumn"

			[ConditionalShowWaterSoulBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadWaterSoulBook"
			@@^Action		= "TeachWaterSoulBook"

				[HasNotReadWaterSoulBook]
				PEType	= "NOT"
				Input	= "HasReadWaterSoulBook"

					[HasReadWaterSoulBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadWaterSoulBook"

				[TeachWaterSoulBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowWaterSoulBook"
				@@&			= "MarkWaterSoulBookRead"

					[ShowWaterSoulBook]
					ActionType	= "EldShowBook"
					BookString	= "Book_WaterSoul"

					[MarkWaterSoulBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadWaterSoulBook"
					ValuePE		= "TruePE"

[SandSoulPickup]
Extends			= "SoulPickup_Base"
EldMesh			= "SandSoulPickupMesh"
EldFrobbable	= "SandSoulPickupFrobbable"
EldLight		= "SandSoulPickupLight"
EldPickup		= "SandSoulPickupPickup"
EldParticles	= "SandSoulPickupParticles"
Reactions		= "SandSoulPickupReactions"

	[SandSoulPickupMesh]
	Extends				= "SoulPickupMesh"
	TextureOverride	= "Textures/soul-sand_NODXT.tga"

	[SandSoulPickupFrobbable]
	Extends			= "SoulPickupFrobbable"
	FriendlyName	= "SandSoul"

	[SandSoulPickupLight]
	Extends	= "SoulPickupLight"
	ColorR	= 1.0
	ColorG	= 0.5
	ColorB	= 0.5

	[SandSoulPickupPickup]
	GiveItem = "SandSoul"

	[SandSoulPickupParticles]
	Particles	= "PS_SoulSparklesSand"

	[SandSoulPickupReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SoulOnSpawnedReaction"
	@@&				= "SandSoulPickupOnFrobbedReaction"

		[SandSoulPickupOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowSandSoulBook"
		@@&			= "PlaySoulSFX"
		@@&			= "NotifySandColumn"

			[NotifySandColumn]
			ActionType	= "SendEvent"
			EventName	= "OnSoulRemoved"
			EventOwner	= "SandColumnPE"
			Recipient	= "SandColumnPE"

				[SandColumnPE]
				PEType	= "GetEntityByLabel"
				Label	= "SandColumn"

			[ConditionalShowSandSoulBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadSandSoulBook"
			@@^Action		= "TeachSandSoulBook"

				[HasNotReadSandSoulBook]
				PEType	= "NOT"
				Input	= "HasReadSandSoulBook"

					[HasReadSandSoulBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadSandSoulBook"

				[TeachSandSoulBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowSandSoulBook"
				@@&			= "MarkSandSoulBookRead"

					[ShowSandSoulBook]
					ActionType	= "EldShowBook"
					BookString	= "Book_SandSoul"

					[MarkSandSoulBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadSandSoulBook"
					ValuePE		= "TruePE"

[SwampSoulPickup]
Extends			= "SoulPickup_Base"
EldMesh			= "SwampSoulPickupMesh"
EldFrobbable	= "SwampSoulPickupFrobbable"
EldLight		= "SwampSoulPickupLight"
EldPickup		= "SwampSoulPickupPickup"
EldParticles	= "SwampSoulPickupParticles"
Reactions		= "SwampSoulPickupReactions"

	[SwampSoulPickupMesh]
	Extends				= "SoulPickupMesh"
	TextureOverride	= "Textures/soul-swamp_NODXT.tga"

	[SwampSoulPickupFrobbable]
	Extends			= "SoulPickupFrobbable"
	FriendlyName	= "SwampSoul"

	[SwampSoulPickupLight]
	Extends	= "SoulPickupLight"
	ColorR	= 0.5
	ColorG	= 1.0
	ColorB	= 0.5

	[SwampSoulPickupPickup]
	GiveItem = "SwampSoul"

	[SwampSoulPickupParticles]
	Particles	= "PS_SoulSparklesSwamp"

	[SwampSoulPickupReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SoulOnSpawnedReaction"
	@@&				= "SwampSoulPickupOnFrobbedReaction"

		[SwampSoulPickupOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowSwampSoulBook"
		@@&			= "PlaySoulSFX"
		@@&			= "NotifySwampColumn"

			[NotifySwampColumn]
			ActionType	= "SendEvent"
			EventName	= "OnSoulRemoved"
			EventOwner	= "SwampColumnPE"
			Recipient	= "SwampColumnPE"

				[SwampColumnPE]
				PEType	= "GetEntityByLabel"
				Label	= "SwampColumn"

			[ConditionalShowSwampSoulBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadSwampSoulBook"
			@@^Action		= "TeachSwampSoulBook"

				[HasNotReadSwampSoulBook]
				PEType	= "NOT"
				Input	= "HasReadSwampSoulBook"

					[HasReadSwampSoulBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadSwampSoulBook"

				[TeachSwampSoulBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowSwampSoulBook"
				@@&			= "MarkSwampSoulBookRead"

					[ShowSwampSoulBook]
					ActionType	= "EldShowBook"
					BookString	= "Book_SwampSoul"

					[MarkSwampSoulBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadSwampSoulBook"
					ValuePE		= "TruePE"

[WaterSoul]
EldItem			= "WaterSoulItem"
Owner			= "."
Reactions		= "WaterSoulReactions"

	[WaterSoulItem]
	Slot		= "WaterSoul"

	[WaterSoulReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WaterSoulOnInitialized"
	@@&				= "WaterSoulOnEquipped"
	@@&				= "WaterSoulOnUnequipped"

		[WaterSoulOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ShowWaterSoulHUD"
		@@&			= "GivePlayerSandKey"
		@@&			= "Award_ACH_Soul_Water"

			[Award_ACH_Soul_Water]
			ActionType		= "NeonAwardAchievement"
			AchievementTag	= ""

			[OnInitializedQueuedRule]
			Event	= "OnInitializedQueued"

			[ShowWaterSoulHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "SoulWaterImg"
			Hidden		= false

			[GivePlayerSandKey]
			ActionType		= "SetVariable"
			EntityPE		= "PlayerPE"
			VariableName	= "SandKey"
			ValuePE			= "TruePE"

		# OnEquipped is for level transitions
		[WaterSoulOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "GivePlayerSandKey"

		[WaterSoulOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HideWaterSoulHUD"

[SandSoul]
EldItem			= "SandSoulItem"
Owner			= "."
Reactions		= "SandSoulReactions"

	[SandSoulItem]
	Slot		= "SandSoul"

	[SandSoulReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SandSoulOnInitialized"
	@@&				= "SandSoulOnEquipped"
	@@&				= "SandSoulOnUnequipped"

		[SandSoulOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ShowSandSoulHUD"
		@@&			= "GivePlayerSwampKey"
		@@&			= "Award_ACH_Soul_Sand"

			[Award_ACH_Soul_Sand]
			ActionType		= "NeonAwardAchievement"
			AchievementTag	= ""

			[ShowSandSoulHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "SoulSandImg"
			Hidden		= false

			[GivePlayerSwampKey]
			ActionType		= "SetVariable"
			EntityPE		= "PlayerPE"
			VariableName	= "SwampKey"
			ValuePE			= "TruePE"

		[SandSoulOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "GivePlayerSwampKey"

		[SandSoulOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HideSandSoulHUD"

[SwampSoul]
EldItem			= "SwampSoulItem"
Owner			= "."
Reactions		= "SwampSoulReactions"

	[SwampSoulItem]
	Slot		= "SwampSoul"

	[SwampSoulReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SwampSoulOnInitialized"
	@@&				= "SwampSoulOnUnequipped"

		[SwampSoulOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ShowSwampSoulHUD"
		@@&			= "Award_ACH_Soul_Swamp"

			[Award_ACH_Soul_Swamp]
			ActionType		= "NeonAwardAchievement"
			AchievementTag	= ""

			[ShowSwampSoulHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "SoulSwampImg"
			Hidden		= false

		[SwampSoulOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HideSwampSoulHUD"

[HardSoul]
EldItem			= "HardSoulItem"
Owner			= "."
Reactions		= "HardSoulReactions"

	[HardSoulItem]
	Slot		= "HardSoul"

	[HardSoulReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "HardSoulOnInitialized"
	@@&				= "HardSoulOnUnequipped"

		[HardSoulOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ShowHardSoulHUD"

			[ShowHardSoulHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "SoulHardImg"
			Hidden		= false

		[HardSoulOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HideHardSoulHUD"

# ****************************************************************
# * Trapped Souls												 *
# ****************************************************************

[TrappedSouls_Marker]
EldTransform	= "."
Reactions		= "TrappedSouls_Marker_Reactions"

	[TrappedSouls_Marker_Reactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TrappedSouls_Marker_OnInitializedQueuedReaction"

		[TrappedSouls_Marker_OnInitializedQueuedReaction]
		Rule		= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ShowTrappedSoulsHUD"

			[ShowTrappedSoulsHUD]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "ShowTrappedSoulsImage"
			@@&			= "ShowTrappedSoulsCounter"

				[ShowTrappedSoulsImage]
				ActionType	= "UIShowHideWidget"
				Screen		= "HUD"
				Widget		= "TrappedSoulsImage"
				Hidden		= false

				[ShowTrappedSoulsCounter]
				ActionType	= "UIShowHideWidget"
				Screen		= "HUD"
				Widget		= "TrappedSoulsCounter"
				Hidden		= false

[TrappedSouls_Big_Spawned]
Extends		= "TrappedSouls_Big"
Reactions	= "TrappedSouls_Big_Spawned_Reactions"

	[TrappedSouls_Big_Spawned_Reactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TrappedSouls_Spawned_OnSpawnedReaction"
	@@&				= "TrappedSoulsOnFrobbedReaction"

[TrappedSouls_Big]
Extends			= "TrappedSouls_Base"
EldMesh			= "TrappedSouls_Big_Mesh"
EldParticles	= "TrappedSouls_Big_Particles"
PEMap			= "TrappedSouls_Big_PEMap"

	[TrappedSouls_Big_Mesh]
	Extends	= "TrappedSoulsMesh"
	Mesh	= "Meshes/asylum-soul-pickup-big.cms"

	[TrappedSouls_Big_Particles]
	Particles	= "PS_TrappedSouls_Big_Sparkles"

	[TrappedSouls_Big_PEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "Souls"
	@@^Def	= "TrappedSouls_Big_SoulsPE"

		[TrappedSouls_Big_SoulsPE]
		PEType	= "ConstantInt"
		Value	= 10

[TrappedSouls_Small_Spawned]
Extends		= "TrappedSouls_Small"
Reactions	= "TrappedSouls_Small_Spawned_Reactions"

	[TrappedSouls_Small_Spawned_Reactions]
	NumObserveEvents	= &
	@ ObserveEvent
	@@&					= "OnAzathothSpawned"
	NumReactions	= &
	@ Reaction
	@@&				= "TrappedSouls_Spawned_OnSpawnedReaction"
	@@&				= "TrappedSouls_Small_OnAzathothSpawnedReaction"
	@@&				= "TrappedSouls_Small_SpawnBigSouls"
	@@&				= "TrappedSoulsOnFrobbedReaction"

		[TrappedSouls_Spawned_OnSpawnedReaction]
		Rule		= "OnSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "TrappedSoulsPlayIdleAnim"
		@@&			= "TrappedSoulsPlaySpawnVFX"

			[TrappedSoulsPlaySpawnVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "TrappedSoulsSpawnVFXPE"
			@@&Name			= "Attached"
			@@^Value		= "TruePE"

				[TrappedSoulsSpawnVFXPE]
				PEType		= "ConstantString"
				Value		= "PS_SoulTrapBurst"

[TrappedSouls_Small]
Extends			= "TrappedSouls_Base"
EldMesh			= "TrappedSouls_Small_Mesh"
EldParticles	= "TrappedSouls_Small_Particles"
PEMap			= "TrappedSouls_Small_PEMap"
Reactions		= "TrappedSouls_Small_Reaction"

	[TrappedSouls_Small_Mesh]
	Extends	= "TrappedSoulsMesh"
	Mesh	= "Meshes/asylum-soul-pickup.cms"

	[TrappedSouls_Small_Particles]
	Particles	= "PS_TrappedSouls_Small_Sparkles"

	[TrappedSouls_Small_PEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "Souls"
	@@^Def	= "TrappedSouls_Small_SoulsPE"

		[TrappedSouls_Small_SoulsPE]
		PEType	= "ConstantInt"
		Value	= 5

	[TrappedSouls_Small_Reaction]
	NumObserveEvents	= &
	@ ObserveEvent
	@@&					= "OnAzathothSpawned"
	NumReactions	= &
	@ Reaction
	@@&				= "TrappedSouls_Small_OnAzathothSpawnedReaction"
	@@&				= "TrappedSouls_Small_SpawnBigSouls"
	@@&				= "TrappedSoulsOnSpawnedReaction"
	@@&				= "TrappedSoulsOnFrobbedReaction"

		[TrappedSouls_Small_SpawnBigSouls]
		Rule		= "SpawnBigSoulsRule"
		NumActions	= &
		@ Action
		@@&			= "SpawnTrappedSouls_Big"
		@@&			= "DestroySelfAction"

			[SpawnBigSoulsRule]
			Event	= "SpawnBigSouls"

			[SpawnTrappedSouls_Big]
			ActionType			= "EldSpawnEntity"
			Entity				= "TrappedSouls_Big_Spawned"
			LocationOverridePE	= "LocationPE"

		[TrappedSouls_Small_OnAzathothSpawnedReaction]
		Rule		= "OnAzathothSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "QueueSpawnBigSouls"

			[OnAzathothSpawnedRule]
			Event	= "OnAzathothSpawned"

			[QueueSpawnBigSouls]
			ActionType	= "SendEvent"
			EventName	= "SpawnBigSouls"
			EventOwner	= "ReactionsSelfPE"	# HACKHACK
			Recipient	= "ReactionsSelfPE"	# HACKHACK
			QueueEvent	= true

				[ReactionsSelfPE]
				PEType	= "ReactionsSelf"

[TrappedSouls_Base]
ShouldDebugCheckSpawnClearance	= false
EldTransform	= "TrappedSoulsTransform"
EldMesh			= "TrappedSoulsMesh"
EldLight		= "TrappedSoulsLight"
EldFrobbable	= "TrappedSoulsFrobbable"
EldParticles	= "TrappedSoulsParticles"
Reactions		= "TrappedSoulsReactions"

	[TrappedSoulsTransform]
	CanMove	= false

	[TrappedSoulsMesh]
	MaterialOverride	= "Material_EntityAnimated"
	ConstantIrradianceR	= 0.5
	ConstantIrradianceG	= 0.5
	ConstantIrradianceB	= 0.5

	[TrappedSoulsLight]
	Radius	= 2.0
	ColorR	= 1.0
	ColorG	= 1.0
	ColorB	= 1.0

	[TrappedSoulsFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FrobVerb		= "PickUp"
	FriendlyName	= "TrappedSouls"

	[TrappedSoulsParticles]

	[TrappedSoulsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TrappedSoulsOnSpawnedReaction"
	@@&				= "TrappedSoulsOnFrobbedReaction"

		[TrappedSoulsOnSpawnedReaction]
		Rule		= "OnSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "TrappedSoulsPlayIdleAnim"

			[TrappedSoulsPlayIdleAnim]
			ActionType	= "EldPlayAnim"
			Animation	= "Idle"
			Loop		= true

		[TrappedSoulsOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "GiveTrappedSoulsAction"
		@@&			= "PlaySoulSFX"
		@@&			= "BecomeNonFrobbable"
		@@&			= "HideSelfAction"
		@@&			= "RemoveLightAction"
		@@&			= "TrappedSoulsQueueDestroySelf"

			[GiveTrappedSoulsAction]
			ActionType		= "SendEvent"
			EventName		= "AddSouls"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Souls"
			@@^Value		= "TrappedSoulsPE"

				[TrappedSoulsPE]
				PEType	= "Lookup"
				Key		= "Souls"

			# Give the pickup SFX time to play
			[TrappedSoulsQueueDestroySelf]
			ActionType		= "SendEvent"
			EventName		= "Destroy"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 1.0

# ****************************************************************
# **************************** Boots *****************************
# ****************************************************************

[JumpBootsPickup]
EldTransform	= "JumpBootsPickupTransform"
EldCollision	= "JumpBootsPickupCollision"
EldMesh			= "JumpBootsPickupMesh"
EldDropShadow	= "JumpBootsPickupDropShadow"
EldFrobbable	= "JumpBootsPickupFrobbable"
EldPickup		= "JumpBootsPickupPickup"

	[JumpBootsPickupTransform]
	UseGravity = true

	[JumpBootsPickupCollision]
	HalfExtentsXY	= 0.1875
	HalfExtentsZ	= 0.25

	[JumpBootsPickupDropShadow]
	UseMeshCenter = true
	Radius = 0.2
	VoxelCheckOffsetZ = 0.0
	Alpha = 0.5
	ShadowFloatZ = 0.01

	[JumpBootsPickupMesh]
	Mesh	= "Meshes/boots-jump.cms"

	[JumpBootsPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "JumpBoots"
	FrobVerb		= "PickUp"

	[JumpBootsPickupPickup]
	GiveItem		= "JumpBoots"

[JumpBootsPickupForSale]
Extends			= "JumpBootsPickup"
EldFrobbable	= "JumpBootsPickupForSaleFrobbable"
EldPickup		= "JumpBootsPickupForSalePickup"

	[JumpBootsPickupForSaleFrobbable]
	Extends		= "JumpBootsPickupFrobbable"
	FrobVerb	= "Examine"

	[JumpBootsPickupForSalePickup]
	GiveItem		= "JumpBoots"
	Price			= 20
	FriendlyName	= "JumpBoots"
	FriendlyDesc	= "JumpBootsDesc"

[JumpBoots]
EldItem		= "JumpBootsItem"
Owner		= "."
Reactions	= "JumpBootsReactions"

	[JumpBootsItem]
	Slot				= "Boots"
	DropSpawn			= "JumpBootsPickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.1
	DropSpawnYaw		= 180.0

	[JumpBootsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "JumpBootsOnInitialized"
	@@&				= "JumpBootsOnEquipped"
	@@&				= "JumpBootsOnUnequipped"
	@@&				= "OnShowJumpBootsBookReaction"

		[JumpBootsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerHighJumpPerk"
		@@&			= "SetJumpBootsHUD"
		@@&			= "SetCurrentBootsBookJumpBoots"
		@@&			= "ShowBootsHUD"

			[SetJumpBootsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-jump_NODXT.tga"

			[ShowBootsHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Hidden		= false
			SetDisabled	= true

			[TriggerHighJumpPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "HighJumpPerkPE"

				[HighJumpPerkPE]
				PEType	= "ConstantString"
				Value	= "HighJumpPerk"

		[JumpBootsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowJumpBootsBook"
		@@&			= "TriggerHighJumpPerk"
		@@&			= "SetJumpBootsHUD"
		@@&			= "SetCurrentBootsBookJumpBoots"
		@@&			= "ShowBootsHUD"

			[ConditionalShowGearBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadGearBook"
			@@^Action		= "TeachGearBook"

				[HasNotReadGearBook]
				PEType	= "NOT"
				Input	= "HasReadGearBook"

					[HasReadGearBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadGearBook"

				[TeachGearBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowGearBook"
				@@&			= "MarkGearBookRead"

					[MarkGearBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadGearBook"
					ValuePE		= "TruePE"

		[JumpBootsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerHighJumpPerk"
		@@&			= "HideBootsHUD"

			[OnUnequippedRule]
			Event	= "OnUnequipped"

			[UnTriggerHighJumpPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "HighJumpPerkPE"

[ClimbingBootsPickup]
Extends			= "JumpBootsPickup"
EldMesh			= "ClimbingBootsPickupMesh"
EldFrobbable	= "ClimbingBootsPickupFrobbable"
EldPickup		= "ClimbingBootsPickupPickup"

	[ClimbingBootsPickupMesh]
	Extends	= "JumpBootsPickupMesh"
	Mesh	= "Meshes/boots-climbing.cms"

	[ClimbingBootsPickupFrobbable]
	Extends			= "JumpBootsPickupFrobbable"
	FriendlyName	= "ClimbingBoots"

	[ClimbingBootsPickupPickup]
	GiveItem		= "ClimbingBoots"

[ClimbingBootsPickupForSale]
Extends			= "ClimbingBootsPickup"
EldFrobbable	= "ClimbingBootsPickupForSaleFrobbable"
EldPickup		= "ClimbingBootsPickupForSalePickup"

	[ClimbingBootsPickupForSaleFrobbable]
	Extends			= "JumpBootsPickupForSaleFrobbable"
	FriendlyName	= "ClimbingBoots"

	[ClimbingBootsPickupForSalePickup]
	GiveItem		= "ClimbingBoots"
	Price			= 30
	FriendlyName	= "ClimbingBoots"
	FriendlyDesc	= "ClimbingBootsDesc"

[ClimbingBoots]
Extends		= "JumpBoots"
EldItem		= "ClimbingBootsItem"
Reactions	= "ClimbingBootsReactions"

	[ClimbingBootsItem]
	Extends		= "JumpBootsItem"
	DropSpawn	= "ClimbingBootsPickup"

	[ClimbingBootsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "ClimbingBootsOnInitialized"
	@@&				= "ClimbingBootsOnEquipped"
	@@&				= "ClimbingBootsOnUnequipped"
	@@&				= "OnShowClimbingBootsBookReaction"

		[ClimbingBootsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerClimbingPerk"
		@@&			= "SetClimbingBootsHUD"
		@@&			= "SetCurrentBootsBookClimbingBoots"
		@@&			= "ShowBootsHUD"

			[SetClimbingBootsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-climbing_NODXT.tga"

			[TriggerClimbingPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "ClimbingPerkPE"

				[ClimbingPerkPE]
				PEType	= "ConstantString"
				Value	= "ClimbingPerk"

		[ClimbingBootsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowClimbingBootsBook"
		@@&			= "TriggerClimbingPerk"
		@@&			= "SetClimbingBootsHUD"
		@@&			= "SetCurrentBootsBookClimbingBoots"
		@@&			= "ShowBootsHUD"

		[ClimbingBootsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerClimbingPerk"
		@@&			= "HideBootsHUD"

			[UnTriggerClimbingPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "ClimbingPerkPE"

[SpeedBootsPickup]
Extends			= "JumpBootsPickup"
EldCollision	= "SpeedBootsPickupCollision"
EldMesh			= "SpeedBootsPickupMesh"
EldFrobbable	= "SpeedBootsPickupFrobbable"
EldPickup		= "SpeedBootsPickupPickup"

	[SpeedBootsPickupCollision]
	HalfExtentsXY	= 0.1875
	HalfExtentsZ	= 0.1875

	[SpeedBootsPickupMesh]
	Extends	= "JumpBootsPickupMesh"
	Mesh	= "Meshes/boots-speed.cms"

	[SpeedBootsPickupFrobbable]
	Extends			= "JumpBootsPickupFrobbable"
	FriendlyName	= "SpeedBoots"

	[SpeedBootsPickupPickup]
	GiveItem		= "SpeedBoots"

[SpeedBootsPickupForSale]
Extends			= "SpeedBootsPickup"
EldFrobbable	= "SpeedBootsPickupForSaleFrobbable"
EldPickup		= "SpeedBootsPickupForSalePickup"

	[SpeedBootsPickupForSaleFrobbable]
	Extends			= "JumpBootsPickupForSaleFrobbable"
	FriendlyName	= "SpeedBoots"

	[SpeedBootsPickupForSalePickup]
	GiveItem		= "SpeedBoots"
	Price			= 30
	FriendlyName	= "SpeedBoots"
	FriendlyDesc	= "SpeedBootsDesc"

[SpeedBoots]
Extends		= "JumpBoots"
EldItem		= "SpeedBootsItem"
Reactions	= "SpeedBootsReactions"

	[SpeedBootsItem]
	Extends		= "JumpBootsItem"
	DropSpawn	= "SpeedBootsPickup"

	[SpeedBootsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SpeedBootsOnInitialized"
	@@&				= "SpeedBootsOnEquipped"
	@@&				= "SpeedBootsOnUnequipped"
	@@&				= "OnShowSpeedBootsBookReaction"

		[SpeedBootsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerSpeedPerk"
		@@&			= "SetSpeedBootsHUD"
		@@&			= "SetCurrentBootsBookSpeedBoots"
		@@&			= "ShowBootsHUD"

			[SetSpeedBootsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-speed_NODXT.tga"

			[TriggerSpeedPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "SpeedPerkPE"

				[SpeedPerkPE]
				PEType	= "ConstantString"
				Value	= "SpeedPerk"

		[SpeedBootsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSpeedBootsBook"
		@@&			= "TriggerSpeedPerk"
		@@&			= "SetSpeedBootsHUD"
		@@&			= "SetCurrentBootsBookSpeedBoots"
		@@&			= "ShowBootsHUD"

		[SpeedBootsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerSpeedPerk"
		@@&			= "HideBootsHUD"

			[UnTriggerSpeedPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "SpeedPerkPE"

[QuietBootsPickup]
Extends			= "JumpBootsPickup"
EldCollision	= "QuietBootsPickupCollision"
EldMesh			= "QuietBootsPickupMesh"
EldFrobbable	= "QuietBootsPickupFrobbable"
EldPickup		= "QuietBootsPickupPickup"

	[QuietBootsPickupCollision]
	HalfExtentsXY	= 0.1875
	HalfExtentsZ	= 0.1875

	[QuietBootsPickupMesh]
	Extends	= "JumpBootsPickupMesh"
	Mesh	= "Meshes/boots-quiet.cms"

	[QuietBootsPickupFrobbable]
	Extends			= "JumpBootsPickupFrobbable"
	FriendlyName	= "QuietBoots"

	[QuietBootsPickupPickup]
	GiveItem	= "QuietBoots"

[QuietBootsPickupForSale]
Extends			= "QuietBootsPickup"
EldFrobbable	= "QuietBootsPickupForSaleFrobbable"
EldPickup		= "QuietBootsPickupForSalePickup"

	[QuietBootsPickupForSaleFrobbable]
	Extends			= "JumpBootsPickupForSaleFrobbable"
	FriendlyName	= "QuietBoots"

	[QuietBootsPickupForSalePickup]
	GiveItem		= "QuietBoots"
	Price			= 40
	FriendlyName	= "QuietBoots"
	FriendlyDesc	= "QuietBootsDesc"

[QuietBoots]
Extends		= "JumpBoots"
EldItem		= "QuietBootsItem"
Reactions	= "QuietBootsReactions"

	[QuietBootsItem]
	Extends		= "JumpBootsItem"
	DropSpawn	= "QuietBootsPickup"

	[QuietBootsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "QuietBootsOnInitialized"
	@@&				= "QuietBootsOnEquipped"
	@@&				= "QuietBootsOnUnequipped"
	@@&				= "OnShowQuietBootsBookReaction"

		[QuietBootsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerQuietPerk"
		@@&			= "SetQuietBootsHUD"
		@@&			= "SetCurrentBootsBookQuietBoots"
		@@&			= "ShowBootsHUD"

			[SetQuietBootsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-quiet_NODXT.tga"

			[TriggerQuietPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "QuietPerkPE"

				[QuietPerkPE]
				PEType	= "ConstantString"
				Value	= "QuietPerk"

		[QuietBootsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowQuietBootsBook"
		@@&			= "TriggerQuietPerk"
		@@&			= "SetQuietBootsHUD"
		@@&			= "SetCurrentBootsBookQuietBoots"
		@@&			= "ShowBootsHUD"

		[QuietBootsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerQuietPerk"
		@@&			= "HideBootsHUD"

			[UnTriggerQuietPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "QuietPerkPE"

# Rm
[DressBootsPickup]
Extends			= "JumpBootsPickup"
EldCollision	= "DressBootsPickupCollision"
EldMesh			= "DressBootsPickupMesh"
EldFrobbable	= "DressBootsPickupFrobbable"
EldPickup		= "DressBootsPickupPickup"

	[DressBootsPickupCollision]
	HalfExtentsXY	= 0.1875
	HalfExtentsZ	= 0.140625

	[DressBootsPickupMesh]
	Extends	= "JumpBootsPickupMesh"
	Mesh	= "Meshes/boots-dress.cms"

	[DressBootsPickupFrobbable]
	Extends			= "JumpBootsPickupFrobbable"
	FriendlyName	= "DressBoots"

	[DressBootsPickupPickup]
	GiveItem	= "DressBoots"

[DressBootsPickupForSale]
Extends			= "DressBootsPickup"
EldFrobbable	= "DressBootsPickupForSaleFrobbable"
EldPickup		= "DressBootsPickupForSalePickup"

	[DressBootsPickupForSaleFrobbable]
	Extends			= "JumpBootsPickupForSaleFrobbable"
	FriendlyName	= "DressBoots"

	[DressBootsPickupForSalePickup]
	GiveItem		= "DressBoots"
	Price			= 120
	FriendlyName	= "DressBoots"
	FriendlyDesc	= "DressBootsDesc"

[DressBoots]
Extends		= "JumpBoots"
EldItem		= "DressBootsItem"
Reactions	= "DressBootsReactions"

	[DressBootsItem]
	Extends		= "JumpBootsItem"
	DropSpawn	= "DressBootsPickup"

	[DressBootsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "DressBootsOnInitialized"
	@@&				= "DressBootsOnEquipped"
	@@&				= "DressBootsOnUnequipped"
	@@&				= "OnShowDressBootsBookReaction"

		[DressBootsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerDressPerk"
		@@&			= "SetDressBootsHUD"
		@@&			= "SetCurrentBootsBookDressBoots"
		@@&			= "ShowBootsHUD"

			[SetDressBootsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-dress_NODXT.tga"

			[TriggerDressPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "DressPerkPE"

				[DressPerkPE]
				PEType	= "ConstantString"
				Value	= "DressPerk"

		[DressBootsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowDressBootsBook"
		@@&			= "TriggerDressPerk"
		@@&			= "SetDressBootsHUD"
		@@&			= "SetCurrentBootsBookDressBoots"
		@@&			= "ShowBootsHUD"

		[DressBootsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerDressPerk"
		@@&			= "HideBootsHUD"

			[UnTriggerDressPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "DressPerkPE"
# Rm

[SandalsPickup]
Extends			= "JumpBootsPickup"
EldCollision	= "SandalsPickupCollision"
EldMesh			= "SandalsPickupMesh"
EldFrobbable	= "SandalsPickupFrobbable"
EldPickup		= "SandalsPickupPickup"

	[SandalsPickupCollision]
	HalfExtentsXY	= 0.1875
	HalfExtentsZ	= 0.0475

	[SandalsPickupMesh]
	Extends	= "JumpBootsPickupMesh"
	Mesh	= "Meshes/sandals.cms"

	[SandalsPickupFrobbable]
	Extends			= "JumpBootsPickupFrobbable"
	FriendlyName	= "Sandals"

	[SandalsPickupPickup]
	GiveItem	= "Sandals"

[Sandals]
Extends		= "JumpBoots"
EldItem		= "SandalsItem"
Reactions	= "SandalsReactions"

	[SandalsItem]
	Extends		= "JumpBootsItem"
	DropSpawn	= "SandalsPickup"

	[SandalsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SandalsOnInitialized"
	@@&				= "SandalsOnEquipped"
	@@&				= "SandalsOnUnequipped"
	@@&				= "OnShowSandalsBookReaction"

		[SandalsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "TriggerSandalsPerk"
		@@&			= "SetSandalsHUD"
		@@&			= "SetCurrentBootsBookSandals"
		@@&			= "ShowBootsHUD"

			[SetSandalsHUD]
			ActionType	= "UISetWidgetImage"
			Screen		= "PauseScreen"
			Widget		= "BootsImg"
			Image		= "Textures/UI/boots-hud-sandals_NODXT.tga"

			[TriggerSandalsPerk]
			ActionType		= "SendEvent"
			EventName		= "TriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "SandalsPerkPE"

				[SandalsPerkPE]
				PEType	= "ConstantString"
				Value	= "SandalsPerk"

		[SandalsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSandalsBook
		@@&			= "TriggerSandalsPerk"
		@@&			= "SetSandalsHUD"
		@@&			= "SetCurrentBootsBookSandals"
		@@&			= "ShowBootsHUD"

		[SandalsOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerSandalsPerk"
		@@&			= "HideBootsHUD"

			[UnTriggerSandalsPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "SandalsPerkPE"

# ****************************************************************
# ***************************** Kits *****************************
# ****************************************************************

[LocksmithKitPickup]
EldTransform	= "LocksmithKitPickupTransform"
EldCollision	= "LocksmithKitPickupCollision"
EldMesh			= "LocksmithKitPickupMesh"
EldDropShadow	= "LocksmithKitPickupDropShadow"
EldFrobbable	= "LocksmithKitPickupFrobbable"
EldPickup		= "LocksmithKitPickupPickup"

	[LocksmithKitPickupTransform]
	UseGravity	= true

	[LocksmithKitPickupCollision]
	HalfExtentsX	= 0.25
	HalfExtentsY	= 0.125
	HalfExtentsZ	= 0.25

	[LocksmithKitPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.25
	VoxelCheckOffsetZ	= 0.0
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[LocksmithKitPickupMesh]
	Mesh	= "Meshes/kit.cms"

	[LocksmithKitPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "LocksmithKit"
	FrobVerb		= "PickUp"

	[LocksmithKitPickupPickup]
	GiveItem		= "LocksmithKit"

[LocksmithKitPickupForSale]
Extends			= "LocksmithKitPickup"
EldFrobbable	= "LocksmithKitPickupForSaleFrobbable"
EldPickup		= "LocksmithKitPickupForSalePickup"

	[LocksmithKitPickupForSaleFrobbable]
	Extends		= "LocksmithKitPickupFrobbable"
	FrobVerb	= "Examine"
	
	[LocksmithKitPickupForSalePickup]
	GiveItem		= "LocksmithKit"
	Price			= 75
	FriendlyName	= "LocksmithKit"
	FriendlyDesc	= "LocksmithKitDesc"

[LocksmithKit]
EldItem		= "LocksmithKitItem"
Owner		= "."
Reactions	= "LocksmithKitReactions"
PEMap		= "LocksmithKitPEMap"

	[LocksmithKitItem]
	Slot				= "Kit"
	DropSpawn			= "LocksmithKitPickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0
	DropSpawnOffsetZ	= 0.1
	DropSpawnYaw		= 180.0

	[LocksmithKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "LocksmithPerkPE"

		[LocksmithPerkPE]
		PEType	= "ConstantString"
		Value	= "LocksmithPerk"

	[LocksmithKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "LocksmithKitOnInitialized"
	@@&				= "LocksmithKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowLocksmithKitBookReaction"

		[LocksmithKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateLocksmithKit"

			[ActivateLocksmithKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetLocksmithKitHUD"
			@@&			= "SetCurrentKitBookLocksmithKit"
			@@&			= "ShowKitHUD"

				[SetLocksmithKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-locksmith_NODXT.tga"

				[ShowKitHUD]
				ActionType	= "UIShowHideWidget"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Hidden		= false
				SetDisabled	= true

				[TriggerKitPerk]
				ActionType		= "SendEvent"
				EventName		= "TriggerStatMod"
				Recipient		= "OwnerPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "StatModEvent"
				@@^Value		= "KitPerkPE"

					[KitPerkPE]
					PEType	= "Lookup"
					Key		= "KitPerk"

		[LocksmithKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowLocksmithKitBook"
		@@&			= "ActivateLocksmithKit"

		[KitOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "UnTriggerKitPerk"
		@@&			= "HideKitHUD"

			[UnTriggerKitPerk]
			ActionType		= "SendEvent"
			EventName		= "UnTriggerStatMod"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "StatModEvent"
			@@^Value		= "KitPerkPE"

[MedicalKitPickup]
Extends			= "LocksmithKitPickup"
EldMesh			= "MedicalKitPickupMesh"
EldFrobbable	= "MedicalKitPickupFrobbable"
EldPickup		= "MedicalKitPickupPickup"

	[MedicalKitPickupMesh]
	Extends				= "LocksmithKitPickupMesh"
	TextureOverride	= "Textures/kit-medical_NODXT.tga"

	[MedicalKitPickupFrobbable]
	Extends			= "LocksmithKitPickupFrobbable"
	FriendlyName	= "MedicalKit"

	[MedicalKitPickupPickup]
	GiveItem		= "MedicalKit"

[MedicalKitPickupForSale]
Extends			= "MedicalKitPickup"
EldFrobbable	= "MedicalKitPickupForSaleFrobbable"
EldPickup		= "MedicalKitPickupForSalePickup"

	[MedicalKitPickupForSaleFrobbable]
	Extends			= "LocksmithKitPickupForSaleFrobbable"
	FriendlyName	= "MedicalKit"

	[MedicalKitPickupForSalePickup]
	GiveItem		= "MedicalKit"
	Price			= 45
	FriendlyName	= "MedicalKit"
	FriendlyDesc	= "MedicalKitDesc"

[MedicalKit]
Extends		= "LocksmithKit"
EldItem		= "MedicalKitItem"
Reactions	= "MedicalKitReactions"
PEMap		= "MedicalKitPEMap"

	[MedicalKitItem]
	Extends		= "LocksmithKitItem"
	DropSpawn	= "MedicalKitPickup"

	[MedicalKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "MedicalPerkPE"

		[MedicalPerkPE]
		PEType	= "ConstantString"
		Value	= "MedicalPerk"

	[MedicalKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "MedicalKitOnInitialized"
	@@&				= "MedicalKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowMedicalKitBookReaction"

		[MedicalKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateMedicalKit"

			[ActivateMedicalKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetMedicalKitHUD"
			@@&			= "SetCurrentKitBookMedicalKit"
			@@&			= "ShowKitHUD"

				[SetMedicalKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-medical_NODXT.tga"

		[MedicalKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowMedicalKitBook"
		@@&			= "ActivateMedicalKit"

[TinningKitPickup]
Extends			= "LocksmithKitPickup"
EldMesh			= "TinningKitPickupMesh"
EldFrobbable	= "TinningKitPickupFrobbable"
EldPickup		= "TinningKitPickupPickup"

	[TinningKitPickupMesh]
	Extends				= "LocksmithKitPickupMesh"
	TextureOverride	= "Textures/kit-tinning_NODXT.tga"

	[TinningKitPickupFrobbable]
	Extends			= "LocksmithKitPickupFrobbable"
	FriendlyName	= "TinningKit"

	[TinningKitPickupPickup]
	GiveItem		= "TinningKit"

[TinningKitPickupForSale]
Extends			= "TinningKitPickup"
EldFrobbable	= "TinningKitPickupForSaleFrobbable"
EldPickup		= "TinningKitPickupForSalePickup"

	[TinningKitPickupForSaleFrobbable]
	Extends			= "LocksmithKitPickupForSaleFrobbable"
	FriendlyName	= "TinningKit"

	[TinningKitPickupForSalePickup]
	GiveItem		= "TinningKit"
	Price			= 60
	FriendlyName	= "TinningKit"
	FriendlyDesc	= "TinningKitDesc"

[TinningKit]
Extends		= "LocksmithKit"
EldItem		= "TinningKitItem"
Reactions	= "TinningKitReactions"
PEMap		= "TinningKitPEMap"

	[TinningKitItem]
	Extends		= "LocksmithKitItem"
	DropSpawn	= "TinningKitPickup"

	[TinningKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "TinningPerkPE"

		[TinningPerkPE]
		PEType	= "ConstantString"
		Value	= "TinningPerk"

	[TinningKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TinningKitOnInitialized"
	@@&				= "TinningKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowTinningKitBookReaction"

		[TinningKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateTinningKit"

			[ActivateTinningKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetTinningKitHUD"
			@@&			= "SetCurrentKitBookTinningKit"
			@@&			= "ShowKitHUD"

				[SetTinningKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-tinning_NODXT.tga"

		[TinningKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowTinningKitBook"
		@@&			= "ActivateTinningKit"
		
# Rm ---------------------------------------------------------------------------------------
[SmeltingKitPickup]
Extends			= "LocksmithKitPickup"
EldMesh			= "SmeltingKitPickupMesh"
EldFrobbable	= "SmeltingKitPickupFrobbable"
EldPickup		= "SmeltingKitPickupPickup"

	[SmeltingKitPickupMesh]
	Extends				= "LocksmithKitPickupMesh"
	TextureOverride	= "Textures/kit-smelting_NODXT.tga"

	[SmeltingKitPickupFrobbable]
	Extends			= "LocksmithKitPickupFrobbable"
	FriendlyName	= "SmeltingKit"

	[SmeltingKitPickupPickup]
	GiveItem		= "SmeltingKit"

[SmeltingKitPickupForSale]
Extends			= "SmeltingKitPickup"
EldFrobbable	= "SmeltingKitPickupForSaleFrobbable"
EldPickup		= "SmeltingKitPickupForSalePickup"

	[SmeltingKitPickupForSaleFrobbable]
	Extends			= "LocksmithKitPickupForSaleFrobbable"
	FriendlyName	= "SmeltingKit"

	[SmeltingKitPickupForSalePickup]
	GiveItem		= "SmeltingKit"
	Price			= 50
	FriendlyName	= "SmeltingKit"
	FriendlyDesc	= "SmeltingKitDesc"

[SmeltingKit]
Extends		= "LocksmithKit"
EldItem		= "SmeltingKitItem"
Reactions	= "SmeltingKitReactions"
PEMap		= "SmeltingKitPEMap"

	[SmeltingKitItem]
	Extends		= "LocksmithKitItem"
	DropSpawn	= "SmeltingKitPickup"

	[SmeltingKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "SmeltingPerkPE"

		[SmeltingPerkPE]
		PEType	= "ConstantString"
		Value	= "SmeltingPerk"

	[SmeltingKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SmeltingKitOnInitialized"
	@@&				= "SmeltingKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowSmeltingKitBookReaction"

		[SmeltingKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateSmeltingKit"

			[ActivateSmeltingKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetSmeltingKitHUD"
			@@&			= "SetCurrentKitBookSmeltingKit"
			@@&			= "ShowKitHUD"

				[SetSmeltingKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-smelting_NODXT.tga"

		[SmeltingKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSmeltingKitBook"
		@@&			= "ActivateSmeltingKit"
# Rm ---------------------------------------------------------------------------------------

[CampingKitPickup]
Extends			= "LocksmithKitPickup"
EldMesh			= "CampingKitPickupMesh"
EldFrobbable	= "CampingKitPickupFrobbable"
EldPickup		= "CampingKitPickupPickup"

	[CampingKitPickupMesh]
	Extends			= "LocksmithKitPickupMesh"
	TextureOverride	= "Textures/kit-camping_NODXT.tga"

	[CampingKitPickupFrobbable]
	Extends			= "LocksmithKitPickupFrobbable"
	FriendlyName	= "CampingKit"

	[CampingKitPickupPickup]
	GiveItem		= "CampingKit"

[CampingKitPickupForSale]
Extends			= "CampingKitPickup"
EldFrobbable	= "CampingKitPickupForSaleFrobbable"
EldPickup		= "CampingKitPickupForSalePickup"

	[CampingKitPickupForSaleFrobbable]
	Extends			= "LocksmithKitPickupForSaleFrobbable"
	FriendlyName	= "CampingKit"

	[CampingKitPickupForSalePickup]
	GiveItem		= "CampingKit"
	Price			= 30
	FriendlyName	= "CampingKit"
	FriendlyDesc	= "CampingKitDesc"

[CampingKit]
Extends		= "LocksmithKit"
EldItem		= "CampingKitItem"
Reactions	= "CampingKitReactions"
PEMap		= "CampingKitPEMap"

	[CampingKitItem]
	Extends		= "LocksmithKitItem"
	DropSpawn	= "CampingKitPickup"

	[CampingKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "CampingPerkPE"

		[CampingPerkPE]
		PEType	= "ConstantString"
		Value	= "CampingPerk"

	[CampingKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "CampingKitOnInitialized"
	@@&				= "CampingKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowCampingKitBookReaction"

		[CampingKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateCampingKit"

			[ActivateCampingKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetCampingKitHUD"
			@@&			= "SetCurrentKitBookCampingKit"
			@@&			= "ShowKitHUD"

				[SetCampingKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-camping_NODXT.tga"

		[CampingKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowCampingKitBook"
		@@&			= "ActivateCampingKit"

[ConsecrationKitPickup]
Extends			= "LocksmithKitPickup"
EldMesh			= "ConsecrationKitPickupMesh"
EldFrobbable	= "ConsecrationKitPickupFrobbable"
EldPickup		= "ConsecrationKitPickupPickup"

	[ConsecrationKitPickupMesh]
	Extends				= "LocksmithKitPickupMesh"
	TextureOverride	= "Textures/kit-consecration_NODXT.tga"

	[ConsecrationKitPickupFrobbable]
	Extends			= "LocksmithKitPickupFrobbable"
	FriendlyName	= "ConsecrationKit"

	[ConsecrationKitPickupPickup]
	GiveItem		= "ConsecrationKit"

[ConsecrationKit]
Extends		= "LocksmithKit"
EldItem		= "ConsecrationKitItem"
Reactions	= "ConsecrationKitReactions"
PEMap		= "ConsecrationKitPEMap"

	[ConsecrationKitItem]
	Extends		= "LocksmithKitItem"
	DropSpawn	= "ConsecrationKitPickup"

	[ConsecrationKitPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "KitPerk"
	@@^Def	= "ConsecrationPerkPE"

		[ConsecrationPerkPE]
		PEType	= "ConstantString"
		Value	= "ConsecrationPerk"

	[ConsecrationKitReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "ConsecrationKitOnInitialized"
	@@&				= "ConsecrationKitOnEquipped"
	@@&				= "KitOnUnequipped"
	@@&				= "OnShowConsecrationKitBookReaction"

		[ConsecrationKitOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateConsecrationKit"

			[ActivateConsecrationKit]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerKitPerk"
			@@&			= "SetConsecrationKitHUD"
			@@&			= "SetCurrentKitBookConsecrationKit"
			@@&			= "ShowKitHUD"

				[SetConsecrationKitHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "KitImg"
				Image		= "Textures/UI/kit-hud-consecration_NODXT.tga"

		[ConsecrationKitOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowConsecrationKitBook"
		@@&			= "ActivateConsecrationKit"

# ****************************************************************
# *************************** Gadgets ****************************
# ****************************************************************

[CompassPickup]
EldTransform	= "CompassPickupTransform"
EldCollision	= "CompassPickupCollision"
EldMesh			= "CompassPickupMesh"
EldDropShadow	= "CompassPickupDropShadow"
EldFrobbable	= "CompassPickupFrobbable"
EldPickup		= "CompassPickupPickup"

	[CompassPickupTransform]
	UseGravity	= true

	[CompassPickupCollision]
	HalfExtentsX	= 0.1875
	HalfExtentsY	= 0.1875
	HalfExtentsZ	= 0.046875

	[CompassPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.25
	VoxelCheckOffsetZ	= 0.0
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[CompassPickupMesh]
	Mesh	= "Meshes/compass.cms"

	[CompassPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Compass"
	FrobVerb		= "PickUp"

	[CompassPickupPickup]
	GiveItem		= "Compass"

[CompassPickupForSale]
Extends			= "CompassPickup"
EldFrobbable	= "CompassPickupForSaleFrobbable"
EldPickup		= "CompassPickupForSalePickup"

	[CompassPickupForSaleFrobbable]
	Extends		= "CompassPickupFrobbable"
	FrobVerb	= "Examine"

	[CompassPickupForSalePickup]
	GiveItem		= "Compass"
	Price			= 10
	FriendlyName	= "Compass"
	FriendlyDesc	= "CompassDesc"

[Compass]
EldItem		= "CompassItem"
Owner		= "."
Reactions	= "CompassReactions"
PEMap		= "CompassPEMap"

	[CompassItem]
	Slot				= "Tool"
	DropSpawn			= "CompassPickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0
	DropSpawnOffsetZ	= 0.1
	DropSpawnYaw		= 180.0

	[CompassPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "CompassPerkPE"

		[CompassPerkPE]
		PEType	= "ConstantString"
		Value	= "CompassPerk"

	[CompassReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "CompassOnInitialized"
	@@&				= "CompassOnEquipped"
	@@&				= "CompassOnUnequipped"
	@@&				= "OnShowCompassBookReaction"

		[CompassOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateCompass"

			[ActivateCompass]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "ShowExitHUD"
			@@&			= "ShowAllMapMarkers"
			@@&			= "SetCompassHUD"
			@@&			= "SetCurrentToolBookCompass"
			@@&			= "ShowToolHUD"

				[SetCompassHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-compass_NODXT.tga"

				[ShowExitHUD]
				ActionType	= "UIShowHideWidget"
				Screen		= "HUD"
				Widget		= "ExitImage"
				Hidden		= false

				[ShowAllMapMarkers]
				ActionType	= "SendEvent"
				EventName	= "ShowAllMapMarkers"
				Recipient	= "PlayerPE"

				[ShowToolHUD]
				ActionType	= "UIShowHideWidget"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Hidden		= false
				SetDisabled	= true

				[TriggerToolPerk]
				ActionType		= "SendEvent"
				EventName		= "TriggerStatMod"
				Recipient		= "OwnerPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "StatModEvent"
				@@^Value		= "ToolPerkPE"

					[ToolPerkPE]
					PEType	= "Lookup"
					Key		= "ToolPerk"

		[CompassOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowCompassBook"
		@@&			= "ActivateCompass"

		[CompassOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "DeactivateToolAction"
		@@&			= "HideExitHUD"
		@@&			= "UnShowAllMapMarkers"

			[DeactivateToolAction]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "UnTriggerToolPerk"
			@@&			= "HideToolHUD"

				[UnTriggerToolPerk]
				ActionType		= "SendEvent"
				EventName		= "UnTriggerStatMod"
				Recipient		= "OwnerPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "StatModEvent"
				@@^Value		= "ToolPerkPE"

			[UnShowAllMapMarkers]
			ActionType	= "SendEvent"
			EventName	= "HideAllMapMarkers"
			Recipient	= "PlayerPE"

[CharmPickup]
Extends			= "CompassPickup"
EldMesh			= "CharmPickupMesh"
EldFrobbable	= "CharmPickupFrobbable"
EldPickup		= "CharmPickupPickup"

	[CharmPickupMesh]
	Mesh				= "Meshes/charm.cms"

	[CharmPickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Charm"

	[CharmPickupPickup]
	GiveItem		= "Charm"

[CharmPickupForSale]
Extends			= "CharmPickup"
EldFrobbable	= "CharmPickupForSaleFrobbable"
EldPickup		= "CharmPickupForSalePickup"

	[CharmPickupForSaleFrobbable]
	Extends			= "CompassPickupForSaleFrobbable"
	FriendlyName	= "Charm"

	[CharmPickupForSalePickup]
	GiveItem		= "Charm"
	Price			= 20
	FriendlyName	= "Charm"
	FriendlyDesc	= "CharmDesc"

[Charm]
Extends		= "Compass"
EldItem		= "CharmItem"
Reactions	= "CharmReactions"
PEMap		= "CharmPEMap"

	[CharmItem]
	Extends		= "CompassItem"
	DropSpawn	= "CharmPickup"

	[CharmPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "CharmPerkPE"

		[CharmPerkPE]
		PEType	= "ConstantString"
		Value	= "CharmPerk"

	[CharmReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "CharmOnInitialized"
	@@&				= "CharmOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowCharmBookReaction"

		[CharmOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateCharm"

			[ActivateCharm]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetCharmHUD"
			@@&			= "SetCurrentToolBookCharm"
			@@&			= "ShowToolHUD"

				[SetCharmHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-charm_NODXT.tga"

		[CharmOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowCharmBook"
		@@&			= "ActivateCharm"

		[ToolOnUnequipped]
		Rule	 	= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "DeactivateToolAction"

[AmuletPickup]
Extends			= "CompassPickup"
EldMesh			= "AmuletPickupMesh"
EldFrobbable	= "AmuletPickupFrobbable"
EldPickup		= "AmuletPickupPickup"

	[AmuletPickupMesh]
	Mesh				= "Meshes/amulet.cms"

	[AmuletPickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Amulet"

	[AmuletPickupPickup]
	GiveItem		= "Amulet"

[AmuletPickupForSale]
Extends			= "AmuletPickup"
EldFrobbable	= "AmuletPickupForSaleFrobbable"
EldPickup		= "AmuletPickupForSalePickup"

	[AmuletPickupForSaleFrobbable]
	Extends			= "CompassPickupForSaleFrobbable"
	FriendlyName	= "Amulet"

	[AmuletPickupForSalePickup]
	GiveItem		= "Amulet"
	Price			= 30
	FriendlyName	= "Amulet"
	FriendlyDesc	= "AmuletDesc"

[Amulet]
Extends		= "Compass"
EldItem		= "AmuletItem"
Reactions	= "AmuletReactions"
PEMap		= "AmuletPEMap"

	[AmuletItem]
	Extends		= "CompassItem"
	DropSpawn	= "AmuletPickup"

	[AmuletPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "AmuletPerkPE"

		[AmuletPerkPE]
		PEType	= "ConstantString"
		Value	= "AmuletPerk"

	[AmuletReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "AmuletOnInitialized"
	@@&				= "AmuletOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowAmuletBookReaction"

		[AmuletOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateAmulet"

			[ActivateAmulet]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetAmuletHUD"
			@@&			= "SetCurrentToolBookAmulet"
			@@&			= "ShowToolHUD"

				[SetAmuletHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-amulet_NODXT.tga"

		[AmuletOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowAmuletBook"
		@@&			= "ActivateAmulet"

[TalismanPickup]
Extends			= "CompassPickup"
EldMesh			= "TalismanPickupMesh"
EldFrobbable	= "TalismanPickupFrobbable"
EldPickup		= "TalismanPickupPickup"

	[TalismanPickupMesh]
	Mesh			= "Meshes/talisman.cms"

	[TalismanPickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Talisman"

	[TalismanPickupPickup]
	GiveItem		= "Talisman"

[TalismanPickupForSale]
Extends			= "TalismanPickup"
EldFrobbable	= "TalismanPickupForSaleFrobbable"
EldPickup		= "TalismanPickupForSalePickup"

	[TalismanPickupForSaleFrobbable]
	Extends			= "CompassPickupForSaleFrobbable"
	FriendlyName	= "Talisman"

	[TalismanPickupForSalePickup]
	GiveItem		= "Talisman"
	Price			= 25
	FriendlyName	= "Talisman"
	FriendlyDesc	= "TalismanDesc"

[Talisman]
Extends		= "Compass"
EldItem		= "TalismanItem"
Reactions	= "TalismanReactions"
PEMap		= "TalismanPEMap"

	[TalismanItem]
	Extends		= "CompassItem"
	DropSpawn	= "TalismanPickup"

	[TalismanPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "TalismanPerkPE"

		[TalismanPerkPE]
		PEType	= "ConstantString"
		Value	= "TalismanPerk"

	[TalismanReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TalismanOnInitialized"
	@@&				= "TalismanOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowTalismanBookReaction"

		[TalismanOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateTalisman"

			[ActivateTalisman]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetTalismanHUD"
			@@&			= "SetCurrentToolBookTalisman"
			@@&			= "ShowToolHUD"

				[SetTalismanHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-talisman_NODXT.tga"

		[TalismanOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowTalismanBook"
		@@&			= "ActivateTalisman"

# Rm
[SupplementsPickup]
Extends			= "CompassPickup"
EldCollision	= "SupplementsPickupCollision"
EldDropShadow	= "SupplementsPickupDropShadow"
EldMesh			= "SupplementsPickupMesh"
EldFrobbable	= "SupplementsPickupFrobbable"
EldPickup		= "SupplementsPickupPickup"

	[SupplementsPickupCollision]
	HalfExtentsXY	= 0.09375
	HalfExtentsZ	= 0.1875

	[SupplementsPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.20
	VoxelCheckOffsetZ	= 0.0
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[SupplementsPickupMesh]
	Mesh			= "Meshes/supplements.cms"

	[SupplementsPickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Supplements"

	[SupplementsPickupPickup]
	GiveItem		= "Supplements"

[SupplementsPickupForSale]
Extends			= "SupplementsPickup"
EldFrobbable	= "SupplementsPickupForSaleFrobbable"
EldPickup		= "SupplementsPickupForSalePickup"

	[SupplementsPickupForSaleFrobbable]
	Extends			= "CompassPickupForSaleFrobbable"
	FriendlyName	= "Supplements"

	[SupplementsPickupForSalePickup]
	GiveItem		= "Supplements"
	Price			= 25
	FriendlyName	= "Supplements"
	FriendlyDesc	= "SupplementsDesc"

[Supplements]
Extends		= "Compass"
EldItem		= "SupplementsItem"
Reactions	= "SupplementsReactions"
PEMap		= "SupplementsPEMap"

	[SupplementsItem]
	Extends		= "CompassItem"
	DropSpawn	= "SupplementsPickup"

	[SupplementsPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "SupplementsPerkPE"

		[SupplementsPerkPE]
		PEType	= "ConstantString"
		Value	= "SupplementsPerk"

	[SupplementsReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SupplementsOnInitialized"
	@@&				= "SupplementsOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowSupplementsBookReaction"

		[SupplementsOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateSupplements"

			[ActivateSupplements]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetSupplementsHUD"
			@@&			= "SetCurrentToolBookSupplements"
			@@&			= "ShowToolHUD"

				[SetSupplementsHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-supplements_NODXT.tga"

		[SupplementsOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSupplementsBook"
		@@&			= "ActivateSupplements"
# Rm

[SoapstonePickup]
Extends			= "CompassPickup"
EldMesh			= "SoapstonePickupMesh"
EldFrobbable	= "SoapstonePickupFrobbable"
EldPickup		= "SoapstonePickupPickup"

	[SoapstonePickupMesh]
	Mesh			= "Meshes/soapstone.cms"

	[SoapstonePickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Soapstone"

	[SoapstonePickupPickup]
	GiveItem		= "Soapstone"

[Soapstone]
Extends		= "Compass"
EldItem		= "SoapstoneItem"
Reactions	= "SoapstoneReactions"
PEMap		= "SoapstonePEMap"

	[SoapstoneItem]
	Extends		= "CompassItem"
	DropSpawn	= "SoapstonePickup"

	[SoapstonePEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "SoapstonePerkPE"

		[SoapstonePerkPE]
		PEType	= "ConstantString"
		Value	= "SoapstonePerk"

	[SoapstoneReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SoapstoneOnInitialized"
	@@&				= "SoapstoneOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowSoapstoneBookReaction"

		[SoapstoneOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateSoapstone"

			[ActivateSoapstone]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetSoapstoneHUD"
			@@&			= "SetCurrentToolBookSoapstone"
			@@&			= "ShowToolHUD"

				[SetSoapstoneHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-soapstone_NODXT.tga"

		[SoapstoneOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSoapstoneBook"
		@@&			= "ActivateSoapstone"

[SoulstonePickup]
Extends			= "CompassPickup"
EldMesh			= "SoulstonePickupMesh"
EldFrobbable	= "SoulstonePickupFrobbable"
EldPickup		= "SoulstonePickupPickup"

	[SoulstonePickupMesh]
	Mesh				= "Meshes/soulstone.cms"

	[SoulstonePickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "Soulstone"

	[SoulstonePickupPickup]
	GiveItem		= "Soulstone"

[Soulstone]
Extends		= "Compass"
EldItem		= "SoulstoneItem"
Reactions	= "SoulstoneReactions"
PEMap		= "SoulstonePEMap"

	[SoulstoneItem]
	Extends		= "CompassItem"
	DropSpawn	= "SoulstonePickup"

	[SoulstonePEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "SoulstonePerkPE"

		[SoulstonePerkPE]
		PEType	= "ConstantString"
		Value	= "SoulstonePerk"

	[SoulstoneReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SoulstoneOnInitialized"
	@@&				= "SoulstoneOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowSoulstoneBookReaction"

		[SoulstoneOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateSoulstone"

			[ActivateSoulstone]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetSoulstoneHUD"
			@@&			= "SetCurrentToolBookSoulstone"
			@@&			= "ShowToolHUD"

				[SetSoulstoneHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-soulstone_NODXT.tga"

		[SoulstoneOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowSoulstoneBook"
		@@&			= "ActivateSoulstone"

[HolySymbolPickup]
Extends			= "CompassPickup"
EldMesh			= "HolySymbolPickupMesh"
EldFrobbable	= "HolySymbolPickupFrobbable"
EldPickup		= "HolySymbolPickupPickup"

	[HolySymbolPickupMesh]
	Mesh			= "Meshes/holy-symbol.cms"

	[HolySymbolPickupFrobbable]
	Extends			= "CompassPickupFrobbable"
	FriendlyName	= "HolySymbol"

	[HolySymbolPickupPickup]
	GiveItem		= "HolySymbol"

[HolySymbol]
Extends		= "Compass"
EldItem		= "HolySymbolItem"
Reactions	= "HolySymbolReactions"
PEMap		= "HolySymbolPEMap"

	[HolySymbolItem]
	Extends		= "CompassItem"
	DropSpawn	= "HolySymbolPickup"

	[HolySymbolPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "ToolPerk"
	@@^Def	= "HolySymbolPerkPE"

		[HolySymbolPerkPE]
		PEType	= "ConstantString"
		Value	= "HolySymbolPerk"

	[HolySymbolReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "HolySymbolOnInitialized"
	@@&				= "HolySymbolOnEquipped"
	@@&				= "ToolOnUnequipped"
	@@&				= "OnShowHolySymbolBookReaction"

		[HolySymbolOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "ActivateHolySymbol"

			[ActivateHolySymbol]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "TriggerToolPerk"
			@@&			= "SetHolySymbolHUD"
			@@&			= "SetCurrentToolBookHolySymbol"
			@@&			= "ShowToolHUD"

				[SetHolySymbolHUD]
				ActionType	= "UISetWidgetImage"
				Screen		= "PauseScreen"
				Widget		= "ToolImg"
				Image		= "Textures/UI/tool-hud-holy-symbol_NODXT.tga"

		[HolySymbolOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowGearBook"
		@@&			= "QueueConditionalShowHolySymbolBook"
		@@&			= "ActivateHolySymbol"

# ****************************************************************
# ***************************** Key ******************************
# ****************************************************************

[Key]
#ShouldDebugRender	= true
EldTransform	= "KeyTransform"
EldCollision	= "KeyCollision"
EldMesh			= "KeyMesh"
EldFrobbable	= "KeyFrobbable"
EldDropShadow	= "KeyDropShadow"
Reactions		= "KeyReactions"
PEMap			= "KeyPEMap"

	[KeyTransform]
	UseGravity		= true

	[KeyCollision]
	HalfExtentsX	= 0.0625
	HalfExtentsY	= 0.1875
	HalfExtentsZ	= 0.03125	# Is actually 0.015625, but this helps keep it from getting buried in displaced tiles

	[KeyMesh]
	Mesh				= "Meshes/key.cms"
	
	[KeyFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Key"
	FrobVerb		= "PickUp"

	[KeyDropShadow]
	UseMeshCenter		= true
	Radius				= 0.15
	Alpha				= 0.25
	ShadowFloatZ		= 0.01

	[KeyReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "KeyOnFrobbedReaction"

		[KeyOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "GiveKeyToFrobber"
		@@&			= "ConditionalShowKeysBook"
		@@&			= "PlayKeySFX"
		@@&			= "DestroySelfAction"

			[GiveKeyToFrobber]
			ActionType		= "SendEvent"
			EventName		= "AddKey"
			Recipient		= "FrobberPE"

			[PlayKeySFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "KeySFXPE"

				[KeySFXPE]
				PEType	= "ConstantString"
				Value	= "KeySound"

			[ConditionalShowKeysBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadKeysBook"
			@@^Action		= "TeachKeysBook"

				[HasNotReadKeysBook]
				PEType	= "NOT"
				Input	= "HasReadKeysBook"

					[HasReadKeysBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadKeysBook"

				[TeachKeysBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowKeysBook"
				@@&			= "MarkKeysBookRead"

					[MarkKeysBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadKeysBook"
					ValuePE		= "TruePE"

[KeyForSale]
Extends			= "Key"
EldFrobbable	= "KeyForSaleFrobbable"
EldPickup		= "KeyForSalePickup"
Reactions		= "KeyForSaleReactions"

	[KeyForSaleFrobbable]
	Extends		= "KeyFrobbable"
	FrobVerb	= "Examine"

	[KeyForSalePickup]
	Price			= 5
	FriendlyName	= "Key"
	FriendlyDesc	= "KeyDesc"

	[KeyForSaleReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "KeyForSaleOnObtainedReaction"

		[KeyForSaleOnObtainedReaction]
		Rule		= "OnObtainedRule"
		NumActions	= &
		@ Action
		@@&			= "GiveKeyToBuyer"
		@@&			= "ConditionalShowKeysBook"
		@@&			= "PlayKeyForSaleSFX"
		@@&			= "DestroySelfAction"

			[OnObtainedRule]
			Event	= "OnObtained"

			[GiveKeyToBuyer]
			ActionType		= "SendEvent"
			EventName		= "AddKey"
			Recipient		= "BuyerPE"

				[BuyerPE]
				PEType	= "QueryActionStack"
				Key		= "Buyer"

			[PlayKeyForSaleSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "BuyerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "KeySFXPE"

# Rm
# ****************************************************************
# *************************** Lockbox ****************************
# ****************************************************************
[Lockbox]
EldTransform	= "Lockbox_Transform"
EldCollision	= "Lockbox_Collision"
EldMesh			= "Lockbox_Mesh"
EldFrobbable	= "Lockbox_Frobbable"
EldDropShadow	= "Lockbox_DropShadow"
EldSound		= "."
Reactions		= "Lockbox_Reactions"

	[Lockbox_Transform]
	UseGravity	= true

	[Lockbox_Collision]
	HalfExtentsX	= 0.375
	HalfExtentsY	= 0.28125
	HalfExtentsZ	= 0.1875

	[Lockbox_Mesh]
	Mesh	= "Meshes/lockbox.cms"

	[Lockbox_Frobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Lockbox"
	FrobVerb		= "Open"

	[Lockbox_DropShadow]
	UseMeshCenter		= true
	Radius				= 0.46875
	VoxelCheckOffsetZ	= 0.0
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[Lockbox_Reactions]
	NumReactions	= &
	@ Reaction
	@@&				= "LockboxOnFrobbedHasKeysReaction"
	@@&				= "LockboxOnFrobbedReaction"

		[LockboxOnFrobbedHasKeysReaction]
		Rule		= "OnFrobbedHasKeysRule"
		NumActions	= &
		@ Action
		@@&			= "RemoveFrobberKeyAction"
		@@&			= "PlayDoorUnlockSFX"	# TODO: new sound?
		@@&			= "LockboxGiveLootAction"
		@@&			= "PlayLootSFX"
		@@&			= "BecomeNonFrobbable"
		@@&			= "StopMotionAction"
		@@&			= "HideMeshAction"
		@@&			= "HideShadowAction"
		@@&			= "StopTouchingAction"
		@@&			= "LockboxQueueDestroySelf"

			[OnFrobbedHasKeysRule]
			Event			= "OnFrobbed"
			NumConditions	= &
			@ Condition
			@@&				= "FrobberKeysPE"

				[FrobberKeysPE]
				PEType		= "PushContext"
				EntityPE	= "FrobberPE"
				Input		= "KeysPE"

					[KeysPE]
					PEType	= "QueryActionStack"
					Key		= "Keys"

			[RemoveFrobberKeyAction]
			ActionType	= "SendEvent"
			EventName	= "RemoveKey"
			Recipient	= "FrobberPE"
			
			[LockboxGiveLootAction]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "LockboxLootChance_AmmoPE"
			@@^Action		= "LockboxGiveBulletsAction"
			@@&Condition	= "TruePE"
			@@^Action		= "LockboxGiveMoneyAction"

				# 1:3 chance to get ammo
				[LockboxLootChance_AmmoPE]
				PEType		= "RandomBool"
				Probability	= 0.333

				[LockboxGiveBulletsAction]
				ActionType		= "SendEvent"
				EventName		= "AddAmmo"
				Recipient		= "FrobberPE"
				QueueEvent		= true
				NumParameters	= &
				@ Parameter
				@@&Name			= "AmmoType"
				@@^Value		= "BulletsTypePE"
				@@&Name			= "AmmoValue"
				@@^Value		= "LockboxBulletsValuePE"

					[LockboxBulletsValuePE]
					PEType		= "StatMod"
					EntityPE	= "FrobberPE"
					StatName	= "LootAmount"
					Input		= "LockboxBulletsBasePE"

						[LockboxBulletsBasePE]
						PEType	= "EldHardSwitch"
						Normal	= "LockboxBulletsBaseNormalPE"
						Hard	= "LockboxBulletsBaseHardPE"

							[LockboxBulletsBaseNormalPE]
							PEType	= "RandomInt"
							ValueA	= 3
							ValueB	= 5

							[LockboxBulletsBaseHardPE]
							PEType	= "RandomInt"
							ValueA	= 2
							ValueB	= 4

				[LockboxGiveMoneyAction]
				ActionType		= "SendEvent"
				EventName		= "AddMoney"
				Recipient		= "FrobberPE"
				QueueEvent		= true
				NumParameters	= &
				@ Parameter
				@@&Name			= "Money"
				@@^Value		= "LockboxMoneyPE"
				@@&Name			= "ShowPickupScreen"
				@@^Value		= "TruePE"

					[LockboxMoneyPE]
					PEType		= "StatMod"
					EntityPE	= "FrobberPE"
					StatName	= "LootAmount"
					Input		= "LockboxMoneyBasePE"
					
						[LockboxMoneyBasePE]
						PEType	= "EldHardSwitch"
						Normal	= "LockboxMoneyBaseNormalPE"
						Hard	= "LockboxMoneyBaseHardPE"

							[LockboxMoneyBaseNormalPE]
							PEType	= "RandomInt"
							ValueA	= 5
							ValueB	= 15

							[LockboxMoneyBaseHardPE]
							PEType	= "RandomInt"
							ValueA	= 5
							ValueB	= 10
			
			[LockboxQueueDestroySelf]
			ActionType		= "SendEvent"
			EventName		= "Destroy"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 3.0

		[LockboxOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayDoorLockedSFX"	# TODO: new sound?
# Rm

# ****************************************************************
# ************************** Artifacts ***************************
# ****************************************************************

[Artifact]
#ShouldDebugRender	= true
EldTransform	= "ArtifactTransform"
EldCollision	= "ArtifactCollision"
EldMesh			= "ArtifactMesh"
EldFrobbable	= "ArtifactFrobbable"
EldDropShadow	= "ArtifactDropShadow"
Reactions		= "ArtifactReactions"
PEMap			= "ArtifactPEMap"

	[ArtifactTransform]
	UseGravity		= true

	[ArtifactCollision]
	HalfExtentsXY	= 0.25
	HalfExtentsZ	= 0.032

	[ArtifactMesh]
	Mesh			= "Meshes/artifact.cms"

	[ArtifactFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Artifact"
	FrobVerb		= "PickUp"
	HoldVerb		= "Smelt"		# Rm

	[ArtifactDropShadow]
	UseMeshCenter		= true
	Radius				= 0.25
	VoxelCheckOffsetZ	= 0.0
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[ArtifactPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "Money"
	@@^Def	= "IntOnePE"
	# Rm
	@@&Key	= "Ammo"
	@@^Def	= "IntOnePE"
	# Rm

	[ArtifactReactions]
	NumReactions	= &
	@ Reaction
	@@& = "ArtifactOnFrobbedReaction"
	@@&	= "ArtifactOnBecameFrobTargetReaction"	# Rm
	@@&	= "ArtifactOnFrobbedHeldReaction"		# Rm

		# Rm
		[ArtifactOnFrobbedHeldReaction]
		Rule		= "OnFrobbedHeldRule"
		NumActions	= &
		@ Action
		@@&			= "ArtifactSmeltGiveAmmo"
		@@&			= "PlayArtifactSFX"			# TODO: replace with ammo SFX if I do that
		@@&			= "DestroySelfAction"
		
			[ArtifactSmeltGiveAmmo]
			ActionType		= "SendEvent"
			EventName		= "AddAmmo"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"
			@@&Name			= "AmmoValue"
			@@^Value		= "ArtifactAmmoPE"	# Don't necessarily convert 1:1!

				[ArtifactAmmoPE]
				PEType	= "Lookup"
				Key		= "Ammo"
		
		[ArtifactOnBecameFrobTargetReaction]
		Rule		= "OnBecameFrobTargetRule"
		NumActions	= &
		@ Action
		@@&			= "SetArtifactHoldReleaseMode"
		@@&			= "SetArtifactHoldVerbDisabledStatus"

			[SetArtifactHoldReleaseMode]
			ActionType		= "SendEvent"
			EventName		= "SetHoldReleaseMode"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "HoldReleaseMode"
			@@^Value		= "CanFrobberSmeltPE"
			
				[CanFrobberSmeltPE]
				PEType		= "StatMod"
				EntityPE	= "FrobberPE"
				StatName	= "CanSmelt"
				Input		= "FloatZeroPE"

			[SetArtifactHoldVerbDisabledStatus]
			ActionType		= "SendEvent"
			EventName		= "SetWidgetDisabled"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Screen"
			@@^Value		= "HUDScreenPE"
			@@&Name			= "Widget"
			@@^Value		= "FrobHoldPE"
			@@&Name			= "Disabled"
			@@^Value		= "FalsePE"
		# Rm

		[ArtifactOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowArtifactBook"
		@@&			= "ArtifactOnFrobbedGiveMoney"
		@@&			= "PlayArtifactSFX"
		@@&			= "DestroySelfAction"

			[ConditionalShowArtifactBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadArtifactBook"
			@@^Action		= "TeachArtifactBook"

				[HasNotReadArtifactBook]
				PEType	= "NOT"
				Input	= "HasReadArtifactBook"

					[HasReadArtifactBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadArtifactBook"

				[TeachArtifactBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowArtifactBook"
				@@&			= "MarkArtifactBookRead"

					[ShowArtifactBook]
					ActionType	= "EldShowBook"
					BookString	= "Book_Artifact"

					[MarkArtifactBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadArtifactBook"
					ValuePE		= "TruePE"

			[ArtifactOnFrobbedGiveMoney]
			ActionType		= "SendEvent"
			EventName		= "AddMoney"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Money"
			@@^Value		= "ArtifactMoneyStatModPE"	# Rm

				# Rm
				[ArtifactMoneyStatModPE]
				PEType		= "StatMod"
				EntityPE	= "FrobberPE"
				StatName	= "ArtifactValue"
				Input		= "ArtifactMoneyPE"				
				# Rm

					[ArtifactMoneyPE]
					PEType	= "Lookup"
					Key		= "Money"

			[PlayArtifactSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "ArtifactSFXPE"

				[ArtifactSFXPE]
				PEType	= "ConstantString"
				Value	= "ArtifactSound"

[Artifact5]
Extends			= "Artifact"
EldMesh			= "Artifact5Mesh"
EldFrobbable	= "Artifact5Frobbable"
EldDropShadow	= "Artifact5DropShadow"
PEMap			= "Artifact5PEMap"

	[Artifact5Mesh]
	Mesh			= "Meshes/artifacts-5.cms"

	[Artifact5Frobbable]
	Extends			= "ArtifactFrobbable"
	FriendlyName	= "Artifact5"

	[Artifact5DropShadow]
	Extends	= "ArtifactDropShadow"
	Radius	= 0.5

	[Artifact5PEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "Money"
	@@^Def	= "Artifact5MoneyPE"
	# Rm
	@@&Key	= "Ammo"
	@@^Def	= "Artifact5AmmoPE"
	# Rm
	
		[Artifact5MoneyPE]
		PEType	= "ConstantInt"
		Value	= 5

		# Rm
		[Artifact5AmmoPE]
		PEType	= "ConstantInt"
		Value	= 3
		# Rm

# ****************************************************************
# **************************** Bottle ****************************
# ****************************************************************

[WeaponBottle]
EldTransform	= "RightHandTransform"
EldUsable		= "ThrowableUsable"
EldMesh			= "WeaponBottleMesh"
EldItem			= "WeaponBottleItem"
EldWeapon		= "WeaponBottleWeapon"
Reactions		= "WeaponBottleReactions"
Owner			= "."

	[ThrowableUsable]
	RefireRate	= 10.0

	[WeaponBottleMesh]
	Mesh			= "Meshes/Hands/weapon-bottle.cms"
	DrawForeground	= true

	[WeaponBottleWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-bottle_NODXT.tga"

	[WeaponBottleItem]
	Slot				= "Weapon"
	DropSpawn			= "Bottle"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0
	DropSpawnOffsetZ	= 0.5

	[WeaponBottleReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"
	@@&				= "BottleOnThrownReaction"
	@@&				= "ThrowableOnThrowAnimFinishedReaction"

		[WeaponOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"
		@@&			= "ConditionalShowWeaponsBook"

		[WeaponOnUsedReaction]
		Rule		= "OnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayFireHandAnim"

			[OnUsedRule]
			Event	= "OnUsed"

		[BottleOnThrownReaction]
		Rule		= "OnThrownRule"
		NumActions	= &
		@ Action
		@@&			= "SpawnBottleAction"
		@@&			= "HideSelfAction"

			[OnThrownRule]
			Event	= "OnThrown"

			[SpawnBottleAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "Bottle"
			YawOnly			= true
			SpawnImpulse	= 15.0
			SpawnImpulseZ	= 0.3

			[HideSelfAction]
			ActionType	= "SendEvent"
			EventName	= "Hide"
			Recipient	= "SelfPE"

		[ThrowableOnThrowAnimFinishedReaction]
		Rule		= "ThrowableOnThrowAnimFinishedRule"
		NumActions	= &
		@ Action
		@@&			= "RemoveWeaponAction"

			[ThrowableOnThrowAnimFinishedRule]
			Event	= "OnThrowAnimFinished"

[BottleForSale]
Extends			= "Bottle"
EldFrobbable	= "BottleForSaleFrobbable"
EldPickup		= "BottleForSalePickup"
Reactions		= "BottleForSaleReactions"

	[BottleForSaleFrobbable]
	Extends		= "BottleFrobbable"
	FrobVerb	= "Examine"

	[BottleForSalePickup]
	Extends			= "BottlePickup"
	Price			= 2
	FriendlyName	= "Bottle"
	FriendlyDesc	= "BottleDesc"

	[BottleForSaleReactions]
	# NOTE: Keep in sync with BottleReactions/ThrowableReactions
	NumReactions = &
	@ Reaction
	@@& = "ThrowableOnSpawnedReaction"
	@@& = "ThrowableOnTouchedOwnerReaction"
	@@& = "BottleOnTouchedReaction"
	@@& = "BottleOnFastCollisionReaction"
	@@& = "ThrowableOnAnyCollisionReaction"
	@@& = "BottleForSaleOnDiedReaction"

		[BottleForSaleOnDiedReaction]
		Rule		= "OnDiedRule"
		NumActions	= &
		@ Action
		@@&			= "BreakBottleAction"
		@@&			= "BottleNotifyTheft"

			[BottleNotifyTheft]
			ActionType		= "SendEvent"
			EventName		= "OnTheft"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Thief"
			@@^Value		= "KillerPE"

[Bottle]
#ShouldDebugRender	= true
Extends			= "Rock"
EldCollision	= "BottleCollision"
EldMesh			= "BottleMesh"
EldHealth		= "BottleHealth"
EldDropShadow	= "BottleDropShadow"
EldFrobbable	= "BottleFrobbable"
EldPickup		= "BottlePickup"
Reactions		= "BottleReactions"

	[BottleCollision]
	HalfExtentsXY	= 0.09
	HalfExtentsZ	= 0.25
	Elasticity		= 0.5
	BlocksTrace		= true

	[BottleMesh]
	Mesh	= "Meshes/bottle.cms"

	[BottleHealth]
	Health	= 1

	[BottleDropShadow]
	Extends	= "RockDropShadow"
	Radius	= 0.2

	[BottleFrobbable]
	Extends			= "RockFrobbable"
	FriendlyName	= "Bottle"

	[BottlePickup]
	GiveItem = "WeaponBottle"

	[BottleReactions]
	# Very similar to ThrowableReactions, but also breaks when colliding.
	NumReactions = &
	@ Reaction
	@@& = "ThrowableOnSpawnedReaction"
	@@& = "ThrowableOnTouchedOwnerReaction"
	@@& = "BottleOnTouchedReaction"
	@@& = "BottleOnFastCollisionReaction"
	@@& = "ThrowableOnAnyCollisionReaction"
	@@& = "BottleOnDiedReaction"

		[BottleOnDiedReaction]
		Rule		= "OnDiedRule"
		NumActions	= &
		@ Action
		@@&			= "BreakBottleAction"

		[BottleOnFastCollisionReaction]
		Rule		= "BottleOnFastCollisionRule"
		NumActions	= &
		@ Action
		@@&			= "BreakBottleAction"

			[BreakBottleAction]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "BecomeNonFrobbable"
			@@&			= "ThrowablePlayAINoise"
			@@&			= "PlayBottleBreakSound"
			@@&			= "PlayBottleBreakFXAction"
			@@&			= "StopMotionAction"
			@@&			= "HideMeshAction"
			@@&			= "HideShadowAction"
			@@&			= "StopTouchingAction"
			@@&			= "BottleQueueDestroySelf"

			[PlayBottleBreakSound]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "BottleBreakSoundPE"

				[BottleBreakSoundPE]
				PEType		= "ConstantString"
				Value		= "BottleBreakSound"

			[PlayBottleBreakFXAction]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "GlassBreakFXPE"

				[GlassBreakFXPE]
				PEType		= "ConstantString"
				Value		= "PS_GlassBreak"

			[BottleOnFastCollisionRule]
			Event		= "OnAnyCollision"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "SpeedSq"
			@@^Min		= "ThrowableDamageSpeedSqPE"
			@@^Max		= "FloatBigNumberPE"

			[HideShadowAction]
			ActionType	= "SendEvent"
			EventName	= "HideShadow"
			Recipient	= "SelfPE"

			# Give the bottle break FX time to play
			[BottleQueueDestroySelf]
			ActionType		= "SendEvent"
			EventName		= "Destroy"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 3.0

		[BottleOnTouchedReaction]
		Rule		= "ThrowableOnTouchedRule"
		NumActions	= &
		@ Action
		@@&			= "ThrowableOnTouchedDealDamage"
		@@&			= "ThrowableOnTouchedApplyImpulse"
		@@&			= "BreakBottleAction"

# ****************************************************************
# *************************** Dynamite ***************************
# ****************************************************************

[WeaponDynamite]
EldTransform	= "RightHandTransform"
EldUsable		= "ThrowableUsable"
EldMesh			= "WeaponDynamiteMesh"
EldItem			= "WeaponDynamiteItem"
EldWeapon		= "WeaponDynamiteWeapon"
Reactions		= "WeaponDynamiteReactions"
Owner			= "."

	[WeaponDynamiteMesh]
	Mesh			= "Meshes/Hands/weapon-dynamite.cms"
	DrawForeground	= true

	[WeaponDynamiteWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-dynamite_NODXT.tga"

	[WeaponDynamiteItem]
	Slot				= "Weapon"
	DropSpawn			= "Dynamite"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0
	DropSpawnOffsetZ	= 0.5

	[WeaponDynamiteReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"
	@@&				= "DynamiteOnThrownReaction"
	@@&				= "ThrowableOnThrowAnimFinishedReaction"

		[DynamiteOnThrownReaction]
		Rule		= "OnThrownRule"
		NumActions	= &
		@ Action
		@@&			= "SpawnDynamiteAction"
		@@&			= "HideSelfAction"

			[SpawnDynamiteAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "LitDynamite"
			YawOnly			= true
			SpawnImpulse	= 10.0
			SpawnImpulseZ	= 0.2

# Just like normal dynamite, but lights on spawn
[LitDynamite]
Extends			= "Dynamite"
EldHealth		= "LitDynamiteHealth"
Reactions		= "LitDynamiteReactions"

	[LitDynamiteHealth]
	Health	= 1

	[LitDynamiteReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "LitDynamiteOnSpawnedReaction"
	# Keep in sync with DynamiteReactions
	@@&				= "DynamiteSphereCheckReaction"
	@@&				= "DynamiteExplodeReaction"
	@@&				= "DynamiteOnDamagedReaction"
	@@&				= "DynamiteOnDiedReaction"

		[LitDynamiteOnSpawnedReaction]
		Rule		= "OnSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "DynamiteStartFuse"

[DynamiteForSale]
Extends			= "Dynamite"
EldFrobbable	= "DynamiteForSaleFrobbable"
EldPickup		= "DynamiteForSalePickup"
Reactions		= "DynamiteForSaleReactions"

	[DynamiteForSaleFrobbable]
	Extends		= "DynamiteFrobbable"
	FrobVerb	= "Examine"

	[DynamiteForSalePickup]
	Extends			= "DynamitePickup"
	Price			= 15
	FriendlyName	= "Dynamite"
	FriendlyDesc	= "DynamiteDesc"

	[DynamiteForSaleReactions]
	# NOTE: Keep in sync with DynamiteReactions/LitDynamiteReactions
	NumReactions = &
	@ Reaction
	@@&				= "DynamiteSphereCheckReaction"
	@@&				= "DynamiteExplodeReaction"
	@@&				= "DynamiteForSaleOnDamagedReaction"
	@@&				= "DynamiteOnDiedReaction"

		[DynamiteForSaleOnDamagedReaction]
		Rule		= "OnDamagedAndUnlitRule"
		NumActions	= &
		@ Action
		@@&			= "DynamiteOnDamagedSetOwner"
		@@&			= "DynamiteStartFuse"
		@@&			= "DynamiteNotifyTheft"

			[DynamiteNotifyTheft]
			ActionType		= "SendEvent"
			EventName		= "OnTheft"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Thief"
			@@^Value		= "DamagerPE"

# Dynamite is a throwable item but not one that damages things on contact,
# so it doesn't inherit from Rock or reuse throwable actions.
[Dynamite]
EldTransform	= "DynamiteTransform"
EldCollision	= "DynamiteCollision"
EldMesh			= "DynamiteMesh"
EldHealth		= "DynamiteHealth"
EldDropShadow	= "DynamiteDropShadow"
EldFrobbable	= "DynamiteFrobbable"
EldPickup		= "DynamitePickup"
EldSound		= "."
EldParticles	= "."
State			= "DynamiteState"
Owner			= "."
Reactions		= "DynamiteReactions"

	[DynamiteTransform]
	Gravity = 20.0

	[DynamiteCollision]
	HalfExtentsXY	= 0.125
	HalfExtentsZ	= 0.25
	Elasticity		= 0.25
	BlocksTrace		= true

	[DynamiteMesh]
	Mesh	= "Meshes/dynamite.cms"

	[DynamiteHealth]
	Health				= 2
	NumDamageTypeMods	= &
	@ DamageTypeMod
	# HACK: Make dagger and hatchet always only do 1HP to dynamite
	@@&Type				= "Slashing"
	@@^Mul				= 0.0
	@@^Add				= 1.0
	@@&Type				= "Hacking"
	@@^Mul				= 0.0
	@@^Add				= 1.0

	[DynamiteDropShadow]
	UseMeshCenter	= true
	Radius			= 0.25
	Alpha			= 0.5
	ShadowFloatZ	= 0.01

	[DynamiteFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Dynamite"
	FrobVerb		= "PickUp"

	[DynamitePickup]
	GiveItem	= "WeaponDynamite"

	[DynamiteState]
	InitialState	= "Unlit"

	# Keep in sync with LitDynamiteReactions
	[DynamiteReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "DynamiteSphereCheckReaction"
	@@&				= "DynamiteExplodeReaction"
	@@&				= "DynamiteOnDamagedReaction"
	@@&				= "DynamiteOnDiedReaction"

		[DynamiteSphereCheckReaction]
		Rule		= "ExplodeSphereCheckRule"
		NumActions	= &
		@ Action
		@@&			= "DynamiteDealDamage"
		@@&			= "DynamiteApplyImpulse"

			[ExplodeSphereCheckRule]
			Event		= "OnSphereCheck"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "CheckTag"
			@@^Min		= "ExplodeTagPE"

				[ExplodeTagPE]
				PEType	= "ConstantString"
				Value	= "Explode"

			[DynamiteDealDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "DynamiteDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "OwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "ExplosiveDamageTypePE"

				[DynamiteDamagePE]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DamageAmount"
				Input		= "DynamiteDamageBasePE"

					[DynamiteDamageBasePE]
					PEType	= "ConstantInt"
					Value	= 2

				[ExplosiveDamageTypePE]
				PEType	= "ConstantString"
				Value	= "Explosive"

			[DynamiteApplyImpulse]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "DynamiteImpulsePE"

				[DynamiteImpulsePE]
				PEType	= "Mul"
				InputA	= "DynamiteImpulseNormalPE"
				InputB	= "DynamiteImpulseScalar"

					[DynamiteImpulseNormalPE]
					PEType	= "Normal"
					Input	= "DynamiteImpulseOffsetPE"

						[DynamiteImpulseOffsetPE]
						PEType	= "Sub"
						InputA	= "CheckedLocationPE"
						InputB	= "LocationPE"

					[DynamiteImpulseScalar]
					PEType	= "ConstantFloat"
					Value	= 20.0

		[DynamiteExplodeReaction]
		Rule		= "OnExplodeAndNotExplodedRule"
		NumActions	= &
		@ Action
		@@&			= "SetExplodedState"
		@@&			= "StopMotionAction"
		@@&			= "HideMeshAction"
		@@&			= "HideShadowAction"
		@@&			= "StopTouchingAction"
		# NOTE: Damage entities before world, which means
		# walls which get destroyed can still shield damage.
		@@&			= "DynamiteSphereCheck"
		@@&			= "DynamiteDamageWorld"
		@@&			= "PlayDynamiteAINoise"
		@@&			= "StopDynamiteFuseVFX"
		@@&			= "StopDynamiteFuseSFX"
		@@&			= "PlayDynamiteShrapnelVFX"
		@@&			= "PlayDynamiteSmokeVFX"
		@@&			= "PlayDynamiteExplosionSFX"
		@@&			= "DynamiteQueueDestroySelf"

			[OnExplodeAndNotExplodedRule]
			Event			= "Explode"
			NumConditions	= &
			@ Condition
			@@&				= "IsNotExplodedPE"

				[IsNotExplodedPE]
				PEType	= "Conditional"
				Op		= "NE"
				InputA	= "StatePE"
				InputB	= "ExplodedPE"

					[ExplodedPE]
					PEType	= "ConstantString"
					Value	= "Exploded"

			[SetExplodedState]
			ActionType		= "SendEvent"
			EventName		= "SetState"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewState"
			@@^Value		= "ExplodedPE"

			[DynamiteSphereCheck]
			ActionType	= "EldCheckSphere"
			Radius		= 3.0
			CheckTag	= "Explode"

			[DynamiteDamageWorld]
			ActionType	= "EldDamageWorld"
			Radius		= 2.5

			[PlayDynamiteAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "DynamiteNoiseRadiusPE"

				[DynamiteNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 20.0

			[StopDynamiteFuseVFX]
			ActionType		= "SendEvent"
			EventName		= "StopParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "DynamiteFuseVFXPE"

			# NOTE: Actually, stop *all* SFX, since that's
			# the granularity I have. :\
			[StopDynamiteFuseSFX]
			ActionType		= "SendEvent"
			EventName		= "StopSound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Category"
			@@^Value		= "SFXPE"

				[SFXPE]
				PEType	= "ConstantString"
				Value	= "SFX"

			[PlayDynamiteShrapnelVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "DynamiteShrapnelVFXPE"

				[DynamiteShrapnelVFXPE]
				PEType		= "ConstantString"
				Value		= "PS_Shrapnel"

			[PlayDynamiteSmokeVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "DynamiteSmokeVFXPE"

				[DynamiteSmokeVFXPE]
				PEType		= "ConstantString"
				Value		= "PS_BigDarkSmoke"

			[PlayDynamiteExplosionSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "DynamiteExplosionSFXPE"

				[DynamiteExplosionSFXPE]
				PEType	= "ConstantString"
				Value	= "DynamiteExplosionSound"

			# Give the FX time to play
			[DynamiteQueueDestroySelf]
			ActionType		= "SendEvent"
			EventName		= "Destroy"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 4.0

		[DynamiteOnDamagedReaction]
		Rule		= "OnDamagedAndUnlitRule"
		NumActions	= &
		@ Action
		@@&			= "DynamiteOnDamagedSetOwner"
		@@&			= "DynamiteStartFuse"

			[OnDamagedAndUnlitRule]
			Event		= "OnDamaged"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "State"
			@@^Min		= "UnlitPE"

				[UnlitPE]
				PEType	= "ConstantString"
				Value	= "Unlit"

			[DynamiteOnDamagedSetOwner]
			ActionType		= "SendEvent"
			EventName		= "SetOwner"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewOwner"
			@@^Value		= "DamagerPE"

			[DynamiteStartFuse]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "BecomeNonFrobbable"
			@@&			= "SetLitState"
			@@&			= "QueueExplodeEvent"
			@@&			= "PlayDynamiteFuseVFX"
			@@&			= "PlayDynamiteFuseSFX"

				[SetLitState]
				ActionType		= "SendEvent"
				EventName		= "SetState"
				Recipient		= "SelfPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "NewState"
				@@^Value		= "LitPE"

					[LitPE]
					PEType	= "ConstantString"
					Value	= "Lit"

			[QueueExplodeEvent]
			ActionType		= "SendEvent"
			EventName		= "Explode"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 2.5	# Fuse length

			[PlayDynamiteFuseVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "DynamiteFuseVFXPE"
			@@&Name			= "Attached"
			@@^Value		= "TruePE"

				[DynamiteFuseVFXPE]
				PEType		= "ConstantString"
				Value		= "PS_FuseSparks"

			[PlayDynamiteFuseSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "DynamiteFuseSFXPE"
			@@&Name			= "Attached"
			@@^Value		= "TruePE"

				[DynamiteFuseSFXPE]
				PEType	= "ConstantString"
				Value	= "DynamiteFuseSound"

		[DynamiteOnDiedReaction]
		Rule		= "OnDiedAndNotExplodedRule"
		NumActions	= &
		@ Action
		@@&			= "DynamiteOnDiedSetOwner" # 9 Feb 2019: Added to fix rare assert when an enemy explodes dynamite on another enemy
		@@&			= "ExplodeAction"

			[OnDiedAndNotExplodedRule]
			Event			= "OnDied"
			NumConditions	= &
			@ Condition
			@@&				= "IsNotExplodedPE"

			[DynamiteOnDiedSetOwner]
			ActionType		= "SendEvent"
			EventName		= "SetOwner"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewOwner"
			@@^Value		= "KillerPE"

			[ExplodeAction]
			ActionType	= "SendEvent"
			EventName	= "Explode"
			Recipient	= "SelfPE"

# ****************************************************************
# ************************ Rock/throwables ***********************
# ****************************************************************

[Rock]
#ShouldDebugRender = true
EldTransform	= "RockTransform"
EldCollision	= "RockCollision"
EldMesh			= "RockMesh"
EldSound		= "."
EldParticles	= "."
EldFrobbable	= "RockFrobbable"
EldDropShadow	= "RockDropShadow"
EldPickup		= "RockPickup"
State			= "RockState"
PEMap			= "RockPEMap"
Reactions		= "ThrowableReactions"
Owner			= "."

	[RockTransform]
	Gravity = 20.0

	[RockCollision]
	HalfExtentsXY	= 0.15
	HalfExtentsZ	= 0.125
	Elasticity		= 0.5

	[RockMesh]
	Mesh	= "Meshes/pickup-rock.cms"
	OffsetZ	= -0.05
	
	[RockFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Rock"
	FrobVerb		= "PickUp"

	[RockDropShadow]
	UseMeshCenter = true
	Radius = 0.15
	VoxelCheckOffsetZ = 0.0
	Alpha = 0.5
	ShadowFloatZ = 0.01

	[RockPickup]
	GiveItem = "WeaponRock"

	[RockState]
	InitialState = "GracePeriod"
	
	[RockPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "RockNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "RockCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "RockCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "RockDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "RockDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "RockImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "RockReflectPE"
	
		[RockNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 10.0

		[RockCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"

		[RockCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"

			[RockQuarterSpeedPE]
			PEType	= "Mul"
			InputA	= "RockSpeedPE"
			InputB	= "FloatQuarterPE"

				[FloatQuarterPE]
				PEType	= "ConstantFloat"
				Value	= 0.25

				[RockSpeedPE]
				PEType	= "Pow"
				InputA	= "SpeedSqPE"
				InputB	= "FloatHalfPE"

		[RockDamageSpeedSqPE]
		PEType = "Square"
		Input = "RockDamageSpeedPE"

			[RockDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[RockDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "RockDamageBasePE"

			[RockDamageBasePE]
			PEType	= "EldHardSwitch"
			Normal	= "RockDamageBaseNormalPE"
			Hard	= "RockDamageBaseHardPE"

				# Rock should be able to kill weak enemies in one hit
				[RockDamageBaseNormalPE]
				PEType	= "ConstantInt"
				Value	= 3

				[RockDamageBaseHardPE]
				PEType	= "ConstantInt"
				Value	= 2

		# TODO: Done properly, the impulse is a factor of the mass of each object.
		[RockImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RockImpulseScalar"

			[RockImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		# TODO: This should really reflect off the collided object instead of just negating the current velocity.
		[RockReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RockReflectScalar"

			[RockReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

	[ThrowableReactions]
	NumReactions = &
	@ Reaction
	@@& = "ThrowableOnSpawnedReaction"
	@@& = "ThrowableOnTouchedOwnerReaction"
	@@& = "ThrowableOnTouchedReaction"
	@@& = "ThrowableOnAnyCollisionReaction"

		[ThrowableOnAnyCollisionReaction]
		Rule = "OnAnyCollisionWithSufficientSpeedSqRule"
		NumActions = &
		@ Action
		@@& = "ThrowablePlayAINoise"
		@@& = "ThrowablePlayCollidedSound"
		@@& = "PlayDustFXAction"
		
			[OnAnyCollisionWithSufficientSpeedSqRule]
			Event		= "OnAnyCollision"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "SpeedSq"
			@@^Min		= "ThrowableSufficientSpeedSqPE"
			@@^Max		= "FloatBigNumberPE"

				[ThrowableSufficientSpeedSqPE]
				PEType	= "ConstantFloat"
				Value	= 1.0

			[ThrowablePlayAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			# Use the owner as the source entity; this makes the sound continue to
			# be relevant if the throwable is destroyed (as with bottles) and lets
			# the owner distract AIs by throwing things (stomping actual last known
			# locations).
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "ThrowableNoiseRadiusPE"

				[ThrowableNoiseRadiusPE]
				PEType	= "Lookup"
				Key		= "NoiseRadius"

			[ThrowablePlayCollidedSound]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "ThrowableCollidedSoundPE"
			@@&Name			= "Volume"
			@@^Value		= "ThrowableCollidedVolumePE"

				[ThrowableCollidedSoundPE]
				PEType	= "Lookup"
				Key		= "Sound"

				[ThrowableCollidedVolumePE]
				PEType	= "Lookup"
				Key		= "Volume"

			[PlayDustFXAction]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "DustFXPE"

				[DustFXPE]
				PEType		= "ConstantString"
				Value		= "PS_Dust"

		# Set a timer for owner grace period before this can damage them
		[ThrowableOnSpawnedReaction]
		Rule		= "OnSpawnedRule"
		NumActions	= &
		@ Action
		@@&			= "ThrowableOnSpawnedSetTimerAction"

			[OnSpawnedRule]
			Event = "OnSpawned"

			[ThrowableOnSpawnedSetTimerAction]
			ActionType		= "SendEvent"
			QueueEvent		= true
			DispatchDelay	= 0.25				# NOTE: Grace period time!
			EventName		= "SetState"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewState"
			@@^Value		= "GracePeriodElapsedPE"

				[GracePeriodElapsedPE]
				PEType	= "ConstantString"
				Value	= "GracePeriodElapsed"
	
		# Dummy reaction so that owners don't get damaged by their own projectiles
		[ThrowableOnTouchedOwnerReaction]
		Rule	= "ThrowableOnTouchedOwnerRule"

			[ThrowableOnTouchedOwnerRule]
			Event		= "OnTouched"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "Touched"
			@@^Min		= "OwnerPE"
			@@&Name		= "State"
			@@^Min		= "GracePeriodPE"

				[GracePeriodPE]
				PEType	= "ConstantString"
				Value	= "GracePeriod"

		[ThrowableOnTouchedReaction]
		Rule = "ThrowableOnTouchedRule"
		NumActions = &
		@ Action
		@@& = "ThrowableOnTouchedDealDamage"
		@@& = "ThrowableOnTouchedApplyImpulse"
		@@& = "ThrowableOnTouchedReflect"
		@@& = "ThrowablePlayAINoise"
		@@& = "ThrowablePlayCollidedSound"
		@@& = "PlayDustFXAction"

			# TODO: I actually want to compare relative speed,
			# which probably means some new code.
			[ThrowableOnTouchedRule]
			Event = "OnTouched"
			NumCriteria = &
			@ Criterion
			@@&Name = "SpeedSq"
			@@^Min = "ThrowableDamageSpeedSqPE"
			@@^Max = "FloatBigNumberPE"

				[ThrowableDamageSpeedSqPE]
				PEType	= "Lookup"
				Key		= "SpeedSq"

			[ThrowableOnTouchedDealDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "TouchedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "ThrowableDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "OwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "ThrownDamageTypePE"

				[ThrowableDamagePE]
				PEType	= "Lookup"
				Key		= "Damage"

				[ThrownDamageTypePE]
				PEType	= "ConstantString"
				Value	= "Thrown"

			[ThrowableOnTouchedApplyImpulse]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "TouchedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "ThrowableImpulsePE"

				[ThrowableImpulsePE]
				PEType	= "Lookup"
				Key		= "Impulse"

			[ThrowableOnTouchedReflect]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "ThrowableReflectPE"

				[ThrowableReflectPE]
				PEType	= "Lookup"
				Key		= "Reflect"

[WeaponRock]
EldTransform	= "RightHandTransform"
EldUsable		= "ThrowableUsable"
EldMesh			= "WeaponRockMesh"
EldItem			= "WeaponRockItem"
EldWeapon		= "WeaponRockWeapon"
Reactions		= "WeaponRockReactions"
Owner			= "."

	[WeaponRockMesh]
	Mesh = "Meshes/Hands/weapon-rock.cms"
	DrawForeground = true

	[WeaponRockWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-rock_NODXT.tga"

	[WeaponRockItem]
	Slot				= "Weapon"
	DropSpawn			= "Rock"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5

	[WeaponRockReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"
	@@&				= "RockOnThrownReaction"
	@@&				= "ThrowableOnThrowAnimFinishedReaction"

		[RockOnThrownReaction]
		Rule = "OnThrownRule"
		NumActions = &
		@ Action
		@@& = "RockOnThrownSpawnRock"
		@@& = "HideSelfAction"

			[RockOnThrownSpawnRock]
			ActionType		= "EldSpawnEntity"
			Entity			= "Rock"
			YawOnly			= true
			SpawnImpulse	= 15.0
			SpawnImpulseZ	= 0.3	# Added to impulse direction before renormalizing

# ****************************************************************
# **************************** Fists *****************************
# ****************************************************************

[Fists]
EldTransform	= "RightHandTransform"
EldUsable		= "FistsUsable"
EldMesh			= "FistsMesh"
EldItem			= "FistsItem"
Reactions		= "FistsReactions"
Owner			= "."

	[FistsUsable]
	RefireRate	= 2.0	# Actually animation-limited

	[FistsMesh]
	Mesh			= "Meshes/Hands/weapon-fists.cms"
	DrawForeground	= true

	[FistsItem]
	Slot	= "Fists"

	[FistsReactions]
	NumReactions = &
	@ Reaction
	@@& = "FistsOnEquippedReaction"
	@@& = "FistsOnUsedReaction"

		[FistsOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"

		[FistsOnUsedReaction]
		Rule		= "OnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayFireHandAnim"

# ****************************************************************
# **************************** Dagger ****************************
# ****************************************************************

[DaggerPickupForSale]
Extends			= "DaggerPickup"
EldFrobbable	= "DaggerPickupForSaleFrobbable"
EldPickup		= "DaggerPickupForSalePickup"

	[DaggerPickupForSaleFrobbable]
	Extends		= "DaggerPickupFrobbable"
	FrobVerb	= "Examine"

	[DaggerPickupForSalePickup]
	Extends			= "DaggerPickupPickup"
	Price			= 5
	FriendlyName	= "Dagger"
	FriendlyDesc	= "DaggerDesc"
	
[DaggerPickup]
EldTransform	= "DaggerPickupTransform"
EldCollision	= "DaggerPickupCollision"
EldFrobbable	= "DaggerPickupFrobbable"
EldMesh			= "DaggerPickupMesh"
EldDropShadow	= "DaggerPickupDropShadow"
EldPickup		= "DaggerPickupPickup"
EldParticles	= "."
EldSound		= "."
PEMap			= "DaggerPickupPEMap"
Owner			= "."
Reactions		= "ThrowableReactions"

	[DaggerPickupTransform]
	UseGravity = true

	[DaggerPickupCollision]
	HalfExtentsX	= 0.1875
	HalfExtentsY	= 0.0625
	HalfExtentsZ	= 0.02
	Elasticity		= 0.5

	[DaggerPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Dagger"
	FrobVerb		= "PickUp"

	[DaggerPickupMesh]
	Mesh	= "Meshes/pickup-dagger.cms"
	OffsetZ	= 0.02

	[DaggerPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.15
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[DaggerPickupPickup]
	GiveItem = "Dagger"

	[DaggerPickupPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "DaggerPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "DaggerPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "DaggerPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "DaggerPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "DaggerPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "DaggerPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "DaggerPickupReflectPE"

		[DaggerPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 2.0

		[DaggerPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO
		
		[DaggerPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO

		[DaggerPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "DaggerPickupDamageSpeedPE"

			[DaggerPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[DaggerPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "DaggerPickupDamageBasePE"

			[DaggerPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[DaggerPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "DaggerPickupImpulseScalar"

			[DaggerPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[DaggerPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "DaggerPickupReflectScalar"

			[DaggerPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Dagger]
EldTransform	= "RightHandTransform"
EldUsable		= "DaggerUsable"
EldMesh			= "DaggerMesh"
EldItem			= "DaggerItem"
EldWeapon		= "DaggerWeapon"
Reactions		= "DaggerReactions"
Owner			= "."

	[DaggerUsable]
	RefireRate	= 2.0	# Actually animation-limited

	[DaggerMesh]
	Mesh			= "Meshes/Hands/weapon-dagger.cms"
	DrawForeground	= true

	[DaggerWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-dagger_NODXT.tga"

	[DaggerItem]
	Slot				= "Weapon"
	DropSpawn			= "DaggerPickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[DaggerReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"

# ****************************************************************
# *************************** Hatchet ****************************
# ****************************************************************

[HatchetPickupForSale]
Extends			= "HatchetPickup"
EldFrobbable	= "HatchetPickupForSaleFrobbable"
EldPickup		= "HatchetPickupForSalePickup"

	[HatchetPickupForSaleFrobbable]
	Extends		= "HatchetPickupFrobbable"
	FrobVerb	= "Examine"

	[HatchetPickupForSalePickup]
	Extends			= "HatchetPickupPickup"
	Price			= 10
	FriendlyName	= "Hatchet"
	FriendlyDesc	= "HatchetDesc"
	
[HatchetPickup]
EldTransform	= "HatchetPickupTransform"
EldCollision	= "HatchetPickupCollision"
EldFrobbable	= "HatchetPickupFrobbable"
EldMesh			= "HatchetPickupMesh"
EldDropShadow	= "HatchetPickupDropShadow"
EldPickup		= "HatchetPickupPickup"
EldParticles	= "."
EldSound		= "."
PEMap			= "HatchetPickupPEMap"
Owner			= "."
Reactions		= "ThrowableReactions"

	[HatchetPickupTransform]
	UseGravity = true

	[HatchetPickupCollision]
	HalfExtentsX	= 0.3
	HalfExtentsY	= 0.075
	HalfExtentsZ	= 0.025
	Elasticity		= 0.5

	[HatchetPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Hatchet"
	FrobVerb		= "PickUp"

	[HatchetPickupMesh]
	Mesh	= "Meshes/hatchet.cms"
	OffsetZ	= 0.015

	[HatchetPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.15
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[HatchetPickupPickup]
	GiveItem = "Hatchet"

	[HatchetPickupPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "HatchetPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "HatchetPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "HatchetPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "HatchetPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "HatchetPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "HatchetPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "HatchetPickupReflectPE"

		[HatchetPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 2.0

		[HatchetPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO
		
		[HatchetPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO

		[HatchetPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "HatchetPickupDamageSpeedPE"

			[HatchetPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[HatchetPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "HatchetPickupDamageBasePE"

			[HatchetPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[HatchetPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "HatchetPickupImpulseScalar"

			[HatchetPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[HatchetPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "HatchetPickupReflectScalar"

			[HatchetPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Hatchet]
EldTransform	= "RightHandTransform"
EldUsable		= "HatchetUsable"
EldMesh			= "HatchetMesh"
EldItem			= "HatchetItem"
EldWeapon		= "HatchetWeapon"
Reactions		= "HatchetReactions"
Owner			= "."

	[HatchetUsable]
	RefireRate	= 2.0	# Actually animation-limited

	[HatchetMesh]
	Mesh			= "Meshes/Hands/weapon-hatchet.cms"
	DrawForeground	= true

	[HatchetWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-hatchet_NODXT.tga"

	[HatchetItem]
	Slot				= "Weapon"
	DropSpawn			= "HatchetPickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[HatchetReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"

# ****************************************************************
# *************************** Pickaxe ****************************
# ****************************************************************

[PickaxePickupForSale]
Extends			= "PickaxePickup"
EldFrobbable	= "PickaxePickupForSaleFrobbable"
EldPickup		= "PickaxePickupForSalePickup"

	[PickaxePickupForSaleFrobbable]
	Extends		= "PickaxePickupFrobbable"
	FrobVerb	= "Examine"

	[PickaxePickupForSalePickup]
	Extends			= "PickaxePickupPickup"
	Price			= 30
	FriendlyName	= "Pickaxe"
	FriendlyDesc	= "PickaxeDesc"

[PickaxePickup_Broken]
Extends			= "PickaxePickup"
EldFrobbable	= ""
EldMesh			= "PickaxePickup_BrokenMesh"
EldPickup		= ""
Owner			= ""

	[PickaxePickup_BrokenMesh]
	Extends	= "PickaxePickupMesh"
	Mesh	= "Meshes/pickup-pickaxe-broken.cms"

[PickaxePickup]
EldTransform	= "PickaxePickupTransform"
EldCollision	= "PickaxePickupCollision"
EldFrobbable	= "PickaxePickupFrobbable"
EldMesh			= "PickaxePickupMesh"
EldDropShadow	= "PickaxePickupDropShadow"
EldPickup		= "PickaxePickupPickup"
EldParticles	= "."
EldSound		= "."
PEMap			= "PickaxePickupPEMap"
Owner			= "."
Reactions		= "ThrowableReactions"

	[PickaxePickupTransform]
	UseGravity = true

	[PickaxePickupCollision]
	HalfExtentsX	= 0.25
	HalfExtentsY	= 0.25
	HalfExtentsZ	= 0.025
	Elasticity		= 0.5

	[PickaxePickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Pickaxe"
	FrobVerb		= "PickUp"

	[PickaxePickupMesh]
	Mesh	= "Meshes/pickup-pickaxe.cms"
	OffsetZ	= 0.015

	[PickaxePickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.2
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[PickaxePickupPickup]
	GiveItem = "Pickaxe"

	[PickaxePickupPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "PickaxePickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "PickaxePickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "PickaxePickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "PickaxePickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "PickaxePickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "PickaxePickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "PickaxePickupReflectPE"

		[PickaxePickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 2.0

		[PickaxePickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO
		
		[PickaxePickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO

		[PickaxePickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "PickaxePickupDamageSpeedPE"

			[PickaxePickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[PickaxePickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "PickaxePickupDamageBasePE"

			[PickaxePickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[PickaxePickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "PickaxePickupImpulseScalar"

			[PickaxePickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[PickaxePickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "PickaxePickupReflectScalar"

			[PickaxePickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Pickaxe]
EldTransform	= "RightHandTransform"
EldUsable		= "PickaxeUsable"
EldMesh			= "PickaxeMesh"
EldItem			= "PickaxeItem"
EldWeapon		= "PickaxeWeapon"
Reactions		= "PickaxeReactions"
Owner			= "."

	[PickaxeUsable]
	RefireRate	= 2.0	# Actually animation-limited

	[PickaxeMesh]
	Mesh			= "Meshes/Hands/weapon-pickaxe.cms"
	DrawForeground	= true

	[PickaxeWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-pickaxe_NODXT.tga"

	[PickaxeItem]
	Slot				= "Weapon"
	DropSpawn			= "PickaxePickup"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0

	[PickaxeReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "WeaponOnEquippedReaction"
	@@&				= "WeaponOnUsedReaction"
	@@&				= "PickaxeUsedReaction"

		[PickaxeUsedReaction]
		Rule		= "PickaxeUsedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalRemovePickaxe"

			[PickaxeUsedRule]
			Event	= "PickaxeUsed"

			[ConditionalRemovePickaxe]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "ShouldRemovePickaxePE"
			@@^Action		= "RemovePickaxeAction"

				# Constant 1/30 chance to break. Because weapons are destroyed
				# and respawned when dropped and picked up, I don't have a good
				# place to maintain a usage count like I wanted to do.
				[ShouldRemovePickaxePE]
				PEType		= "RandomBool"
				Probability	= 0.0333

				[RemovePickaxeAction]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				# TODO: Some VFX and SFX for weapon breaking (on broken pickaxe entity)
				@@&			= "RemoveWeaponAction"
				@@&			= "SpawnBrokenPickaxe"

					[SpawnBrokenPickaxe]
					ActionType		= "EldSpawnEntity"
					Entity			= "PickaxePickup_Broken"
					YawOnly			= true
					SpawnImpulse	= 3.0
					SpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing

# ****************************************************************
# *************************** Revolver ***************************
# ****************************************************************

[RevolverPickupForSale]
Extends			= "RevolverPickup"
EldFrobbable	= "RevolverPickupForSaleFrobbable"
EldPickup		= "RevolverPickupForSalePickup"

	[RevolverPickupForSaleFrobbable]
	Extends		= "RevolverPickupFrobbable"
	FrobVerb	= "Examine"

	[RevolverPickupForSalePickup]
	Extends			= "RevolverPickupPickup"
	Price			= 10
	FriendlyName	= "Revolver"
	FriendlyDesc	= "RevolverDesc"
	
[RevolverPickup]
#ShouldDebugRender = true
EldTransform	= "RevolverPickupTransform"
EldCollision	= "RevolverPickupCollision"
EldFrobbable	= "RevolverPickupFrobbable"
EldMesh			= "RevolverPickupMesh"
EldDropShadow	= "RevolverPickupDropShadow"
EldPickup		= "RevolverPickupPickup"
Reactions		= "RevolverPickupReactions"

	[RevolverPickupTransform]
	UseGravity = true

	[RevolverPickupCollision]
	HalfExtentsX	= 0.2
	HalfExtentsY	= 0.1
	HalfExtentsZ	= 0.03

	[RevolverPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Revolver"
	FrobVerb		= "PickUp"

	[RevolverPickupMesh]
	Mesh = "Meshes/pickup-revolver.cms"

	[RevolverPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.2
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[RevolverPickupPickup]
	GiveItem = "Revolver"

	[RevolverPickupReactions]
	NumReactions = &
	@ Reaction
	@@& = "RevolverPickupOnItemGivenReaction"

		[RevolverPickupOnItemGivenReaction]
		Rule		= "OnItemGivenRule"
		NumActions	= &
		@ Action
		@@&			= "GiveBulletsAction"

			[OnItemGivenRule]
			Event	= "OnItemGiven"

			[GiveBulletsAction]
			ActionType		= "SendEvent"
			EventName		= "AddAmmo"
			Recipient		= "GivenToPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"
			@@&Name			= "AmmoValue"
			@@^Value		= "BulletsValuePE"

				[BulletsTypePE]
				PEType	= "ConstantString"
				Value	= "Bullets"

				[BulletsValuePE]
				PEType	= "ConstantInt"
				Value	= 3

# Awards no ammo, and can deal damage by touch
[RevolverPickup_Dropped]
Extends			= "RevolverPickup"
EldCollision	= "RevolverPickup_DroppedCollision"
EldParticles	= "."
EldSound		= "."
State			= "RevolverPickup_DroppedState"
Reactions		= "ThrowableReactions"
Owner			= "."
PEMap			= "RevolverPickup_DroppedPEMap"

	[RevolverPickup_DroppedCollision]
	Extends		= "RevolverPickupCollision"
	Elasticity	= 0.5

	[RevolverPickup_DroppedState]
	InitialState = "GracePeriod"
	
	[RevolverPickup_DroppedPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "RevolverPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "RevolverPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "RevolverPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "RevolverPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "RevolverPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "RevolverPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "RevolverPickupReflectPE"

		[RevolverPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 5.0

		[RevolverPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO
		
		[RevolverPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO

		[RevolverPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "RevolverPickupDamageSpeedPE"

			[RevolverPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[RevolverPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "RevolverPickupDamageBasePE"

			[RevolverPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[RevolverPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RevolverPickupImpulseScalar"

			[RevolverPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[RevolverPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RevolverPickupReflectScalar"

			[RevolverPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Revolver]
EldTransform	= "RightHandTransform"
EldUsable		= "RevolverUsable"
EldMesh			= "RevolverMesh"
EldParticles	= "."
EldSound		= "."
EldItem			= "RevolverItem"
EldWeapon		= "RevolverWeapon"
Reactions		= "RevolverReactions"
Owner			= "."

	[RevolverUsable]
	RefireRate	= 0.2

	[RevolverMesh]
	Mesh			= "Meshes/Hands/weapon-revolver.cms"
	DrawForeground	= true

	[RevolverItem]
	Slot				= "Weapon"
	DropSpawn			= "RevolverPickup_Dropped"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[RevolverWeapon]
	Ammo		= "Bullets"
	WeaponIcon	= "Textures/UI/weapon-hud-revolver_NODXT.tga"

	[RevolverReactions]
	NumReactions = &
	@ Reaction
	@@& = "RevolverOnEquippedReaction"
	@@& = "RevolverOnUsedReaction"
	@@& = "RevolverLineCheckReaction"
	@@& = "RevolverLineCheckMissedReaction"
	@@& = "RevolverOnUsedEmptyReaction"
	@@&	= "DeferredShowWeaponsBookReaction"

		[DeferredShowWeaponsBookReaction]
		Rule		= "OnShowWeaponsBookRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalShowWeaponsBook"

			[OnShowWeaponsBookRule]
			Event	= "OnShowWeaponsBook"

			[ConditionalShowWeaponsBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadWeaponsBook"
			@@^Action		= "TeachWeaponsBook"

				[HasNotReadWeaponsBook]
				PEType	= "NOT"
				Input	= "HasReadWeaponsBook"

					[HasReadWeaponsBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadWeaponsBook"

				[TeachWeaponsBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowWeaponsBook"
				@@&			= "MarkWeaponsBookRead"

					[MarkWeaponsBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadWeaponsBook"
					ValuePE		= "TruePE"

		[RevolverOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"
		@@&			= "QueueShowWeaponsBook"	# Defer so ammo pickup screen is pushed first

			[OnEquippedRule]
			Event = "OnEquipped"

			[QueueShowWeaponsBook]
			ActionType	= "SendEvent"
			EventName	= "OnShowWeaponsBook"
			Recipient	= "SelfPE"
			QueueEvent	= true

		[RevolverOnUsedEmptyReaction]
		Rule = "WeaponOnUsedWithNoAmmoRule"
		NumActions = &
		@ Action
		@@& = "ThrowRevolverAction"
		@@& = "RemoveWeaponAction"

			[WeaponOnUsedWithNoAmmoRule]
			Event		= "OnUsed"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "HasAmmo"
			@@^Min		= "FalsePE"

			[ThrowRevolverAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "RevolverPickup_Dropped"
			YawOnly			= true
			SpawnImpulse	= 15.0
			SpawnImpulseZ	= 0.3	# Added to impulse direction before renormalizing

			[RemoveWeaponAction]
			ActionType		= "SendEvent"
			EventName		= "RemoveItem"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Slot"
			@@^Value		= "SlotPE"

				[SlotPE]
				PEType		= "EldGetSlot"
				EntityPE	= "SelfPE"

		[RevolverOnUsedReaction]
		Rule = "WeaponOnUsedWithAmmoRule"
		NumActions = &
		@ Action
		@@& = "RemoveBulletAction"
		@@& = "FireBulletAction"
		@@& = "PlayFireHandAnim"
		@@& = "PlayFireRevolverSound"
		@@& = "PlayFireRevolverFX"
		@@& = "PlayFireRevolverAINoise"

			[WeaponOnUsedWithAmmoRule]
			Event		= "OnUsed"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "HasAmmo"
			@@^Min		= "TruePE"

			[PlayFireHandAnim]
			ActionType	= "EldPlayHandAnim"
			Animation	= "Fire"

			[RemoveBulletAction]
			ActionType		= "SendEvent"
			EventName		= "RemoveAmmo"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"

			[FireBulletAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "Bullet"
			
			[PlayFireRevolverSound]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "RevolverFireSoundPE"

				[RevolverFireSoundPE]
				PEType	= "ConstantString"
				Value	= "RevolverFireSound"
			
			[PlayFireRevolverFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "MuzzleFlashPE"

				[MuzzleFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_MuzzleFlash"

			[PlayFireRevolverAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "RevolverNoiseRadiusPE"

				[RevolverNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 12.0

		[RevolverLineCheckReaction]
		Rule		= "BulletLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "DealBulletDamage"
		@@&			= "ApplyBulletImpulse"

			[BulletLineCheckRule]
			Event = "OnLineCheck"
			NumCriteria = &
			@ Criterion
			@@&Name = "CheckTag"
			@@^Min = "BulletTagPE"

				[BulletTagPE]
				PEType	= "ConstantString"
				Value	= "Bullet"

			[ApplyBulletImpulse]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "BulletImpulsePE"

				[BulletImpulsePE]
				PEType	= "Mul"
				InputA	= "BulletDirectionPE"
				InputB	= "BulletImpulseScalarPE"

					[BulletDirectionPE]
					PEType	= "QueryActionStack"
					Key		= "LineDirection"

					[BulletImpulseScalarPE]
					PEType	= "ConstantFloat"
					Value	= 10.0

			[DealBulletDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "BulletDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "OwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "PiercingDamageTypePE"

				[BulletDamagePE]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DamageAmount"
				Input		= "BulletDamageBasePE"

					[BulletDamageBasePE]
					PEType	= "ConstantInt"
					Value	= 2

				[PiercingDamageTypePE]
				PEType	= "ConstantString"
				Value	= "Piercing"

		[RevolverLineCheckMissedReaction]
		Rule		= "LineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "ConditionalRemoveVoxel"

			[LineCheckMissedRule]
			Event	= "OnLineCheckMissed"

			[PlayHitspangFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "HitspangFXPE"
			@@&Name			= "UseLocationOverride"
			@@^Value		= "TruePE"
			@@&Name			= "LocationOverride"
			@@^Value		= "HitLocationPE"

				[HitspangFXPE]
				PEType	= "ConstantString"
				Value	= "PS_Hitspang"

			[ConditionalRemoveVoxel]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "OwnerCanDestroyVoxels"
			@@^Action		= "DestroyCheckedVoxel"

				[OwnerCanDestroyVoxels]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DestroyVoxels"
				Input		= "FloatZeroPE"

				[DestroyCheckedVoxel]
				ActionType	= "EldRemoveBlock"
				Source		= "CheckedVoxelPE"

					[CheckedVoxelPE]
					PEType	= "QueryActionStack"
					Key		= "HitVoxel"

# ****************************************************************
# *************************** Flintlock **************************
# ****************************************************************

[FlintlockPickupForSale]
Extends			= "FlintlockPickup"
EldFrobbable	= "FlintlockPickupForSaleFrobbable"
EldPickup		= "FlintlockPickupForSalePickup"

	[FlintlockPickupForSaleFrobbable]
	Extends		= "FlintlockPickupFrobbable"
	FrobVerb	= "Examine"

	[FlintlockPickupForSalePickup]
	Extends			= "FlintlockPickupPickup"
	Price			= 15
	FriendlyName	= "Flintlock"
	FriendlyDesc	= "FlintlockDesc"
	
[FlintlockPickup]
#ShouldDebugRender = true
EldTransform	= "FlintlockPickupTransform"
EldCollision	= "FlintlockPickupCollision"
EldFrobbable	= "FlintlockPickupFrobbable"
EldMesh			= "FlintlockPickupMesh"
EldDropShadow	= "FlintlockPickupDropShadow"
EldPickup		= "FlintlockPickupPickup"
Reactions		= "FlintlockPickupReactions"

	[FlintlockPickupTransform]
	UseGravity = true

	[FlintlockPickupCollision]
	HalfExtentsX	= 0.25
	HalfExtentsY	= 0.125
	HalfExtentsZ	= 0.025

	[FlintlockPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Flintlock"
	FrobVerb		= "PickUp"

	[FlintlockPickupMesh]
	Mesh = "Meshes/pickup-flintlock.cms"

	[FlintlockPickupDropShadow]
	UseMeshCenter		= true
	Radius				= 0.25
	Alpha				= 0.5
	ShadowFloatZ		= 0.01

	[FlintlockPickupPickup]
	GiveItem = "Flintlock"

	[FlintlockPickupReactions]
	NumReactions = &
	@ Reaction
	@@& = "FlintlockPickupOnItemGivenReaction"

		[FlintlockPickupOnItemGivenReaction]
		Rule		= "OnItemGivenRule"
		NumActions	= &
		@ Action
		@@&			= "GiveFlintlockBulletsAction"

			[GiveFlintlockBulletsAction]
			ActionType		= "SendEvent"
			EventName		= "AddAmmo"
			Recipient		= "GivenToPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"
			@@&Name			= "AmmoValue"
			@@^Value		= "FlintlockBulletsValuePE"

				[FlintlockBulletsValuePE]
				PEType	= "ConstantInt"
				Value	= 4

# Awards no ammo, and can deal damage by touch
[FlintlockPickup_Dropped]
Extends			= "FlintlockPickup"
EldCollision	= "FlintlockPickup_DroppedCollision"
EldParticles	= "."
EldSound		= "."
State			= "FlintlockPickup_DroppedState"
Reactions		= "ThrowableReactions"
Owner			= "."
PEMap			= "FlintlockPickup_DroppedPEMap"

	[FlintlockPickup_DroppedCollision]
	Extends		= "FlintlockPickupCollision"
	Elasticity	= 0.5

	[FlintlockPickup_DroppedState]
	InitialState = "GracePeriod"
	
	[FlintlockPickup_DroppedPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "FlintlockPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "FlintlockPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "FlintlockPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "FlintlockPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "FlintlockPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "FlintlockPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "FlintlockPickupReflectPE"

		[FlintlockPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 5.0

		[FlintlockPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO
		
		[FlintlockPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO

		[FlintlockPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "FlintlockPickupDamageSpeedPE"

			[FlintlockPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[FlintlockPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "FlintlockPickupDamageBasePE"

			[FlintlockPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[FlintlockPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "FlintlockPickupImpulseScalar"

			[FlintlockPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[FlintlockPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "FlintlockPickupReflectScalar"

			[FlintlockPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Flintlock]
EldTransform	= "RightHandTransform"
EldUsable		= "FlintlockUsable"
EldMesh			= "FlintlockMesh"
EldParticles	= "."
EldSound		= "."
EldItem			= "FlintlockItem"
EldWeapon		= "FlintlockWeapon"
Reactions		= "FlintlockReactions"
Owner			= "."

	[FlintlockUsable]
	RefireRate	= 0.3	# 2/3 the speed but 2x the damage

	[FlintlockMesh]
	Mesh			= "Meshes/Hands/weapon-flintlock.cms"
	DrawForeground	= true

	[FlintlockItem]
	Slot				= "Weapon"
	DropSpawn			= "FlintlockPickup_Dropped"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[FlintlockWeapon]
	Ammo		= "Bullets"
	WeaponIcon	= "Textures/UI/weapon-hud-flintlock_NODXT.tga"

	[FlintlockReactions]
	NumReactions = &
	@ Reaction
	@@& = "FlintlockOnEquippedReaction"
	@@& = "FlintlockOnUsedReaction"
	@@& = "FlintlockLineCheckReaction"
	@@& = "FlintlockLineCheckMissedReaction"
	@@& = "FlintlockOnUsedEmptyReaction"
	@@&	= "DeferredShowWeaponsBookReaction"

		[FlintlockOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"
		@@&			= "QueueShowWeaponsBook"	# Defer so ammo pickup screen is pushed first

		[FlintlockOnUsedEmptyReaction]
		Rule = "WeaponOnUsedWithNoAmmoRule"
		NumActions = &
		@ Action
		@@& = "ThrowFlintlockAction"
		@@& = "RemoveWeaponAction"

			[ThrowFlintlockAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "FlintlockPickup_Dropped"
			YawOnly			= true
			SpawnImpulse	= 15.0
			SpawnImpulseZ	= 0.3	# Added to impulse direction before renormalizing

		[FlintlockOnUsedReaction]
		Rule = "WeaponOnUsedWithAmmoRule"
		NumActions = &
		@ Action
		@@& = "RemoveBulletAction"
		@@& = "FireBulletAction"
		@@& = "PlayFireHandAnim"
		@@& = "PlayFireFlintlockSound"
		@@& = "PlayFireRevolverFX"
		@@& = "PlayFireFlintlockAINoise"

			[PlayFireFlintlockSound]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "FlintlockFireSoundPE"

				[FlintlockFireSoundPE]
				PEType	= "ConstantString"
				Value	= "FlintlockFireSound"

			[PlayFireFlintlockAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "FlintlockNoiseRadiusPE"

				[FlintlockNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 14.0	# Bigger than revolver's 12.0

		[FlintlockLineCheckReaction]
		Rule		= "BulletLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "DealFlintlockDamage"
		@@&			= "ApplyFlintlockImpulse"

			[ApplyFlintlockImpulse]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "FlintlockImpulsePE"

				[FlintlockImpulsePE]
				PEType	= "Mul"
				InputA	= "BulletDirectionPE"
				InputB	= "FlintlockImpulseScalarPE"

					[FlintlockImpulseScalarPE]
					PEType	= "ConstantFloat"
					Value	= 12.0	# Bigger than revolver's 10

			[DealFlintlockDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "FlintlockDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "OwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "PiercingDamageTypePE"

				[FlintlockDamagePE]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DamageAmount"
				Input		= "FlintlockDamageBasePE"

					[FlintlockDamageBasePE]
					PEType	= "ConstantInt"
					Value	= 4

		[FlintlockLineCheckMissedReaction]
		Rule		= "LineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "ConditionalRemoveVoxel"

# ****************************************************************
# *************************** Snaregun ***************************
# ****************************************************************

[SnaregunPickupForSale]
Extends			= "SnaregunPickup"
EldFrobbable	= "SnaregunPickupForSaleFrobbable"
EldPickup		= "SnaregunPickupForSalePickup"

	[SnaregunPickupForSaleFrobbable]
	Extends		= "SnaregunPickupFrobbable"
	FrobVerb	= "Examine"

	[SnaregunPickupForSalePickup]
	Extends			= "SnaregunPickupPickup"
	Price			= 10
	FriendlyName	= "Snaregun"
	FriendlyDesc	= "SnaregunDesc"

[SnaregunPickup]
#ShouldDebugRender = true
EldTransform	= "SnaregunPickupTransform"
EldCollision	= "SnaregunPickupCollision"
EldFrobbable	= "SnaregunPickupFrobbable"
EldMesh			= "SnaregunPickupMesh"
EldDropShadow	= "SnaregunPickupDropShadow"
EldPickup		= "SnaregunPickupPickup"
Reactions		= "SnaregunPickupReactions"

	[SnaregunPickupTransform]
	UseGravity	= true

	[SnaregunPickupCollision]
	HalfExtentsX	= 0.125
	HalfExtentsY	= 0.225
	HalfExtentsZ	= 0.11

	[SnaregunPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Snaregun"
	FrobVerb		= "PickUp"

	[SnaregunPickupMesh]
	Mesh = "Meshes/pickup-snaregun.cms"

	[SnaregunPickupDropShadow]
	UseMeshCenter	= true
	Radius			= 0.25
	Alpha			= 0.5
	ShadowFloatZ	= 0.01

	[SnaregunPickupPickup]
	GiveItem	= "Snaregun"

	[SnaregunPickupReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SnaregunPickupOnItemGivenReaction"

		[SnaregunPickupOnItemGivenReaction]
		Rule		= "OnItemGivenRule"
		NumActions	= &
		@ Action
		@@&			= "SnaregunGiveBulletsAction"

			[SnaregunGiveBulletsAction]
			ActionType		= "SendEvent"
			EventName		= "AddAmmo"
			Recipient		= "GivenToPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"
			@@&Name			= "AmmoValue"
			@@^Value		= "SnaregunBulletsValuePE"

				[SnaregunBulletsValuePE]
				PEType	= "ConstantInt"
				Value	= 3

# Awards no ammo, and can deal damage by touch
[SnaregunPickup_Dropped]
Extends			= "SnaregunPickup"
EldCollision	= "SnaregunPickup_DroppedCollision"
EldParticles	= "."
EldSound		= "."
State			= "SnaregunPickup_DroppedState"
Reactions		= "ThrowableReactions"
Owner			= "."
PEMap			= "SnaregunPickup_DroppedPEMap"

	[SnaregunPickup_DroppedCollision]
	Extends		= "SnaregunPickupCollision"
	Elasticity	= 0.5

	[SnaregunPickup_DroppedState]
	InitialState = "GracePeriod"
	
	[SnaregunPickup_DroppedPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "SnaregunPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "SnaregunPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "SnaregunPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "SnaregunPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "SnaregunPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "SnaregunPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "SnaregunPickupReflectPE"

		[SnaregunPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 5.0

		[SnaregunPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO: Don't reuse rock stuff?
		
		[SnaregunPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO: Don't reuse rock stuff?

		[SnaregunPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "SnaregunPickupDamageSpeedPE"

			[SnaregunPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[SnaregunPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "SnaregunPickupDamageBasePE"

			[SnaregunPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[SnaregunPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "SnaregunPickupImpulseScalar"

			[SnaregunPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[SnaregunPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "SnaregunPickupReflectScalar"

			[SnaregunPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Snaregun]
EldTransform	= "RightHandTransform"
EldUsable		= "SnaregunUsable"
EldMesh			= "SnaregunMesh"
EldParticles	= "."
EldSound		= "."
EldItem			= "SnaregunItem"
EldWeapon		= "SnaregunWeapon"
Reactions		= "SnaregunReactions"
Owner			= "."

	[SnaregunUsable]
	RefireRate	= 0.2

	[SnaregunMesh]
	Mesh			= "Meshes/Hands/weapon-snaregun.cms"
	DrawForeground	= true

	[SnaregunItem]
	Slot				= "Weapon"
	DropSpawn			= "SnaregunPickup_Dropped"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[SnaregunWeapon]
	Ammo		= "Bullets"
	WeaponIcon	= "Textures/UI/weapon-hud-snaregun_NODXT.tga"

	[SnaregunReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "SnaregunOnEquippedReaction"
	@@&				= "SnaregunOnUsedReaction"
	@@&				= "SnaregunLineCheckReaction"
	@@&				= "SnaregunLineCheckMissedReaction"
	@@&				= "SnaregunOnUsedEmptyReaction"
	@@&				= "DeferredShowWeaponsBookReaction"

		[SnaregunOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"

		[SnaregunOnUsedEmptyReaction]
		Rule		= "WeaponOnUsedWithNoAmmoRule"
		NumActions	= &
		@ Action
		@@&			= "ThrowSnaregunAction"
		@@&			= "RemoveWeaponAction"

			[ThrowSnaregunAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "SnaregunPickup_Dropped"
			YawOnly			= true
			SpawnImpulse	= 15.0
			SpawnImpulseZ	= 0.3	# Added to impulse direction before renormalizing

		[SnaregunOnUsedReaction]
		Rule		= "WeaponOnUsedWithAmmoRule"
		NumActions	= &
		@ Action
		@@&			= "RemoveBulletAction"
		@@&			= "FireBulletAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireSnaregunSFX"
		@@&			= "PlayFireSnaregunVFX"
		@@&			= "PlayFireSnaregunAINoise"

			[PlayFireSnaregunSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "SnaregunFireSFXPE"

				[SnaregunFireSFXPE]
				PEType	= "ConstantString"
				Value	= "SnaregunFireSound"

			[PlayFireSnaregunVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "SnaregunFireVFXPE"

				[SnaregunFireVFXPE]
				PEType	= "ConstantString"
				Value	= "PS_SnaregunFire"

			[PlayFireSnaregunAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "SnaregunNoiseRadiusPE"

				[SnaregunNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 5.0

		[SnaregunLineCheckReaction]
		Rule		= "BulletLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "SnaregunHitEntitySelector"

			[SnaregunHitEntitySelector]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "IsCheckedEntityStaticPE"
			@@^Action		= "SpawnSnareAction"
			@@&Condition	= "TruePE"
			@@^Action		= "DealSnaregunDamage"

				[IsCheckedEntityStaticPE]
				PEType		= "PushContext"
				EntityPE	= "CheckedPE"
				Input		= "IsStaticPE"

					[IsStaticPE]
					PEType	= "QueryActionStack"
					Key		= "IsStatic"

				[SpawnSnareAction]
				ActionType				= "EldSpawnEntity"
				Entity					= "TrapBolt"
				LocationOverridePE		= "SpawnSnareLocationPE"
				OrientationOverridePE	= "HitNormalPE"

					[SpawnSnareLocationPE]
					PEType	= "Add"
					InputA	= "HitLocationPE"
					InputB	= "SmallHitNormalPE"

						[HitLocationPE]
						PEType	= "QueryActionStack"
						Key		= "HitLocation"

						[SmallHitNormalPE]
						PEType	= "Mul"
						InputA	= "SmallNormalScalarPE"
						InputB	= "HitNormalPE"

							[SmallNormalScalarPE]
							PEType	= "ConstantFloat"
							Value	= 0.1

							[HitNormalPE]
							PEType	= "QueryActionStack"
							Key		= "HitNormal"

				[DealSnaregunDamage]
				ActionType		= "SendEvent"
				EventName		= "TakeDamage"
				Recipient		= "CheckedPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "DamageAmount"
				@@^Value		= "SnaregunDamagePE"
				@@&Name			= "Damager"
				@@^Value		= "OwnerPE"
				@@&Name			= "DamageType"
				@@^Value		= "PiercingDamageTypePE"

					[SnaregunDamagePE]
					PEType		= "StatMod"
					EntityPE	= "OwnerPE"
					StatName	= "DamageAmount"
					Input		= "SnaregunDamageBasePE"

						# Deals less than a revolver; should discourage using
						# it to deal damage directly.
						[SnaregunDamageBasePE]
						PEType	= "ConstantInt"
						Value	= 1

		[SnaregunLineCheckMissedReaction]
		Rule		= "LineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "SpawnSnareAction"

[TrapBolt]
#ShouldDebugRender = true
EldTransform	= "TrapBoltTransform"
EldCollision	= "TrapBoltCollision"
EldMesh			= "TrapBoltMesh"
EldTrapBolt		= "TrapBoltTrapBolt"
EldFrobbable	= "TrapBoltFrobbable"
EldHealth		= "TrapBoltHealth"
EldSound		= "."
EldParticles	= "."
Reactions		= "TrapBoltReactions"
Owner			= "."

	[TrapBoltTransform]
	CanMove	= false

	[TrapBoltCollision]
	BlocksWorld	= false
	BlocksTrace	= true

	[TrapBoltMesh]
	Mesh				= "Meshes/box.cms"
	TextureOverride	= "Textures/trap-wire_NODXT.tga"

	[TrapBoltTrapBolt]
	CollisionFatten	= 0.0625	# 1 texel (full extents is 2 texels)
	MeshFatten		= 0.03125	# 1/2 texel (full extents is 1 texel)
	EndpointSpacing	= 0.0078125	# 1/8 texel
	AnchorDepth		= 0.2		# Less than half the depth of doors and fences

	[TrapBoltFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FrobVerb		= "Disarm"

	[TrapBoltHealth]
	Health	= 1

	[TrapBoltReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TrapBoltOnFrobbedReaction"
	@@&				= "TrapBoltOnDiedReaction"
	@@&				= "TrapBoltOnTriggeredReaction"
	@@&				= "TrapBoltOnTriggeredFinishedReaction"

		[TrapBoltOnDiedReaction]
		Rule		= "OnDiedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayTrapBoltDisarmSFX"
		@@&			= "RemoveTrapBoltComposite"

		[TrapBoltOnTriggeredFinishedReaction]
		Rule		= "OnTriggeredTrapBoltFinishedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayTrapBoltFireSFX1"
		@@&			= "PlayTrapBoltFireSFX2"
		@@&			= "RemoveTrapBoltComposite"

			[OnTriggeredTrapBoltFinishedRule]
			Event	= "OnTriggeredTrapBoltFinished"

			[PlayTrapBoltFireSFX1]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "TrapBoltFireSFXPE"
			# Override contextual location
			@@&Name			= "Location"
			@@^Value		= "TrapBoltEndpoint1PE"

				[TrapBoltFireSFXPE]
				PEType	= "ConstantString"
				Value	= "TrapBoltFireSound"

				[TrapBoltEndpoint1PE]
				PEType	= "QueryActionStack"
				Key		= "Endpoint1"

			[PlayTrapBoltFireSFX2]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "TrapBoltFireSFXPE"
			# Override contextual location
			@@&Name			= "Location"
			@@^Value		= "TrapBoltEndpoint2PE"

				[TrapBoltEndpoint2PE]
				PEType	= "QueryActionStack"
				Key		= "Endpoint2"

			[RemoveTrapBoltComposite]
			ActionType	= "Composite"
			NumActions	= &
			@ Action
			@@&			= "BecomeNonFrobbable"
			@@&			= "StopTouchingAction"
			@@&			= "HideMeshAction"
			@@&			= "PlayTrapBoltHitspang1"
			@@&			= "PlayTrapBoltHitspang2"
			@@&			= "TrapBoltQueueDestroySelfAction"

				[PlayTrapBoltHitspang1]
				ActionType		= "SendEvent"
				EventName		= "PlayParticleSystem"
				Recipient		= "SelfPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "ParticleSystem"
				@@^Value		= "HitspangFXPE"
				@@&Name			= "UseLocationOverride"
				@@^Value		= "TruePE"
				@@&Name			= "LocationOverride"
				@@^Value		= "TrapBoltEndpoint1PE"

				[PlayTrapBoltHitspang2]
				ActionType		= "SendEvent"
				EventName		= "PlayParticleSystem"
				Recipient		= "SelfPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "ParticleSystem"
				@@^Value		= "HitspangFXPE"
				@@&Name			= "UseLocationOverride"
				@@^Value		= "TruePE"
				@@&Name			= "LocationOverride"
				@@^Value		= "TrapBoltEndpoint2PE"

				# Give the VFX time to play
				[TrapBoltQueueDestroySelfAction]
				ActionType		= "SendEvent"
				EventName		= "Destroy"
				Recipient		= "SelfPE"
				QueueEvent		= true
				DispatchDelay	= 0.5

		[TrapBoltOnTriggeredReaction]
		Rule		= "OnTriggeredTrapBoltRule"
		NumActions	= &
		@ Action
		@@&			= "DealTrapBoltDamage"

			[OnTriggeredTrapBoltRule]
			Event	= "OnTriggeredTrapBolt"

			[DealTrapBoltDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "TriggeredPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "TrapBoltDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "TopmostOwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "PiercingDamageTypePE"

				[TriggeredPE]
				PEType	= "QueryActionStack"
				Key		= "Triggered"

				[TrapBoltDamagePE]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DamageAmount"
				Input		= "TrapBoltDamageBasePE"

					[TrapBoltDamageBasePE]
					PEType	= "ConstantInt"
					Value	= 2

		[TrapBoltOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "TrapBoltGiveAmmoAction"
		@@&			= "PlayTrapBoltDisarmSFX"
		@@&			= "RemoveTrapBoltComposite"

			[TrapBoltGiveAmmoAction]
			ActionType		= "SendEvent"
			EventName		= "AddAmmo"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "AmmoType"
			@@^Value		= "BulletsTypePE"
			@@&Name			= "AmmoValue"
			@@^Value		= "IntOnePE"

			[PlayTrapBoltDisarmSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "TrapBoltDisarmSFXPE"

				[TrapBoltDisarmSFXPE]
				PEType	= "ConstantString"
				Value	= "TrapBoltDisarmSound"

# ****************************************************************
# *************************** Ropegun ****************************
# ****************************************************************

[RopegunPickupForSale]
Extends			= "RopegunPickup"
EldFrobbable	= "RopegunPickupForSaleFrobbable"
EldPickup		= "RopegunPickupForSalePickup"

	[RopegunPickupForSaleFrobbable]
	Extends		= "RopegunPickupFrobbable"
	FrobVerb	= "Examine"

	[RopegunPickupForSalePickup]
	Extends			= "RopegunPickupPickup"
	Price			= 20
	FriendlyName	= "Ropegun"
	FriendlyDesc	= "RopegunDesc"

[RopegunPickup]
#ShouldDebugRender = true
EldTransform	= "RopegunPickupTransform"
EldCollision	= "RopegunPickupCollision"
EldFrobbable	= "RopegunPickupFrobbable"
EldMesh			= "RopegunPickupMesh"
EldDropShadow	= "RopegunPickupDropShadow"
EldPickup		= "RopegunPickupPickup"

	[RopegunPickupTransform]
	UseGravity	= true

	[RopegunPickupCollision]
	HalfExtentsX	= 0.225
	HalfExtentsY	= 0.125
	HalfExtentsZ	= 0.04

	[RopegunPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Ropegun"
	FrobVerb		= "PickUp"

	[RopegunPickupMesh]
	Mesh = "Meshes/pickup-ropegun.cms"

	[RopegunPickupDropShadow]
	UseMeshCenter	= true
	Radius			= 0.25
	Alpha			= 0.5
	ShadowFloatZ	= 0.01

	[RopegunPickupPickup]
	GiveItem	= "Ropegun"

# Can deal damage by touch
[RopegunPickup_Dropped]
Extends			= "RopegunPickup"
EldCollision	= "RopegunPickup_DroppedCollision"
EldParticles	= "."
EldSound		= "."
State			= "RopegunPickup_DroppedState"
Reactions		= "ThrowableReactions"
Owner			= "."
PEMap			= "RopegunPickup_DroppedPEMap"

	[RopegunPickup_DroppedCollision]
	Extends		= "RopegunPickupCollision"
	Elasticity	= 0.5

	[RopegunPickup_DroppedState]
	InitialState = "GracePeriod"
	
	[RopegunPickup_DroppedPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "NoiseRadius"
	@@^Def	= "RopegunPickupNoiseRadiusPE"
	@@&Key	= "Volume"
	@@^Def	= "RopegunPickupCollidedVolumePE"
	@@&Key	= "Sound"
	@@^Def	= "RopegunPickupCollidedSoundPE"
	@@&Key	= "SpeedSq"
	@@^Def	= "RopegunPickupDamageSpeedSqPE"
	@@&Key	= "Damage"
	@@^Def	= "RopegunPickupDamagePE"
	@@&Key	= "Impulse"
	@@^Def	= "RopegunPickupImpulsePE"
	@@&Key	= "Reflect"
	@@^Def	= "RopegunPickupReflectPE"

		[RopegunPickupNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 5.0

		[RopegunPickupCollidedVolumePE]
		PEType		= "Min"
		InputA		= "FloatOnePE"
		InputB		= "RockQuarterSpeedPE"	# TODO: Don't reuse rock stuff?
		
		[RopegunPickupCollidedSoundPE]
		PEType		= "ConstantString"
		Value		= "RockCollidedSound"	# TODO: Don't reuse rock stuff?

		[RopegunPickupDamageSpeedSqPE]
		PEType = "Square"
		Input = "RopegunPickupDamageSpeedPE"

			[RopegunPickupDamageSpeedPE]
			PEType = "ConstantFloat"
			Value = 5.0

		[RopegunPickupDamagePE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "DamageAmount"
		Input		= "RopegunPickupDamageBasePE"

			[RopegunPickupDamageBasePE]
			PEType	= "ConstantInt"
			Value	= 1

		[RopegunPickupImpulsePE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RopegunPickupImpulseScalar"

			[RopegunPickupImpulseScalar]
			PEType	= "ConstantFloat"
			Value	= 0.5

		[RopegunPickupReflectPE]
		PEType	= "Mul"
		InputA	= "VelocityPE"
		InputB	= "RopegunPickupReflectScalar"

			[RopegunPickupReflectScalar]
			PEType	= "ConstantFloat"
			Value	= -1.2

[Ropegun]
EldTransform	= "RightHandTransform"
EldUsable		= "RopegunUsable"
EldMesh			= "RopegunMesh"
EldParticles	= "."
EldSound		= "."
EldItem			= "RopegunItem"
EldWeapon		= "RopegunWeapon"
Reactions		= "RopegunReactions"
Owner			= "."

	[RopegunUsable]
	RefireRate	= 0.2

	[RopegunMesh]
	Mesh			= "Meshes/Hands/weapon-ropegun.cms"
	DrawForeground	= true

	[RopegunItem]
	Slot				= "Weapon"
	DropSpawn			= "RopegunPickup_Dropped"
	DropSpawnImpulse	= 3.0
	DropSpawnImpulseZ	= 1.0	# Added to impulse direction before renormalizing
	DropSpawnOffsetZ	= 0.5
	DropSpawnYaw		= 90.0
	SuppressDropDupe	= true

	[RopegunWeapon]
	WeaponIcon	= "Textures/UI/weapon-hud-ropegun_NODXT.tga"

	[RopegunReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "RopegunOnEquippedReaction"
	@@&				= "RopegunOnUsedReaction"
	@@&				= "RopegunLineCheckReaction"
	@@&				= "RopegunLineCheckMissedReaction"
	@@&				= "DeferredShowWeaponsBookReaction"

		[RopegunOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"

		[RopegunOnUsedReaction]
		Rule		= "OnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireBulletAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireRopegunSFX"
		@@&			= "PlayFireRopegunVFX"
		@@&			= "PlayFireRopegunAINoise"

			[PlayFireRopegunSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "RopegunFireSFXPE"

				[RopegunFireSFXPE]
				PEType	= "ConstantString"
				Value	= "RopegunFireSound"

			[PlayFireRopegunVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "RopegunFireVFXPE"

				[RopegunFireVFXPE]
				PEType	= "ConstantString"
				Value	= "PS_RopegunFire"

			[PlayFireRopegunAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "RopegunNoiseRadiusPE"

				[RopegunNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 4.0

		[RopegunLineCheckReaction]
		Rule		= "BulletLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "RopegunHitEntitySelector"

			[RopegunHitEntitySelector]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "IsCheckedEntityStaticPE"
			@@^Action		= "SpawnRopeAction"

				[SpawnRopeAction]
				ActionType				= "EldSpawnEntity"
				Entity					= "Rope"
				LocationOverridePE		= "HitLocationPE"
				OrientationOverridePE	= "HitNormalPE"

		[RopegunLineCheckMissedReaction]
		Rule		= "LineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayHitspangFX"
		@@&			= "SpawnRopeAction"

[RopeHook]
EldTransform	= "RopeHookTransform"
EldMesh			= "RopeHookMesh"
EldAnchor		= "RopeHookAnchor"
Reactions		= "RopeHookReactions"

	[RopeHookTransform]
	CanMove	= false

	[RopeHookMesh]
	Mesh	= "Meshes/ropehook.cms"

	[RopeHookAnchor]
	AnchorDirectionY	= 1.0

	[RopeHookReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "DestroyOnUnanchoredReaction"

[Rope]
#ShouldDebugRender	= true
Extends				= "ClimbableBase"
EldCollision		= "RopeCollision"
EldMesh				= "RopeMesh"
EldRope				= "RopeRope"
EldHealth			= "RopeHealth"
Reactions			= "RopeReactions"

	[RopeCollision]
	BlocksWorld	= true
	BlocksTrace	= true

	[RopeMesh]
	Mesh			= "Meshes/box.cms"
	TextureOverride	= "Textures/rope_NODXT.tga"

	[RopeRope]
	CollisionFatten	= 0.0625	# 1 texel (full extents is 2 texels)
	MeshFatten		= 0.03125	# 1/2 texel (full extents is 1 texel)
	EndpointSpacing	= 0.0078125	# 1/8 texel
	AnchorDepth		= 0.2		# Less than half the depth of doors and fences
	HookLength		= 0.25
	DangleHeight	= 0.15		# Should be less than hook length, for when rope is fired into ground
	HookEntity		= "RopeHook"

	[RopeHealth]
	Health	= 1

	[RopeReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "RopeOnDiedReaction"

		[RopeOnDiedReaction]
		Rule		= "OnDiedRule"
		NumActions	= &
		@ Action
		@@&			= "StopTouchingAction"	# This is needed to send untouch events properly
		@@&			= "DestroySelfAction"

# ****************************************************************
# **************************** Powers ****************************
# ****************************************************************

# ********************************
# Shared power definitions

[PowerUsable]
RefireRate	= 2.0

[PowerMesh]
Mesh			= "Meshes/Hands/power-generic.cms"
DrawForeground	= true

[PowerItem]
Slot	= "Power"

[PowerOnEquippedReaction]
Rule		= "OnEquippedRule"
NumActions	= &
@ Action
@@&			= "PlayIdleHandAnim"
#@@&			= "SetPowerLabelVar"
@@&			= "SetPowerIcon"
@@&			= "ShowPowerHUD"

	[PlayIdleHandAnim]
	ActionType	= "EldPlayHandAnim"
	Animation	= "Idle"

	[SetPowerLabelVar]
	ActionType	= "SetConfigVar"
	VarContext	= "HUD"
	VarName		= "PowerLabel"
	ValuePE		= "EntityNamePE"

		[EntityNamePE]
		PEType	= "GetName"
		Input	= "SelfPE"

	[SetPowerIcon]
	ActionType	= "UISetWidgetImage"
	Screen		= "HUD"
	Widget		= "PowerIcon"
	ImagePE		= "PowerIconPE"

		[PowerIconPE]
		PEType	= "Lookup"
		Key		= "PowerIcon"

	[ShowPowerHUD]
	ActionType	= "UIShowHideWidget"
	Screen		= "HUD"
	#Widget		= "PowerLabel"
	Widget		= "PowerIcon"
	Hidden		= false

[PowerOnInitializedReaction]
Rule		= "OnInitializedQueuedRule"
NumActions	= &
@ Action
#@@&			= "SetPowerLabelVar"
@@&			= "SetPowerIcon"
@@&			= "ShowPowerHUD"

[PowerOnUnequippedReaction]
Rule		= "OnUnequippedRule"
NumActions	= &
@ Action
@@&			= "HidePowerHUD"

[PowerRemoveMoney]
ActionType		= "SendEvent"
EventName		= "RemoveMoney"
Recipient		= "OwnerPE"
NumParameters	= &
@ Parameter
@@&Name			= "Money"
@@^Value		= "PowerCostPE"

[PowerOnUsedRule]
Event			= "OnUsed"
NumConditions	= &
@ Condition
@@&				= "PowerOwnerHasMoneyPE"

	[PowerOwnerHasMoneyPE]
	PEType	= "Conditional"
	Op		= "GreaterThanOrEqual"
	InputA	= "OwnerMoneyPE"
	InputB	= "PowerCostPE"

		[OwnerMoneyPE]
		PEType		= "PushContext"
		EntityPE	= "OwnerPE"
		Input		= "MoneyPE"

			[MoneyPE]
			PEType	= "QueryActionStack"
			Key		= "Money"

		[PowerCostPE]
		PEType		= "StatMod"
		EntityPE	= "OwnerPE"
		StatName	= "PowerCost"
		Input		= "PowerCostBasePE"

			[PowerCostBasePE]
			PEType	= "Lookup"
			Key		= "PowerCost"

[PowerOnUsedBrokeReaction]
Rule		= "PowerOnUsedBrokeRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowPowerBrokeBook"
@@&			= "PlayPowerBrokeSFX"
@@&			= "ResetRefireTimeAction"

	[PowerOnUsedBrokeRule]
	Event			= "OnUsed"
	NumConditions	= &
	@ Condition
	@@&				= "PowerOwnerDoesNotHaveMoneyPE"

		[PowerOwnerDoesNotHaveMoneyPE]
		PEType	= "NOT"
		Input	= "PowerOwnerHasMoneyPE"

	[ResetRefireTimeAction]
	ActionType	= "SendEvent"
	EventName	= "ResetRefireTime"
	Recipient	= "SelfPE"

	[PlayPowerBrokeSFX]
	ActionType		= "SendEvent"
	EventName		= "PlaySound"
	Recipient		= "OwnerPE"
	NumParameters	= &
	@ Parameter
	@@&Name			= "Sound"
	@@^Value		= "PowerBrokeSFXPE"

		[PowerBrokeSFXPE]
		PEType	= "ConstantString"
		Value	= "PowerBrokeSound"

	[ConditionalShowPowerBrokeBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadPowerBrokeBook"
	@@^Action		= "TeachPowerBrokeBook"

		[HasNotReadPowerBrokeBook]
		PEType	= "NOT"
		Input	= "HasReadPowerBrokeBook"

			[HasReadPowerBrokeBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadPowerBrokeBook"

		[TeachPowerBrokeBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowPowerBrokeBook"
		@@&			= "MarkPowerBrokeBookRead"

			[ShowPowerBrokeBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_PowerBroke"

			[MarkPowerBrokeBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadPowerBrokeBook"
			ValuePE		= "TruePE"
		
# End shared power definitions
# ********************************

[PowerTeleport]
EldPowerTeleport	= "."
EldTransform		= "LeftHandTransform"
EldUsable			= "PowerTeleportUsable"
EldMesh				= "PowerMesh"
EldParticles		= "PowerTeleportParticles"
EldSound			= "."
EldItem				= "PowerItem"
Reactions			= "PowerTeleportReactions"
Owner				= "."
PEMap				= "PowerTeleportPEMap"
State				= "PowerTeleportState"

	[PowerTeleportUsable]
	HoldReleaseMode	= true

	[PowerTeleportParticles]
	Particles	= "PS_PowerTeleport"

	[PowerTeleportPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerTeleportCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerTeleportIconPE"

		[PowerTeleportIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-teleport_NODXT.tga"

		[PowerTeleportCostPE]
		PEType	= "ConstantInt"
		Value	= 4
		# For UI! Keep in sync!
		[PowerTeleport]
		PowerCost	= 4

	[PowerTeleportState]
	InitialState	= "Throw"

	[PowerTeleportReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerTeleportOnUnequippedReaction"
	@@&				= "PowerTeleportThrowOnUsedReaction"
	@@&				= "PowerTeleportWarpOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerTeleportOnTeleportedReaction"
	@@&				= "PowerTeleportWarpOnUsedHeldReaction"

		[PowerTeleportOnUnequippedReaction]
		Rule		= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HidePowerHUD"
		@@&			= "DestroyBeaconAction"

			[DestroyBeaconAction]
			ActionType	= "SendEvent"
			EventName	= "DestroyBeacon"
			Recipient	= "SelfPE"

		[PowerTeleportThrowOnUsedReaction]
		Rule		= "PowerTeleportThrowOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "SetWarpStateAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "ThrowTeleportBeaconAction"

			[PowerTeleportThrowOnUsedRule]
			Event		= "OnUsed"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "State"
			@@^Min		= "ThrowStatePE"

				[ThrowStatePE]
				PEType	= "ConstantString"
				Value	= "Throw"

			[SetWarpStateAction]
			ActionType		= "SendEvent"
			EventName		= "SetState"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewState"
			@@^Value		= "WarpStatePE"

				[WarpStatePE]
				PEType	= "ConstantString"
				Value	= "Warp"

			[ThrowTeleportBeaconAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "TeleportBeacon"
			YawOnly			= true
			SpawnImpulse	= 20.0

		[PowerTeleportWarpOnUsedReaction]
		Rule		= "PowerTeleportWarpOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "TryTeleportAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireTeleportVFX"
		@@&			= "PlayFireTeleportSFX"

			[PowerTeleportWarpOnUsedRule]
			Event			= "OnUsed"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "State"
			@@^Min			= "WarpStatePE"
			NumConditions	= &
			@ Condition
			@@&				= "PowerOwnerHasMoneyPE"

			[TryTeleportAction]
			ActionType	= "SendEvent"
			EventName	= "TryTeleport"
			Recipient	= "SelfPE"

			[PlayFireTeleportVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "TeleportFlashPE"

				[TeleportFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_TeleportFlash"

			[PlayFireTeleportSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "TeleportSoundPE"

				[TeleportSoundPE]
				PEType	= "ConstantString"
				Value	= "TeleportFireSound"

		[PowerTeleportOnTeleportedReaction]
		Rule		= "OnTeleportedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "DestroyBeaconAction"
		@@&			= "SetThrowStateAction"

			[OnTeleportedRule]
			Event	= "OnTeleported"

			[SetThrowStateAction]
			ActionType		= "SendEvent"
			EventName		= "SetState"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewState"
			@@^Value		= "ThrowStatePE"

		[PowerTeleportWarpOnUsedHeldReaction]
		Rule		= "PowerTeleportWarpOnUsedHeldRule"
		NumActions	= &
		@ Action
		@@&			= "DestroyBeaconAction"
		@@&			= "SetThrowStateAction"

			[PowerTeleportWarpOnUsedHeldRule]
			Event			= "OnUsedHeld"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "State"
			@@^Min			= "WarpStatePE"

[TeleportBeacon]
EldTransform	= "."
EldCollision	= "TeleportBeaconCollision"
EldParticles	= "TeleportBeaconParticles"
Reactions		= "TeleportBeaconReactions"

	[TeleportBeaconCollision]
	HalfExtentsXY		= 0.03
	HalfExtentsZ		= 0.1875
	Elasticity			= 0.5
	CanTouch			= false

	[TeleportBeaconParticles]
	Particles	= "PS_TeleportBeacon"

	[TeleportBeaconReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "TeleportBeaconCollisionReaction"

		[TeleportBeaconCollisionReaction]
		Rule		= "OnAnyCollisionRule"
		NumActions	= &
		@ Action
		@@&			= "StopMotionAction"

			[OnAnyCollisionRule]
			Event = "OnAnyCollision"

[PowerFlare]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerFlareParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerFlareReactions"
Owner			= "."
PEMap			= "PowerFlarePEMap"

	[PowerFlareParticles]
	Particles	= "PS_PowerFlare"

	[PowerFlarePEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerFlareCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerFlareIconPE"

		[PowerFlareIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-flare_NODXT.tga"

		[PowerFlareCostPE]
		PEType	= "ConstantInt"
		Value	= 1
		# For UI! Keep in sync!
		[PowerFlare]
		PowerCost	= 1

	[PowerFlareReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerFlareOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"

		[PowerFlareOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "ThrowFlareAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireFlareVFX"
		@@&			= "PlayFireFlareSFX"

			[ThrowFlareAction]
			ActionType		= "EldSpawnEntity"
			Entity			= "Flare"
			YawOnly			= true
			SpawnImpulse	= 30.0

			[PlayFireFlareVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "FlareFlashPE"

				[FlareFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_FlareFlash"

			[PlayFireFlareSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "FlareSoundPE"

				[FlareSoundPE]
				PEType	= "ConstantString"
				Value	= "FlareFireSound"

[Flare]
#ShouldDebugRender = true
EldTransform	= "."
EldCollision	= "FlareCollision"
EldLight		= "FlareLight"
EldParticles	= "FlareParticles"
Owner			= "."
Reactions		= "FlareReactions"

	[FlareCollision]
	HalfExtentsXY		= 0.03
	HalfExtentsZ		= 0.1875
	Elasticity			= 0.5
	CanTouch			= false

	[FlareLight]
	DeferAddLight	= true
	Radius			= 6.0
	ColorR			= 1.8
	ColorG			= 0.9
	ColorB			= 0.6

	[FlareParticles]
	Particles	= "PS_Flare"

	[FlareReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "FlareCollisionReaction"
	@@&				= "FlareOnExpiredReaction"

		[FlareCollisionReaction]
		Rule		= "OnAnyCollisionRule"
		NumActions	= &
		@ Action
		@@&			= "StopMotionAction"
		@@&			= "AddLightAction"
		@@&			= "FlareOnLandedStartTimer"
		@@&			= "PlayFlareAINoise"

			[AddLightAction]
			ActionType	= "EldSetLight"
			AddLight	= true

			[StopMotionAction]
			ActionType = "EldStopMotion"

			[FlareOnLandedStartTimer]
			ActionType		= "SendEvent"
			QueueEvent		= true
			DispatchDelay	= 15.0
			EventName		= "OnExpired"
			Recipient		= "SelfPE"

			[PlayFlareAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "FlareNoiseRadiusPE"

				[FlareNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 10.0

		[FlareOnExpiredReaction]
		Rule		= "FlareOnExpiredRule"
		NumActions	= &
		@ Action
		@@&			= "DestroySelfAction"

			[FlareOnExpiredRule]
			Event = "OnExpired"

[PowerSummon]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerSummonParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerSummonReactions"
Owner			= "."
PEMap			= "PowerSummonPEMap"

	[PowerSummonParticles]
	Particles	= "PS_PowerSummon"

	[PowerSummonPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerSummonCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerSummonIconPE"

		[PowerSummonIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-summon_NODXT.tga"

		[PowerSummonCostPE]
		PEType	= "ConstantInt"
		Value	= 7
		# For UI! Keep in sync!
		[PowerSummon]
		PowerCost	= 7

	[PowerSummonReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerSummonOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerSummonLineCheckMissedReaction"
	@@&				= "PowerSummonLineCheckReaction"

		[PowerSummonLineCheckMissedReaction]
		Rule		= "PowerSummonLineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalPlayUnsummonVFX"
		@@&			= "UnsummonShoggoth"
		@@&			= "SummonShoggoth"
		@@&			= "PlaySummonedShoggothVFX"

			[PowerSummonLineCheckMissedRule]
			Event			= "OnLineCheckMissed"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "SummonTagPE"

				[SummonTagPE]
				PEType	= "ConstantString"
				Value	= "Summon"

			[ConditionalPlayUnsummonVFX]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "SummonedShoggothPE"
			@@^Action		= "PlaySummonedShoggothVFX"

				[PlaySummonedShoggothVFX]
				ActionType		= "SendEvent"
				EventName		= "PlayParticleSystem"
				Recipient		= "SelfPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "ParticleSystem"
				@@^Value		= "SummonBurstFXPE"
				@@&Name			= "UseLocationOverride"
				@@^Value		= "TruePE"
				@@&Name			= "LocationOverride"
				@@^Value		= "SummonedShoggothLocationPE"

					[SummonBurstFXPE]
					PEType	= "ConstantString"
					Value	= "PS_SummonBurst"

					[SummonedShoggothLocationPE]
					PEType	= "EldGetLocation"
					Entity	= "SummonedShoggothPE"

			[UnsummonShoggoth]
			ActionType	= "SendEvent"
			EventName	= "Destroy"
			Recipient	= "SummonedShoggothPE"

				[SummonedShoggothPE]
				PEType	= "GetEntityByLabel"
				Label	= "SummonedShoggoth"

			[SummonShoggoth]
			ActionType			= "EldSpawnEntity"
			Entity				= "SummonedShoggoth"
			LocationOverridePE	= "SummonShoggothLocationPE"
			YawOnly				= true

				[SummonShoggothLocationPE]
				PEType	= "Add"
				InputA	= "HitLocationPE"
				InputB	= "SmallHitNormalPE"

		[PowerSummonLineCheckReaction]
		Rule		= "PowerSummonLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "UnsummonShoggoth"
		@@&			= "SummonShoggoth"

			[PowerSummonLineCheckRule]
			Event			= "OnLineCheck"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "SummonTagPE"

		[PowerSummonOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "FireSummonAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireSummonVFX"
		@@&			= "PlayFireSummonSFX"

			[FireSummonAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "Summon"

			[PlayFireSummonVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "SummonFlashPE"

				[SummonFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_SummonFlash"

			[PlayFireSummonSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "SummonSoundPE"

				[SummonSoundPE]
				PEType	= "ConstantString"
				Value	= "SummonFireSound"

[PowerLift]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerLiftParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerLiftReactions"
Owner			= "."
PEMap			= "PowerLiftPEMap"

	[PowerLiftParticles]
	Particles	= "PS_PowerLift"

	[PowerLiftPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerLiftCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerLiftIconPE"

		[PowerLiftIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-lift_NODXT.tga"

		[PowerLiftCostPE]
		PEType	= "ConstantInt"
		Value	= 1
		# For UI! Keep in sync!
		[PowerLift]
		PowerCost	= 1

	[PowerLiftReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerLiftOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"

		[PowerLiftOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "PowerLiftAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireLiftVFX"
		@@&			= "PlayFireLiftSFX"

			[PowerLiftAction]
			ActionType		= "SendEvent"
			EventName		= "UseJumpPower"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "JumpPowerImpulse"
			@@^Value		= "LiftPowerImpulsePE"

				[LiftPowerImpulsePE]
				PEType	= "ConstantFloat"
				# Compare to normal jump impulse at 10.0 and high jump at 14.0 (at time of writing).
				# This lets player mantle up to a height at 4m.
				Value	= 16.0

			[PlayFireLiftVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "LiftFlashPE"

				[LiftFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_LiftFlash"

			[PlayFireLiftSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "LiftSoundPE"

				[LiftSoundPE]
				PEType	= "ConstantString"
				Value	= "LiftFireSound"

[PowerBuild]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerBuildParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerBuildReactions"
Owner			= "."
PEMap			= "PowerBuildPEMap"

	[PowerBuildParticles]
	Particles	= "PS_PowerBuild"

	[PowerBuildPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerBuildCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerBuildIconPE"

		[PowerBuildIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-build_NODXT.tga"

		[PowerBuildCostPE]
		PEType	= "ConstantInt"
		Value	= 1
		# For UI! Keep in sync!
		[PowerBuild]
		PowerCost	= 1

	[PowerBuildReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerBuildOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerBuildOnBlockAddedReaction"

		[PowerBuildOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireBuildAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireBuildVFX"
		@@&			= "PlayFireBuildSFX"

			[FireBuildAction]
			ActionType	= "EldAddBlock"
			Source		= "OwnerPE"
			VoxelValue	= 127

			[PlayFireBuildVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "BuildFlashPE"

				[BuildFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_BuildFlash"

			[PlayFireBuildSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "BuildSoundPE"

				[BuildSoundPE]
				PEType	= "ConstantString"
				Value	= "BuildFireSound"

		[PowerBuildOnBlockAddedReaction]
		Rule		= "OnBlockAddedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "PlayBuildVFX"

			[OnBlockAddedRule]
			Event	= "OnBlockAdded"

			[PlayBuildVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "BuildBurstFXPE"
			@@&Name			= "UseLocationOverride"
			@@^Value		= "TruePE"
			@@&Name			= "LocationOverride"
			@@^Value		= "VoxelLocationPE"

				[BuildBurstFXPE]
				PEType	= "ConstantString"
				Value	= "PS_BuildBurst"

				[VoxelLocationPE]
				PEType	= "QueryActionStack"
				Key		= "VoxelLocation"

[PowerKnock]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerKnockParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerKnockReactions"
Owner			= "."
PEMap			= "PowerKnockPEMap"

	[PowerKnockParticles]
	Particles	= "PS_PowerKnock"

	[PowerKnockPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerKnockCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerKnockIconPE"

		[PowerKnockIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-knock_NODXT.tga"

		[PowerKnockCostPE]
		PEType	= "ConstantInt"
		Value	= 4
		# For UI! Keep in sync!
		[PowerKnock]
		PowerCost	= 4

	[PowerKnockReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerKnockOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerKnockLineCheckMissedReaction"
	@@&				= "PowerKnockLineCheckReaction"

		[PowerKnockOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireKnockAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireKnockVFX"
		@@&			= "PlayFireKnockSFX"

			[FireKnockAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "Knock"

			[PlayFireKnockVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "KnockFlashPE"

				[KnockFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_KnockFlash"

			[PlayFireKnockSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "KnockSoundPE"

				[KnockSoundPE]
				PEType	= "ConstantString"
				Value	= "KnockFireSound"

		[PowerKnockLineCheckMissedReaction]
		Rule		= "LineCheckMissedRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "PlayKnockVFX"
		@@&			= "PlayKnockSFX"
		@@&			= "PlayKnockAINoise"

		[PowerKnockLineCheckReaction]
		Rule		= "PowerKnockLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "ConditionalUnlockDoor"
		@@&			= "PlayKnockVFX"
		@@&			= "PlayKnockSFX"
		@@&			= "PlayKnockAINoise"

			[PowerKnockLineCheckRule]
			Event			= "OnLineCheck"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "KnockTagPE"

				[KnockTagPE]
				PEType	= "ConstantString"
				Value	= "Knock"

			[ConditionalUnlockDoor]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "IsHitEntityLockedDoorPE"
			@@^Action		= "UnlockHitEntityDoor"

				[IsHitEntityLockedDoorPE]
				PEType		= "PushContext"
				EntityPE	= "CheckedPE"
				Input		= "IsLockedDoorPE"

					[IsLockedDoorPE]
					PEType	= "AND"
					InputA	= "IsDoorPE"
					InputB	= "IsLockedPE"

						[IsDoorPE]
						PEType	= "QueryActionStack"
						Key		= "IsDoor"

				[UnlockHitEntityDoor]
				ActionType	= "SendEvent"
				EventName	= "Unlock"
				Recipient	= "CheckedPE"

			[PlayKnockVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "KnockBurstFXPE"
			@@&Name			= "UseLocationOverride"
			@@^Value		= "TruePE"
			@@&Name			= "LocationOverride"
			@@^Value		= "HitLocationPE"

				[KnockBurstFXPE]
				PEType	= "ConstantString"
				Value	= "PS_KnockBurst"

			[PlayKnockSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "KnockSFXPE"
			# Override contextual location
			@@&Name			= "Location"
			@@^Value		= "HitLocationPE"

				[KnockSFXPE]
				PEType	= "ConstantString"
				Value	= "KnockHitSound"

			[PlayKnockAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "HitLocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "KnockNoiseRadiusPE"

				[KnockNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 10.0

[PowerCloak]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerCloakParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerCloakReactions"
Owner			= "."
PEMap			= "PowerCloakPEMap"
VariableMap		= "."

	[PowerCloakParticles]
	Particles	= "PS_PowerCloak"

	[PowerCloakPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerCloakCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerCloakIconPE"

		[PowerCloakIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-cloak_NODXT.tga"

		[PowerCloakCostPE]
		PEType	= "ConstantInt"
		Value	= 10
		# For UI! Keep in sync!
		[PowerCloak]
		PowerCost	= 10

	[PowerCloakReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerCloakOnUnequippedReaction"
	@@&				= "PowerCloakOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerCloakTryCloakReaction"
	@@&				= "PowerCloakEndCloakReaction"

		# We need to stop the power when it's unequipped.
		# While it would be cool to activate it, switch powers,
		# and then have it run out in time, this power gets
		# destroyed when unequipped so it would never handle
		# the EndCloak event.
		[PowerCloakOnUnequippedReaction]
		Rule		= "OnUnequippedRule"
		NumActions	= &
		@ Action
		@@&			= "HidePowerHUD"
		@@&			= "ConditionalSetOwnerVisibleAction"
		@@&			= "StopOwnerCloakVFX"

		[PowerCloakOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireCloakAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireCloakVFX"
		@@&			= "PlayFireCloakSFX"

			[FireCloakAction]
			ActionType	= "SendEvent"
			EventName	= "TryCloak"
			Recipient	= "SelfPE"

			[PlayFireCloakVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "CloakFlashPE"

				[CloakFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_CloakFlash"

			[PlayFireCloakSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "CloakSoundPE"

				[CloakSoundPE]
				PEType	= "ConstantString"
				Value	= "CloakFireSound"

		[PowerCloakTryCloakReaction]
		Rule		= "PowerCloakTryCloakRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "EndCloakAction"
		@@&			= "UnqueueEndCloakAction"
		@@&			= "SetOwnerInvisibleAction"
		@@&			= "PlayOwnerCloakVFX"
		@@&			= "QueueEndCloakAction"

			[PowerCloakTryCloakRule]
			Event			= "TryCloak"
			# NOTE: Removed this condition now that power can be re-upped
			#NumConditions	= &
			#@ Condition
			#@@&				= "IsOwnerVisiblePE"

				[IsOwnerVisiblePE]
				PEType		= "PushContext"
				EntityPE	= "OwnerPE"
				Input		= "IsVisiblePE"

					[IsVisiblePE]
					PEType	= "QueryActionStack"
					Key		= "Visible"

			# End previous cloak, if any, so we can restart the power
			[EndCloakAction]
			ActionType		= "SendEvent"
			EventName		= "EndCloak"
			Recipient		= "SelfPE"

			# Unqueue the old end cloak event, so we'll last another n seconds
			[UnqueueEndCloakAction]
			ActionType		= "UnqueueEvent"
			VariableMapTag	= "EndCloak"

			[SetOwnerInvisibleAction]
			ActionType	= "SendEvent"
			EventName	= "SetInvisible"
			Recipient	= "OwnerPE"

			[PlayOwnerCloakVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "CloakedFXPE"
			@@&Name			= "Attached"
			@@^Value		= "TruePE"

				[CloakedFXPE]
				PEType	= "ConstantString"
				Value	= "PS_Cloaked"

			[QueueEndCloakAction]
			ActionType		= "SendEvent"
			EventName		= "EndCloak"
			Recipient		= "SelfPE"
			QueueEvent		= true
			DispatchDelay	= 10.0
			VariableMapTag	= "EndCloak"

		[PowerCloakEndCloakReaction]
		Rule		= "PowerCloakEndCloakRule"
		NumActions	= &
		@ Action
		@@&			= "ConditionalSetOwnerVisibleAction"
		@@&			= "StopOwnerCloakVFX"
		@@&			= "PlayEndCloakSFX"

			[PowerCloakEndCloakRule]
			Event	= "EndCloak"

			[ConditionalSetOwnerVisibleAction]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "IsOwnerAlivePE"
			@@^Action		= "SetOwnerVisibleAction"

				[IsOwnerAlivePE]
				PEType		= "PushContext"
				EntityPE	= "OwnerPE"
				Input		= "IsAlivePE"

					[IsAlivePE]
					PEType	= "QueryActionStack"
					Key		= "IsAlive"

				[SetOwnerVisibleAction]
				ActionType	= "SendEvent"
				EventName	= "SetVisible"
				Recipient	= "OwnerPE"

			[StopOwnerCloakVFX]
			ActionType		= "SendEvent"
			EventName		= "StopParticleSystem"
			Recipient		= "OwnerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "CloakedFXPE"

			[PlayEndCloakSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "EndCloakSoundPE"

				[EndCloakSoundPE]
				PEType	= "ConstantString"
				Value	= "CloakEndSound"

[PowerHypnotize]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerHypnotizeParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerHypnotizeReactions"
Owner			= "."
PEMap			= "PowerHypnotizePEMap"

	[PowerHypnotizeParticles]
	Particles	= "PS_PowerHypnotize"

	[PowerHypnotizePEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerHypnotizeCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerHypnotizeIconPE"

		[PowerHypnotizeIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-hypnotize_NODXT.tga"

		[PowerHypnotizeCostPE]
		PEType	= "ConstantInt"
		Value	= 7
		# For UI! Keep in sync!
		[PowerHypnotize]
		PowerCost	= 7

	[PowerHypnotizeReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerHypnotizeOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerHypnotizeLineCheckReaction"

		[PowerHypnotizeOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireHypnotizeAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireHypnotizeVFX"
		@@&			= "PlayFireHypnotizeSFX"

			[FireHypnotizeAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "Hypnotize"

			[PlayFireHypnotizeVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "HypnotizeFlashPE"

				[HypnotizeFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_HypnotizeFlash"

			[PlayFireHypnotizeSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "HypnotizeSoundPE"

				[HypnotizeSoundPE]
				PEType	= "ConstantString"
				Value	= "HypnotizeFireSound"

		[PowerHypnotizeLineCheckReaction]
		Rule		= "PowerHypnotizeLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "PowerHypnotizeNotify"

			[PowerHypnotizeLineCheckRule]
			Event			= "OnLineCheck"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "HypnotizeTagPE"
			NumConditions	= &
			@ Condition
			@@&				= "GetCheckedFactionPE"			# Validate that the checked entity has a faction
			@@&				= "CheckedIsNotOwnerFactionPE"

				[HypnotizeTagPE]
				PEType	= "ConstantString"
				Value	= "Hypnotize"

				[CheckedIsNotOwnerFactionPE]
				PEType	= "Conditional"
				Op		= "NE"
				InputA	= "GetOwnerFactionPE"
				InputB	= "GetCheckedFactionPE"

					[GetOwnerFactionPE]
					PEType		= "EldGetFaction"
					EntityPE	= "OwnerPE"

					[GetCheckedFactionPE]
					PEType		= "EldGetFaction"
					EntityPE	= "CheckedPE"

			[PowerHypnotizeNotify]
			ActionType		= "SendEvent"
			EventName		= "OnHypnotized"
			EventOwner		= "CheckedPE"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NewFaction"
			@@^Value		= "GetOwnerFactionPE"

# Rm
[PowerBlast]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerBlastParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerBlastReactions"
Owner			= "."
PEMap			= "PowerBlastPEMap"

	[PowerBlastParticles]
	Particles	= "PS_PowerBlast"

	[PowerBlastPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerBlastCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerBlastIconPE"

		[PowerBlastIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-blast_NODXT.tga"

		[PowerBlastCostPE]
		PEType	= "ConstantInt"
		Value	= 10
		# For UI! Keep in sync!
		[PowerBlast]
		PowerCost	= 10

	[PowerBlastReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerBlastOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerBlastLineCheckReaction"

		[PowerBlastOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireBlastAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireBlastVFX"
		@@&			= "PlayFireBlastSFX"

			[FireBlastAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "Blast"

			[PlayFireBlastVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "BlastFlashPE"

				[BlastFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_BlastFlash"

			[PlayFireBlastSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "BlastSoundPE"

				[BlastSoundPE]
				PEType	= "ConstantString"
				Value	= "BlastFireSound"

		[PowerBlastLineCheckReaction]
		Rule		= "PowerBlastLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "SpawnBlast"

			[PowerBlastLineCheckRule]
			Event			= "OnLineCheck"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "BlastTagPE"
			NumConditions	= &
			@ Condition
			@@&				= "GetCheckedFactionPE"	# Validate that the checked entity has a faction, so it is a living character

				[BlastTagPE]
				PEType	= "ConstantString"
				Value	= "Blast"

			[SpawnBlast]
			ActionType			= "EldSpawnEntity"
			Entity				= "Blast"
			LocationOverridePE	= "BlastLocationPE"

				[BlastLocationPE]
				PEType	= "Add"
				InputA	= "CheckedLocationPE"
				InputB	= "BlastLocationOffsetPE"

					[BlastLocationOffsetPE]
					PEType	= "ConstantVector"
					ValueZ	= -0.05	# Very small, we don't want to embed in ground, we just want it below their root

[Blast]
EldTransform	= "."
EldSound		= "."
EldParticles	= "."
Owner			= "."
Reactions		= "BlastReactions"

	[BlastReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "BlastOnSpawnedReaction"
	@@&				= "BlastSphereCheckReaction"

		[BlastOnSpawnedReaction]
		Rule		= "OnSpawnedQueuedRule"	# Give us time to get our owner before sphere check
		NumActions	= &
		@ Action
		# NOTE: Damage entities before world, which means
		# walls which get destroyed can still shield damage.
		# Only reusing dynamite actions for FX, so I can tune radius differently if desired
		@@&			= "BlastSphereCheck"
		@@&			= "BlastDamageWorld"
		@@&			= "PlayBlastAINoise"
		@@&			= "PlayDynamiteShrapnelVFX"
		@@&			= "PlayDynamiteSmokeVFX"
		@@&			= "PlayDynamiteExplosionSFX"
		@@&			= "DynamiteQueueDestroySelf"

			[BlastSphereCheck]
			ActionType	= "EldCheckSphere"
			Radius		= 3.0
			CheckTag	= "Blast"

			[BlastDamageWorld]
			ActionType	= "EldDamageWorld"
			Radius		= 2.5

			[PlayBlastAINoise]
			ActionType		= "SendEvent"
			EventName		= "OnAINoise"
			NumParameters	= &
			@ Parameter
			@@&Name			= "NoiseEntity"
			@@^Value		= "OwnerPE"
			@@&Name			= "NoiseLocation"
			@@^Value		= "LocationPE"
			@@&Name			= "NoiseRadius"
			@@^Value		= "BlastNoiseRadiusPE"

				[BlastNoiseRadiusPE]
				PEType	= "ConstantFloat"
				Value	= 20.0

		[BlastSphereCheckReaction]
		Rule		= "BlastSphereCheckRule"
		NumActions	= &
		@ Action
		@@&			= "BlastDealDamage"
		@@&			= "BlastApplyImpulse"

			[BlastSphereCheckRule]
			Event		= "OnSphereCheck"
			NumCriteria	= &
			@ Criterion
			@@&Name		= "CheckTag"
			@@^Min		= "BlastTagPE"

			[BlastDealDamage]
			ActionType		= "SendEvent"
			EventName		= "TakeDamage"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "DamageAmount"
			@@^Value		= "BlastDamagePE"
			@@&Name			= "Damager"
			@@^Value		= "OwnerPE"
			@@&Name			= "DamageType"
			@@^Value		= "ExplosiveDamageTypePE"

				[BlastDamagePE]
				PEType		= "StatMod"
				EntityPE	= "OwnerPE"
				StatName	= "DamageAmount"
				Input		= "BlastDamageBasePE"

					[BlastDamageBasePE]
					PEType	= "ConstantInt"
					Value	= 2

			[BlastApplyImpulse]
			ActionType		= "SendEvent"
			EventName		= "ApplyImpulse"
			Recipient		= "CheckedPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Impulse"
			@@^Value		= "BlastImpulsePE"

				[BlastImpulsePE]
				PEType	= "Mul"
				InputA	= "BlastImpulseNormalPE"
				InputB	= "BlastImpulseScalar"

					[BlastImpulseNormalPE]
					PEType	= "Normal"
					Input	= "BlastImpulseOffsetPE"

						[BlastImpulseOffsetPE]
						PEType	= "Sub"
						InputA	= "CheckedLocationPE"
						InputB	= "LocationPE"

					[BlastImpulseScalar]
					PEType	= "ConstantFloat"
					Value	= 20.0
# Rm

[PowerSoulTrap]
EldTransform	= "LeftHandTransform"
EldUsable		= "PowerUsable"
EldMesh			= "PowerMesh"
EldParticles	= "PowerSoulTrapParticles"
EldSound		= "."
EldItem			= "PowerItem"
Reactions		= "PowerSoulTrapReactions"
Owner			= "."
PEMap			= "PowerSoulTrapPEMap"

	[PowerSoulTrapParticles]
	Particles	= "PS_PowerSoulTrap"

	[PowerSoulTrapPEMap]
	NumPEs	= &
	@ PE
	@@&Key	= "PowerCost"
	@@^Def	= "PowerSoulTrapCostPE"
	@@&Key	= "PowerIcon"
	@@^Def	= "PowerSoulTrapIconPE"

		[PowerSoulTrapIconPE]
		PEType	= "ConstantString"
		Value	= "Textures/UI/power-hud-soultrap_NODXT.tga"

		[PowerSoulTrapCostPE]
		PEType	= "ConstantInt"
		Value	= 10
		# For UI! Keep in sync!
		[PowerSoulTrap]
		PowerCost	= 10

	[PowerSoulTrapReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "PowerOnEquippedReaction"
	@@&				= "PowerOnUnequippedReaction"
	@@&				= "PowerOnInitializedReaction"
	@@&				= "PowerSoulTrapOnUsedReaction"
	@@&				= "PowerOnUsedBrokeReaction"
	@@&				= "PowerSoulTrapLineCheckReaction"

		[PowerSoulTrapOnUsedReaction]
		Rule		= "PowerOnUsedRule"
		NumActions	= &
		@ Action
		@@&			= "FireSoulTrapAction"
		@@&			= "PlayFireHandAnim"
		@@&			= "PlayFireSoulTrapVFX"
		@@&			= "PlayFireSoulTrapSFX"

			[FireSoulTrapAction]
			ActionType	= "EldCheckLine"
			CheckTag	= "SoulTrap"

			[PlayFireSoulTrapVFX]
			ActionType		= "SendEvent"
			EventName		= "PlayParticleSystem"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "ParticleSystem"
			@@^Value		= "SoulTrapFlashPE"

				[SoulTrapFlashPE]
				PEType	= "ConstantString"
				Value	= "PS_SoulTrapFlash"

			[PlayFireSoulTrapSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "SelfPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "SoulTrapSoundPE"

				[SoulTrapSoundPE]
				PEType	= "ConstantString"
				Value	= "SoulTrapFireSound"

		[PowerSoulTrapLineCheckReaction]
		Rule		= "PowerSoulTrapLineCheckRule"
		NumActions	= &
		@ Action
		@@&			= "PowerRemoveMoney"
		@@&			= "PowerSoulTrapNotify"

			[PowerSoulTrapLineCheckRule]
			Event			= "OnLineCheck"
			NumCriteria		= &
			@ Criterion
			@@&Name			= "CheckTag"
			@@^Min			= "SoulTrapTagPE"
			NumConditions	= &
			@ Condition
			@@&				= "GetCheckedFactionPE"			# Validate that the checked entity has a faction
			@@&				= "CheckedIsNotOwnerFactionPE"

				[SoulTrapTagPE]
				PEType	= "ConstantString"
				Value	= "SoulTrap"

			[PowerSoulTrapNotify]
			ActionType		= "SendEvent"
			EventName		= "OnSoulTrapped"
			EventOwner		= "CheckedPE"
			Recipient		= "CheckedPE"

[PowerNone]
EldTransform	= "LeftHandTransform"
EldMesh			= "PowerMesh"
EldItem			= "PowerItem"
Reactions		= "PowerNoneReactions"
Owner			= "."

	[PowerNoneReactions]
	NumReactions = &
	@ Reaction
	@@& = "PowerNoneOnEquippedReaction"

		[PowerNoneOnEquippedReaction]
		Rule		= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayIdleHandAnim"

# ****************************************************************
# ***************************** Food *****************************
# ****************************************************************

[MeatForSale]
Extends			= "Meat"
EldFrobbable	= "MeatForSaleFrobbable"
EldPickup		= "MeatForSalePickup"
Reactions		= "MeatForSaleReactions"

	[MeatForSaleFrobbable]
	Extends		= "MeatFrobbable"
	FrobVerb	= "Examine"

	[MeatForSalePickup]
	Price			= 15
	FriendlyName	= "Meat"
	FriendlyDesc	= "MeatDesc"

	[MeatForSaleReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "MeatForSaleOnObtainedReaction"

		[MeatForSaleOnObtainedReaction]
		Rule		= "OnObtainedRule"
		NumActions	= &
		@ Action
		@@&			= "GiveHealthToBuyer"
		@@&			= "ConditionalShowFoodBook"
		@@&			= "PlayMeatForSaleSFX"
		@@&			= "DestroySelfAction"

			[GiveHealthToBuyer]
			ActionType		= "SendEvent"
			EventName		= "GiveHealth"
			Recipient		= "BuyerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "HealthAmount"
			@@^Value		= "MeatHealthForSaleStatModPE"

				# Rm
				[MeatHealthForSaleStatModPE]
				PEType		= "StatMod"
				EntityPE	= "BuyerPE"
				StatName	= "FoodHealth"
				Input		= "MeatHealthPE"
				# Rm

			[PlayMeatForSaleSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "BuyerPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "MeatSFXPE"

[Meat]
EldTransform	= "MeatTransform"
EldCollision	= "MeatCollision"
EldMesh			= "MeatMesh"
EldDropShadow	= "MeatDropShadow"
EldFrobbable	= "MeatFrobbable"
Reactions		= "MeatReactions"

	[MeatTransform]
	UseGravity	= true

	[MeatCollision]
	HalfExtentsXY	= 0.25
	HalfExtentsZ	= 0.25
	
	[MeatMesh]
	Mesh	= "Meshes/meat.cms"

	[MeatDropShadow]
	UseMeshCenter	= true
	Radius			= 0.3
	Alpha			= 0.5
	ShadowFloatZ	= 0.01

	[MeatFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FriendlyName	= "Meat"
	FrobVerb		= "Eat"

	[MeatReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "MeatOnFrobbedReaction"

		[MeatOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "MeatGiveHealth"
		@@&			= "ConditionalShowFoodBook"
		@@&			= "PlayMeatSFX"
		@@&			= "DestroySelfAction"

			[PlayMeatSFX]
			ActionType		= "SendEvent"
			EventName		= "PlaySound"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "Sound"
			@@^Value		= "MeatSFXPE"

				[MeatSFXPE]
				PEType	= "ConstantString"
				Value	= "MeatSound"

			[ConditionalShowFoodBook]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "HasNotReadFoodBook"
			@@^Action		= "TeachFoodBook"

				[HasNotReadFoodBook]
				PEType	= "NOT"
				Input	= "HasReadFoodBook"

					[HasReadFoodBook]
					PEType	= "EldGetPersistentVar"
					Key		= "HasReadFoodBook"

				[TeachFoodBook]
				ActionType	= "Composite"
				NumActions	= &
				@ Action
				@@&			= "ShowFoodBook"
				@@&			= "MarkFoodBookRead"

					[MarkFoodBookRead]
					ActionType	= "EldSetPersistentVar"
					Key			= "HasReadFoodBook"
					ValuePE		= "TruePE"

			[MeatGiveHealth]
			ActionType		= "SendEvent"
			EventName		= "GiveHealth"
			Recipient		= "FrobberPE"
			NumParameters	= &
			@ Parameter
			@@&Name			= "HealthAmount"
			@@^Value		= "MeatHealthStatModPE"	# Rm

				# Rm
				[MeatHealthStatModPE]
				PEType		= "StatMod"
				EntityPE	= "FrobberPE"
				StatName	= "FoodHealth"
				Input		= "MeatHealthPE"
				# Rm

					[MeatHealthPE]
					PEType	= "ConstantInt"
					Value	= 1

[BadMeat]
Extends			= "Meat"
EldMesh			= "BadMeatMesh"
EldFrobbable	= "BadMeatFrobbable"
Reactions		= "BadMeatReactions"

	[BadMeatMesh]
	Extends				= "MeatMesh"
	TextureOverride	= "Textures/meat-bad_NODXT.tga"

	[BadMeatFrobbable]
	Extends			= "MeatFrobbable"
	FriendlyName	= "BadMeat"
	FrobVerb		= "EatUnsure"

	[BadMeatReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "BadMeatOnFrobbedReaction"

		[BadMeatOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "BadMeatSelectResult"
		@@&			= "ConditionalShowFoodBook"
		@@&			= "PlayMeatSFX"
		@@&			= "DestroySelfAction"

			[BadMeatSelectResult]
			ActionType		= "Selector"
			NumSelections	= &
			@ Selection
			@@&Condition	= "BadMeatPoisonChancePE"
			@@^Action		= "BadMeatApplyDamage"
			@@&Condition	= "TruePE"
			@@^Action		= "MeatGiveHealth"

				[BadMeatPoisonChancePE]
				PEType	= "EldHardSwitch"
				Normal	= "BadMeatPoisonChanceNormalPE"
				Hard	= "BadMeatPoisonChanceHardPE"

					[BadMeatPoisonChanceNormalPE]
					PEType		= "RandomBool"
					Probability	= 0.333

					[BadMeatPoisonChanceHardPE]
					PEType		= "RandomBool"
					Probability	= 0.4

				[BadMeatApplyDamage]
				ActionType		= "SendEvent"
				EventName		= "TakeDamage"
				Recipient		= "FrobberPE"
				NumParameters	= &
				@ Parameter
				@@&Name			= "DamageAmount"
				@@^Value		= "MeatDamagePE"
				@@&Name			= "Damager"
				@@^Value		= "SelfPE"
				@@&Name			= "DamageType"
				@@^Value		= "PoisonDamageTypePE"

					[MeatDamagePE]
					PEType	= "ConstantInt"
					Value	= 1

					[PoisonDamageTypePE]
					PEType	= "ConstantString"
					Value	= "Poison"

[AirplaneKeys]
EldItem			= "AirplaneKeysItem"
Owner			= "."
Reactions		= "AirplaneKeysReactions"

	[AirplaneKeysItem]
	Slot		= "AirplaneKeys"

	[AirplaneKeysReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "AirplaneKeysOnInitialized"
	@@&				= "AirplaneKeysOnEquipped"

		[AirplaneKeysOnInitialized]
		Rule	 	= "OnInitializedQueuedRule"
		NumActions	= &
		@ Action
		@@&			= "GivePlayerAirplaneKeys"
		@@&			= "ShowAirplaneKeysHUD"

			[ShowAirplaneKeysHUD]
			ActionType	= "UIShowHideWidget"
			Screen		= "PauseScreen"
			Widget		= "AirplaneKeysImg"
			Hidden		= false

			[GivePlayerAirplaneKeys]
			ActionType		= "SetVariable"
			EntityPE		= "PlayerPE"
			VariableName	= "AirplaneKeys"
			ValuePE			= "TruePE"

		[AirplaneKeysOnEquipped]
		Rule	 	= "OnEquippedRule"
		NumActions	= &
		@ Action
		@@&			= "GivePlayerAirplaneKeys"
		@@&			= "ShowAirplaneKeysHUD"

[AirplaneKeysPickup]
EldTransform	= "."
EldMesh			= "AirplaneKeysPickupMesh"
EldLight		= "AirplaneKeysPickupLight"
EldFrobbable	= "AirplaneKeysPickupFrobbable"
EldParticles	= "AirplaneKeysPickupParticles"
EldPickup		= "AirplaneKeysPickupPickup"
Reactions		= "AirplaneKeysPickupReactions"

	[AirplaneKeysPickupMesh]
	Mesh				= "Meshes/airplane-keys.cms"
	ConstantIrradianceR	= 0.5
	ConstantIrradianceG	= 0.5
	ConstantIrradianceB	= 0.5

	[AirplaneKeysPickupLight]
	Radius	= 3.0
	ColorR	= 0.5
	ColorG	= 0.5
	ColorB	= 1.0

	[AirplaneKeysPickupFrobbable]
	UseMeshExtents	= true
	ExtentsFatten	= 0.05
	FrobVerb		= "PickUp"
	FriendlyName	= "PlaneKeys"

	[AirplaneKeysPickupParticles]
	Particles	= "PS_AirplaneKeysSparkles"

	[AirplaneKeysPickupPickup]
	GiveItem = "AirplaneKeys"

	[AirplaneKeysPickupReactions]
	NumReactions	= &
	@ Reaction
	@@&				= "AirplaneKeysPickupOnFrobbedReaction"

		[AirplaneKeysPickupOnFrobbedReaction]
		Rule		= "OnFrobbedRule"
		NumActions	= &
		@ Action
		@@&			= "PlayKeySFX"
		@@&			= "NotifyYogAction"

			[NotifyYogAction]
			ActionType	= "SendEvent"
			EventName	= "KeysTaken"
			Recipient	= "YogPE"
			EventOwner	= "YogPE"

				[YogPE]
				PEType	= "GetEntityByLabel"
				Label	= "Yog"

# ****************************************************************
# Gear book scripts. I'm just putting it all at the bottom here
# because it's going to be a mess inserting it throughout this file.
# Add the "OnShow...BookReaction" to the item's reactions, and add
# the "QueueConditionalShow...Book" action to where ConditionalShowGearBook
# is invoked.
# ****************************************************************

[QueueConditionalShowSandalsBook]
ActionType	= "SendEvent"
EventName	= "OnShowSandalsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSandalsBookReaction]
Rule		= "OnShowSandalsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSandalsBook"

	[OnShowSandalsBookRule]
	Event	= "OnShowSandalsBook"

	[ConditionalShowSandalsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSandalsBook"
	@@^Action		= "TeachSandalsBook"

		[HasNotReadSandalsBook]
		PEType	= "NOT"
		Input	= "HasReadSandalsBook"

			[HasReadSandalsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSandalsBook"

		[TeachSandalsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSandalsBook"
		@@&			= "MarkSandalsBookRead"

			[ShowSandalsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Sandals"

			[MarkSandalsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSandalsBook"
			ValuePE		= "TruePE"

[QueueConditionalShowJumpBootsBook]
ActionType	= "SendEvent"
EventName	= "OnShowJumpBootsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowJumpBootsBookReaction]
Rule		= "OnShowJumpBootsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowJumpBootsBook"

	[OnShowJumpBootsBookRule]
	Event	= "OnShowJumpBootsBook"

	[ConditionalShowJumpBootsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadJumpBootsBook"
	@@^Action		= "TeachJumpBootsBook"

		[HasNotReadJumpBootsBook]
		PEType	= "NOT"
		Input	= "HasReadJumpBootsBook"

			[HasReadJumpBootsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadJumpBootsBook"

		[TeachJumpBootsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowJumpBootsBook"
		@@&			= "MarkJumpBootsBookRead"

			[ShowJumpBootsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_JumpBoots"

			[MarkJumpBootsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadJumpBootsBook"
			ValuePE		= "TruePE"

[QueueConditionalShowSpeedBootsBook]
ActionType	= "SendEvent"
EventName	= "OnShowSpeedBootsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSpeedBootsBookReaction]
Rule		= "OnShowSpeedBootsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSpeedBootsBook"

	[OnShowSpeedBootsBookRule]
	Event	= "OnShowSpeedBootsBook"

	[ConditionalShowSpeedBootsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSpeedBootsBook"
	@@^Action		= "TeachSpeedBootsBook"

		[HasNotReadSpeedBootsBook]
		PEType	= "NOT"
		Input	= "HasReadSpeedBootsBook"

			[HasReadSpeedBootsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSpeedBootsBook"

		[TeachSpeedBootsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSpeedBootsBook"
		@@&			= "MarkSpeedBootsBookRead"

			[ShowSpeedBootsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_SpeedBoots"

			[MarkSpeedBootsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSpeedBootsBook"
			ValuePE		= "TruePE"

[QueueConditionalShowQuietBootsBook]
ActionType	= "SendEvent"
EventName	= "OnShowQuietBootsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowQuietBootsBookReaction]
Rule		= "OnShowQuietBootsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowQuietBootsBook"

	[OnShowQuietBootsBookRule]
	Event	= "OnShowQuietBootsBook"

	[ConditionalShowQuietBootsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadQuietBootsBook"
	@@^Action		= "TeachQuietBootsBook"

		[HasNotReadQuietBootsBook]
		PEType	= "NOT"
		Input	= "HasReadQuietBootsBook"

			[HasReadQuietBootsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadQuietBootsBook"

		[TeachQuietBootsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowQuietBootsBook"
		@@&			= "MarkQuietBootsBookRead"

			[ShowQuietBootsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_QuietBoots"

			[MarkQuietBootsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadQuietBootsBook"
			ValuePE		= "TruePE"

# Rm
[QueueConditionalShowDressBootsBook]
ActionType	= "SendEvent"
EventName	= "OnShowDressBootsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowDressBootsBookReaction]
Rule		= "OnShowDressBootsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowDressBootsBook"

	[OnShowDressBootsBookRule]
	Event	= "OnShowDressBootsBook"

	[ConditionalShowDressBootsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadDressBootsBook"
	@@^Action		= "TeachDressBootsBook"

		[HasNotReadDressBootsBook]
		PEType	= "NOT"
		Input	= "HasReadDressBootsBook"

			[HasReadDressBootsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadDressBootsBook"

		[TeachDressBootsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowDressBootsBook"
		@@&			= "MarkDressBootsBookRead"

			[ShowDressBootsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_DressBoots"

			[MarkDressBootsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadDressBootsBook"
			ValuePE		= "TruePE"
# Rm

[QueueConditionalShowClimbingBootsBook]
ActionType	= "SendEvent"
EventName	= "OnShowClimbingBootsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowClimbingBootsBookReaction]
Rule		= "OnShowClimbingBootsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowClimbingBootsBook"

	[OnShowClimbingBootsBookRule]
	Event	= "OnShowClimbingBootsBook"

	[ConditionalShowClimbingBootsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadClimbingBootsBook"
	@@^Action		= "TeachClimbingBootsBook"

		[HasNotReadClimbingBootsBook]
		PEType	= "NOT"
		Input	= "HasReadClimbingBootsBook"

			[HasReadClimbingBootsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadClimbingBootsBook"

		[TeachClimbingBootsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowClimbingBootsBook"
		@@&			= "MarkClimbingBootsBookRead"

			[ShowClimbingBootsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_ClimbingBoots"

			[MarkClimbingBootsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadClimbingBootsBook"
			ValuePE		= "TruePE"

[QueueConditionalShowLocksmithKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowLocksmithKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowLocksmithKitBookReaction]
Rule		= "OnShowLocksmithKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowLocksmithKitBook"

	[OnShowLocksmithKitBookRule]
	Event	= "OnShowLocksmithKitBook"

	[ConditionalShowLocksmithKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadLocksmithKitBook"
	@@^Action		= "TeachLocksmithKitBook"

		[HasNotReadLocksmithKitBook]
		PEType	= "NOT"
		Input	= "HasReadLocksmithKitBook"

			[HasReadLocksmithKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadLocksmithKitBook"

		[TeachLocksmithKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowLocksmithKitBook"
		@@&			= "MarkLocksmithKitBookRead"

			[ShowLocksmithKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_LocksmithKit"
			IsDynamic	= true

			[MarkLocksmithKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadLocksmithKitBook"
			ValuePE		= "TruePE"

[QueueConditionalShowMedicalKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowMedicalKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowMedicalKitBookReaction]
Rule		= "OnShowMedicalKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowMedicalKitBook"

	[OnShowMedicalKitBookRule]
	Event	= "OnShowMedicalKitBook"

	[ConditionalShowMedicalKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadMedicalKitBook"
	@@^Action		= "TeachMedicalKitBook"

		[HasNotReadMedicalKitBook]
		PEType	= "NOT"
		Input	= "HasReadMedicalKitBook"

			[HasReadMedicalKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadMedicalKitBook"

		[TeachMedicalKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowMedicalKitBook"
		@@&			= "MarkMedicalKitBookRead"

			[ShowMedicalKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_MedicalKit"
			IsDynamic	= true

			[MarkMedicalKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadMedicalKitBook"
			ValuePE		= "TruePE"

[QueueConditionalShowTinningKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowTinningKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowTinningKitBookReaction]
Rule		= "OnShowTinningKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowTinningKitBook"

	[OnShowTinningKitBookRule]
	Event	= "OnShowTinningKitBook"

	[ConditionalShowTinningKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadTinningKitBook"
	@@^Action		= "TeachTinningKitBook"

		[HasNotReadTinningKitBook]
		PEType	= "NOT"
		Input	= "HasReadTinningKitBook"

			[HasReadTinningKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadTinningKitBook"

		[TeachTinningKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowTinningKitBook"
		@@&			= "MarkTinningKitBookRead"

			[ShowTinningKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_TinningKit"
			IsDynamic	= true

			[MarkTinningKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadTinningKitBook"
			ValuePE		= "TruePE"

# Rm ---------------------------------------------------------------------------------------
[QueueConditionalShowSmeltingKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowSmeltingKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSmeltingKitBookReaction]
Rule		= "OnShowSmeltingKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSmeltingKitBook"

	[OnShowSmeltingKitBookRule]
	Event	= "OnShowSmeltingKitBook"

	[ConditionalShowSmeltingKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSmeltingKitBook"
	@@^Action		= "TeachSmeltingKitBook"

		[HasNotReadSmeltingKitBook]
		PEType	= "NOT"
		Input	= "HasReadSmeltingKitBook"

			[HasReadSmeltingKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSmeltingKitBook"

		[TeachSmeltingKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSmeltingKitBook"
		@@&			= "MarkSmeltingKitBookRead"

			[ShowSmeltingKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_SmeltingKit"
			IsDynamic	= true

			[MarkSmeltingKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSmeltingKitBook"
			ValuePE		= "TruePE"
# Rm ---------------------------------------------------------------------------------------

[QueueConditionalShowCampingKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowCampingKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowCampingKitBookReaction]
Rule		= "OnShowCampingKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowCampingKitBook"

	[OnShowCampingKitBookRule]
	Event	= "OnShowCampingKitBook"

	[ConditionalShowCampingKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadCampingKitBook"
	@@^Action		= "TeachCampingKitBook"

		[HasNotReadCampingKitBook]
		PEType	= "NOT"
		Input	= "HasReadCampingKitBook"

			[HasReadCampingKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadCampingKitBook"

		[TeachCampingKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowCampingKitBook"
		@@&			= "MarkCampingKitBookRead"

			[ShowCampingKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_CampingKit"
			IsDynamic	= true

			[MarkCampingKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadCampingKitBook"
			ValuePE		= "TruePE"

[QueueConditionalShowConsecrationKitBook]
ActionType	= "SendEvent"
EventName	= "OnShowConsecrationKitBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowConsecrationKitBookReaction]
Rule		= "OnShowConsecrationKitBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowConsecrationKitBook"

	[OnShowConsecrationKitBookRule]
	Event	= "OnShowConsecrationKitBook"

	[ConditionalShowConsecrationKitBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadConsecrationKitBook"
	@@^Action		= "TeachConsecrationKitBook"

		[HasNotReadConsecrationKitBook]
		PEType	= "NOT"
		Input	= "HasReadConsecrationKitBook"

			[HasReadConsecrationKitBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadConsecrationKitBook"

		[TeachConsecrationKitBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowConsecrationKitBook"
		@@&			= "MarkConsecrationKitBookRead"

			[ShowConsecrationKitBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_ConsecrationKit"

			[MarkConsecrationKitBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadConsecrationKitBook"
			ValuePE		= "TruePE"

[QueueConditionalShowCompassBook]
ActionType	= "SendEvent"
EventName	= "OnShowCompassBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowCompassBookReaction]
Rule		= "OnShowCompassBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowCompassBook"

	[OnShowCompassBookRule]
	Event	= "OnShowCompassBook"

	[ConditionalShowCompassBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadCompassBook"
	@@^Action		= "TeachCompassBook"

		[HasNotReadCompassBook]
		PEType	= "NOT"
		Input	= "HasReadCompassBook"

			[HasReadCompassBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadCompassBook"

		[TeachCompassBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowCompassBook"
		@@&			= "MarkCompassBookRead"

			[ShowCompassBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Compass"

			[MarkCompassBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadCompassBook"
			ValuePE		= "TruePE"

[QueueConditionalShowAmuletBook]
ActionType	= "SendEvent"
EventName	= "OnShowAmuletBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowAmuletBookReaction]
Rule		= "OnShowAmuletBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowAmuletBook"

	[OnShowAmuletBookRule]
	Event	= "OnShowAmuletBook"

	[ConditionalShowAmuletBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadAmuletBook"
	@@^Action		= "TeachAmuletBook"

		[HasNotReadAmuletBook]
		PEType	= "NOT"
		Input	= "HasReadAmuletBook"

			[HasReadAmuletBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadAmuletBook"

		[TeachAmuletBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowAmuletBook"
		@@&			= "MarkAmuletBookRead"

			[ShowAmuletBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Amulet"

			[MarkAmuletBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadAmuletBook"
			ValuePE		= "TruePE"

[QueueConditionalShowCharmBook]
ActionType	= "SendEvent"
EventName	= "OnShowCharmBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowCharmBookReaction]
Rule		= "OnShowCharmBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowCharmBook"

	[OnShowCharmBookRule]
	Event	= "OnShowCharmBook"

	[ConditionalShowCharmBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadCharmBook"
	@@^Action		= "TeachCharmBook"

		[HasNotReadCharmBook]
		PEType	= "NOT"
		Input	= "HasReadCharmBook"

			[HasReadCharmBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadCharmBook"

		[TeachCharmBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowCharmBook"
		@@&			= "MarkCharmBookRead"

			[ShowCharmBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Charm"

			[MarkCharmBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadCharmBook"
			ValuePE		= "TruePE"

[QueueConditionalShowTalismanBook]
ActionType	= "SendEvent"
EventName	= "OnShowTalismanBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowTalismanBookReaction]
Rule		= "OnShowTalismanBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowTalismanBook"

	[OnShowTalismanBookRule]
	Event	= "OnShowTalismanBook"

	[ConditionalShowTalismanBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadTalismanBook"
	@@^Action		= "TeachTalismanBook"

		[HasNotReadTalismanBook]
		PEType	= "NOT"
		Input	= "HasReadTalismanBook"

			[HasReadTalismanBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadTalismanBook"

		[TeachTalismanBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowTalismanBook"
		@@&			= "MarkTalismanBookRead"

			[ShowTalismanBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Talisman"

			[MarkTalismanBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadTalismanBook"
			ValuePE		= "TruePE"

# Rm
[QueueConditionalShowSupplementsBook]
ActionType	= "SendEvent"
EventName	= "OnShowSupplementsBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSupplementsBookReaction]
Rule		= "OnShowSupplementsBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSupplementsBook"

	[OnShowSupplementsBookRule]
	Event	= "OnShowSupplementsBook"

	[ConditionalShowSupplementsBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSupplementsBook"
	@@^Action		= "TeachSupplementsBook"

		[HasNotReadSupplementsBook]
		PEType	= "NOT"
		Input	= "HasReadSupplementsBook"

			[HasReadSupplementsBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSupplementsBook"

		[TeachSupplementsBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSupplementsBook"
		@@&			= "MarkSupplementsBookRead"

			[ShowSupplementsBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Supplements"

			[MarkSupplementsBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSupplementsBook"
			ValuePE		= "TruePE"
# Rm

[QueueConditionalShowSoapstoneBook]
ActionType	= "SendEvent"
EventName	= "OnShowSoapstoneBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSoapstoneBookReaction]
Rule		= "OnShowSoapstoneBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSoapstoneBook"

	[OnShowSoapstoneBookRule]
	Event	= "OnShowSoapstoneBook"

	[ConditionalShowSoapstoneBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSoapstoneBook"
	@@^Action		= "TeachSoapstoneBook"

		[HasNotReadSoapstoneBook]
		PEType	= "NOT"
		Input	= "HasReadSoapstoneBook"

			[HasReadSoapstoneBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSoapstoneBook"

		[TeachSoapstoneBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSoapstoneBook"
		@@&			= "MarkSoapstoneBookRead"

			[ShowSoapstoneBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Soapstone"

			[MarkSoapstoneBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSoapstoneBook"
			ValuePE		= "TruePE"

[QueueConditionalShowSoulstoneBook]
ActionType	= "SendEvent"
EventName	= "OnShowSoulstoneBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowSoulstoneBookReaction]
Rule		= "OnShowSoulstoneBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowSoulstoneBook"

	[OnShowSoulstoneBookRule]
	Event	= "OnShowSoulstoneBook"

	[ConditionalShowSoulstoneBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadSoulstoneBook"
	@@^Action		= "TeachSoulstoneBook"

		[HasNotReadSoulstoneBook]
		PEType	= "NOT"
		Input	= "HasReadSoulstoneBook"

			[HasReadSoulstoneBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadSoulstoneBook"

		[TeachSoulstoneBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowSoulstoneBook"
		@@&			= "MarkSoulstoneBookRead"

			[ShowSoulstoneBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_Soulstone"

			[MarkSoulstoneBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadSoulstoneBook"
			ValuePE		= "TruePE"

[QueueConditionalShowHolySymbolBook]
ActionType	= "SendEvent"
EventName	= "OnShowHolySymbolBook"
Recipient	= "SelfPE"
QueueEvent	= true

[OnShowHolySymbolBookReaction]
Rule		= "OnShowHolySymbolBookRule"
NumActions	= &
@ Action
@@&			= "ConditionalShowHolySymbolBook"

	[OnShowHolySymbolBookRule]
	Event	= "OnShowHolySymbolBook"

	[ConditionalShowHolySymbolBook]
	ActionType		= "Selector"
	NumSelections	= &
	@ Selection
	@@&Condition	= "HasNotReadHolySymbolBook"
	@@^Action		= "TeachHolySymbolBook"

		[HasNotReadHolySymbolBook]
		PEType	= "NOT"
		Input	= "HasReadHolySymbolBook"

			[HasReadHolySymbolBook]
			PEType	= "EldGetPersistentVar"
			Key		= "HasReadHolySymbolBook"

		[TeachHolySymbolBook]
		ActionType	= "Composite"
		NumActions	= &
		@ Action
		@@&			= "ShowHolySymbolBook"
		@@&			= "MarkHolySymbolBookRead"

			[ShowHolySymbolBook]
			ActionType	= "EldShowBook"
			BookString	= "Book_HolySymbol"

			[MarkHolySymbolBookRead]
			ActionType	= "EldSetPersistentVar"
			Key			= "HasReadHolySymbolBook"
			ValuePE		= "TruePE"

# For "tooltip" buttons in pause screen.
[CurrentToolBookPE]
PEType			= "GetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"

[CurrentKitBookPE]
PEType			= "GetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"

[CurrentBootsBookPE]
PEType			= "GetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"

[SetCurrentBootsBookJumpBoots]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "JumpBootsBookPE"

	[JumpBootsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_JumpBoots"

[SetCurrentBootsBookSpeedBoots]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "SpeedBootsBookPE"

	[SpeedBootsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_SpeedBoots"

[SetCurrentBootsBookQuietBoots]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "QuietBootsBookPE"

	[QuietBootsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_QuietBoots"

# Rm
[SetCurrentBootsBookDressBoots]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "DressBootsBookPE"

	[DressBootsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_DressBoots"
# Rm

[SetCurrentBootsBookClimbingBoots]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "ClimbingBootsBookPE"

	[ClimbingBootsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_ClimbingBoots"

[SetCurrentBootsBookSandals]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentBootsBook"
ValuePE			= "SandalsBookPE"

	[SandalsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Sandals"

[SetCurrentKitBookMedicalKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "MedicalKitBookPE"

	[MedicalKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_MedicalKit"

[SetCurrentKitBookTinningKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "TinningKitBookPE"

	[TinningKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_TinningKit"

# Rm
[SetCurrentKitBookSmeltingKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "SmeltingKitBookPE"

	[SmeltingKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_SmeltingKit"
# Rm

[SetCurrentKitBookLocksmithKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "LocksmithKitBookPE"

	[LocksmithKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_LocksmithKit"

[SetCurrentKitBookCampingKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "CampingKitBookPE"

	[CampingKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_CampingKit"

[SetCurrentKitBookConsecrationKit]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentKitBook"
ValuePE			= "ConsecrationKitBookPE"

	[ConsecrationKitBookPE]
	PEType	= "ConstantString"
	Value	= "Book_ConsecrationKit"

[SetCurrentToolBookCompass]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "CompassBookPE"

	[CompassBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Compass"

[SetCurrentToolBookAmulet]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "AmuletBookPE"

	[AmuletBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Amulet"

[SetCurrentToolBookCharm]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "CharmBookPE"

	[CharmBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Charm"

[SetCurrentToolBookTalisman]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "TalismanBookPE"

	[TalismanBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Talisman"

# Rm
[SetCurrentToolBookSupplements]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "SupplementsBookPE"

	[SupplementsBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Supplements"
# Rm

[SetCurrentToolBookSoapstone]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "SoapstoneBookPE"

	[SoapstoneBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Soapstone"

[SetCurrentToolBookSoulstone]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "SoulstoneBookPE"

	[SoulstoneBookPE]
	PEType	= "ConstantString"
	Value	= "Book_Soulstone"

[SetCurrentToolBookHolySymbol]
ActionType		= "SetVariable"
EntityPE		= "PlayerPE"
VariableName	= "CurrentToolBook"
ValuePE			= "HolySymbolBookPE"

	[HolySymbolBookPE]
	PEType	= "ConstantString"
	Value	= "Book_HolySymbol"