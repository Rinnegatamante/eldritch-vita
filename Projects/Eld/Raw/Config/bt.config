# ******************************** Root ********************************
[CommonBT_Root]
NodeType = "Parallel"
NumChildren = &
@ Child
@@& = "CommonBT_BehaveLoop"
@@& = "CommonBT_ReactLoop"

	[CommonBT_BehaveLoop]
	NodeType = "Loop"
	Child = "CommonBT_BehaveResource"

		[CommonBT_BehaveResource]
		NodeType	= "UseResource"
		Resource	= "Body"
		Child		= "CommonBT_BehaveLookup"

			[CommonBT_BehaveLookup]
			NodeType	= "Lookup"
			Key			= "Behave"

	[CommonBT_ReactLoop]
	NodeType = "Loop"
	Child = "CommonBT_ReactLookup"

		[CommonBT_ReactLookup]
		NodeType	= "Lookup"
		Key			= "React"

# ******************************** Reactions ********************************
# TODO: Make this a parallel of all possible reactions
[ProxyBT_React]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1	# Restart all reactions when one finishes
NumChildren				= &
@ Child
@@&						= "ProxyBT_React_Damage"
@@&						= "CommonBT_React_FactionChange"

# ******************************** Damage Reaction ********************************
[ProxyBT_React_Damage]
NodeType = "Sequence"
NumChildren = &
@ Child
@@& = "CommonBT_ReactWaitForDamageEvent"
@@& = "ProxyBT_DamagedSequence"

	[CommonBT_ReactWaitForDamageEvent]
	NodeType = "WaitForEvent"
	Rule = "CommonBT_DamageEventRule"

		[CommonBT_DamageEventRule]
		Event = "OnDamaged"

	[ProxyBT_DamagedSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "CommonBT_DamagedBark"
	@@&			= "ProxyBT_ReactPlayAnimTimeout"

		[CommonBT_DamagedBark]
		NodeType		= "EldPlayBark"
		SoundPE			= "DamagedBarkLookupPE"
		Category		= "VO"

			[DamagedBarkLookupPE]
			PEType		= "Lookup"
			Key			= "DamagedBark"
			WarnFailure	= false			# PE not found just means no bark

		[ProxyBT_ReactPlayAnimTimeout]
		NodeType		= "Timeout"
		TimeoutPE		= "HitReactAnimTimeoutPE"
		Child			= "ProxyBT_PlayReact_Body"

			[HitReactAnimTimeoutPE]
			PEType	= "EldHardSwitch"
			Normal	= "HitReactAnimTimeoutNormalPE"
			Hard	= "HitReactAnimTimeoutHardPE"

				[HitReactAnimTimeoutNormalPE]
				PEType	= "ConstantFloat"
				Value	= 2.0

				[HitReactAnimTimeoutHardPE]
				PEType	= "ConstantFloat"
				Value	= 3.0

			[ProxyBT_PlayReact_Body]
			NodeType	= "UseResource"
			Resource	= "Body"
			ForceClaim	= true
			Child		= "ProxyBT_PlayReact_Legs"

				[ProxyBT_PlayReact_Legs]
				NodeType	= "UseResource"
				Resource	= "Anim"
				ForceClaim	= true
				Child		= "ProxyBT_ReactPlayAnim"

					[ProxyBT_ReactPlayAnim]
					NodeType = "EldPlayAnim"
					Animation = "HitReact"

# ******************************** Hypnotize Reaction ********************************
[CommonBT_React_FactionChange]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "CommonBT_ReactWaitForFactionChangeEvent"
@@&			= "CommonBT_FactionChangedSequence"

	[CommonBT_ReactWaitForFactionChangeEvent]
	NodeType	= "WaitForEvent"
	Rule		= "CommonBT_FactionChangeEventRule"

		[CommonBT_FactionChangeEventRule]
		Event	= "OnFactionChanged"

	[CommonBT_FactionChangedSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "CommonBT_LogFactionChanged"
	@@&			= "CommonBT_TickBrain"
	@@&			= "CommonBT_FlushBehaveBranch"

		[CommonBT_LogFactionChanged]
		NodeType	= "Log"
		Message		= "Faction changed!"

		# Tick thinkers immediately so we find an appropriate target for new faction.
		[CommonBT_TickBrain]
		NodeType	= "SendEvent"
		EventName	= "TickThinkers"
		Recipient	= "SelfPE"

		# Steal Body resource to flush Behave branch
		[CommonBT_FlushBehaveBranch]
		NodeType	= "UseResource"
		Resource	= "Body"
		ForceClaim	= true
		Child		= "CommonBT_Null"

			[CommonBT_Null]
			NodeType	= "Null"

# ******************************** Proxy AI ********************************
[ProxyBT_Behave]
NodeType = "Selector"
NumChildren = &
@ Child
@@& = "ProxyBT_Combat"
@@& = "ProxyBT_SearchParallel"
@@& = "ProxyBT_PatrolParallel"

# ******************************** Fishman AI ********************************
[FishmanBT_Behave]
NodeType = "Selector"
NumChildren = &
@ Child
@@& = "FishmanBT_Combat"
@@& = "ProxyBT_SearchParallel"
@@& = "ProxyBT_PatrolParallel"

# Same as Mummy; this should really just be "ProxyBT_MeleeCombat" or something
[FishmanBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ProxyBT_HasTarget"
@@&			= "ProxyBT_PromoteTarget"
@@&			= "ProxyBT_LookAtTarget"
@@&			= "CommonBT_CombatBarkTimeout"
@@&			= "ProxyBT_WarningAINoise"
@@&			= "ProxyBT_PursueTargetLoop"
@@&			= "ProxyBT_MeleeAttackSequence"

# ******************************** Fishman Shopkeeper ********************************
[FishmanShopkeeperBT_Behave]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ShopkeeperBT_BecomeNonFrobbable"
@@&			= "FishmanShopkeeperBT_BehaveSelector"

	[FishmanShopkeeperBT_BehaveSelector]
	NodeType	= "Selector"
	NumChildren	= &
	@ Child
	@@&			= "ProxyBT_Combat"
	@@&			= "ProxyBT_SearchParallel"
	@@&			= "ShopkeeperBT_IdleParallel"

# ******************************** Mummy AI ********************************
[MummyBT_Behave]
NodeType = "Selector"
NumChildren = &
@ Child
@@& = "MummyBT_Combat"
@@& = "ProxyBT_SearchParallel"
@@& = "ProxyBT_PatrolParallel"

[MummyBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ProxyBT_HasTarget"
@@&			= "ProxyBT_PromoteTarget"
@@&			= "ProxyBT_LookAtTarget"
@@&			= "CommonBT_CombatBarkTimeout"
@@&			= "ProxyBT_WarningAINoise"
@@&			= "ProxyBT_PursueTargetLoop"
@@&			= "ProxyBT_MeleeAttackSequence"

# ******************************** Bug AI ********************************
[BugBT_Behave]
NodeType = "Selector"
NumChildren = &
@ Child
@@& = "BugBT_Combat"
@@& = "ProxyBT_SearchParallel"
@@& = "ProxyBT_PatrolParallel"

[BugBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ProxyBT_HasTarget"
@@&			= "ProxyBT_PromoteTarget"
@@&			= "ProxyBT_LookAtTarget"
@@&			= "CommonBT_CombatBarkTimeout"
@@&			= "ProxyBT_WarningAINoise"
@@&			= "ProxyBT_PursueTargetLoop"
@@&			= "ProxyBT_MeleeAttackSequence"

# ******************************** Shopkeeper ********************************
[ShopkeeperBT_Behave]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ShopkeeperBT_BecomeNonFrobbable"
@@&			= "ShopkeeperBT_BehaveSelector"

	[ShopkeeperBT_BecomeNonFrobbable]
	NodeType	= "SendEvent"
	EventName	= "BecomeNonFrobbable"
	Recipient	= "SelfPE"

[ShopkeeperBT_BehaveSelector]
NodeType	= "Selector"
NumChildren	= &
@ Child
@@&			= "ProxyBT_Combat"
@@&			= "ProxyBT_SearchParallel"
@@&			= "ShopkeeperBT_IdleParallel"

	[ShopkeeperBT_IdleParallel]
	NodeType				= "Parallel"
	NumChildrenToSucceed	= 1
	NumChildren				= &
	@ Child
	@@&						= "ProxyBT_PatrolMonitor"
	@@&						= "ShopkeeperBT_IdleSequence"

		[ShopkeeperBT_IdleSequence]
		NodeType	= "Sequence"
		NumChildren	= &
		@ Child
		@@&			= "ShopkeeperBT_PromotePlayer"
		@@&			= "ShopkeeperBT_LookAtPlayer"
		@@&			= "ShopkeeperBT_ReturnToSpawn"
		@@&			= "ShopkeeperBT_BecomeFrobbable"
		@@&			= "ShopkeeperBT_Sleep"

			[ShopkeeperBT_PromotePlayer]
			NodeType		= "BlackboardWrite"
			BlackboardKey	= "Player"
			ValuePE			= "PlayerPE"

			[ShopkeeperBT_LookAtPlayer]
			NodeType				= "EldLookAt"
			LookTargetBlackboardKey	= "Player"

			[ShopkeeperBT_ReturnToSpawn]
			NodeType				= "EldMoveTo"
			MoveTargetBlackboardKey	= "SpawnPoint"
			ReachedThresholdMin		= 0.5
			ReachedThresholdMax		= 1.0

			[ShopkeeperBT_BecomeFrobbable]
			NodeType	= "SendEvent"
			EventName	= "BecomeFrobbable"
			Recipient	= "SelfPE"

			[ShopkeeperBT_Sleep]
			NodeType	= "Sleep"

# ******************************** Combat ********************************
[ProxyBT_Combat]
NodeType = "Sequence"
NumChildren = &
@ Child
@@& = "ProxyBT_HasTarget"
@@& = "ProxyBT_PromoteTarget"
@@& = "ProxyBT_LookAtTarget"
@@& = "CommonBT_CombatBarkTimeout"
@@& = "ProxyBT_WarningAINoise"
@@& = "ProxyBT_PursueAndAttack"
@@&	= "ProxyBT_AttackSelector"

	[ProxyBT_HasTarget]
	NodeType		= "ConditionPE"
	ValuePE			= "ProxyBT_GetBBTarget"

		[ProxyBT_GetBBTarget]
		PEType			= "RodinBlackboardGet"
		BlackboardKey	= "BestCombatTarget"
	
	[ProxyBT_PromoteTarget]
	NodeType		= "BlackboardWrite"
	BlackboardKey	= "CombatTarget"
	ValuePE			= "ProxyBT_GetBBTarget"

	[ProxyBT_LookAtTarget]
	NodeType				= "EldLookAt"
	LookTargetBlackboardKey	= "CombatTarget"

	[CommonBT_CombatBarkTimeout]
	NodeType		= "Timeout"
	TimeoutPE		= "CombatBarkTimeoutPE"
	Child			= "CommonBT_CombatBark"

		[CombatBarkTimeoutPE]
		PEType	= "RandomFloat"
		ValueA	= 3.0
		ValueB	= 4.0

		[CommonBT_CombatBark]
		NodeType		= "EldPlayBark"
		SoundPE			= "CombatBarkLookupPE"
		Category		= "VO"

			[CombatBarkLookupPE]
			PEType		= "Lookup"
			Key			= "CombatBark"
			WarnFailure	= false			# PE not found just means no bark

	[ProxyBT_PursueAndAttack]
	NodeType				= "Parallel"
	NumChildrenToSucceed	= 1
	NumChildrenToFail		= 2	# Pursue and attack can't fail; if pathing fails, we just keep attacking
	NumChildren				= &
	@ Child
	@@&						= "ProxyBT_PursueTargetLoop"
	@@&						= "ProxyBT_RangedAttackLoop"

		[ProxyBT_RangedAttackLoop]
		NodeType = "Loop"
		Child = "ProxyBT_RangedAttackSequence"
		
			# TODO: Conditional check that the target is currently visible
			[ProxyBT_RangedAttackSequence]
			NodeType = "Sequence"
			NumChildren = &
			@ Child
			@@&	= "CommonBT_TryDodgeSucceed"
			# Do the cooldown first so we guarantee this much time between attacks.
			@@& = "ProxyBT_RangedAttackWarmup"
			@@& = "CommonBT_AttackBark"
			@@& = "ProxyBT_WarningAINoise"
			@@& = "ProxyBT_RangedAttackResource"

				# NOTE: Dodge stuff is in its own section below

				[ProxyBT_RangedAttackWarmup]
				NodeType = "Wait"
				TimePE = "ProxyBT_RangedAttackWarmupTime"

					[ProxyBT_RangedAttackWarmupTime]
					PEType	= "EldHardScalar"
					Input	= "ProxyBT_RangedAttackWarmupTimeLookup"
					Scalar	= 0.333

						[ProxyBT_RangedAttackWarmupTimeLookup]
						PEType	= "Lookup"
						Key		= "RangedAttackWarmupTime"

				[CommonBT_AttackBark]
				NodeType		= "EldPlayBark"
				SoundPE			= "AttackBarkLookupPE"
				Category		= "VO"

					[AttackBarkLookupPE]
					PEType		= "Lookup"
					Key			= "AttackBark"
					WarnFailure	= false			# PE not found just means no bark

				# Let other AIs know about this target when we attack.
				[ProxyBT_WarningAINoise]
				NodeType		= "SendEvent"
				EventName		= "OnAINoise"
				NumParameters	= &
				@ Parameter
				# NOTE: Report the last known location of the combat target as the source.
				@@&Name			= "NoiseEntity"
				@@^Value		= "ProxyBT_GetCombatTargetPE"
				@@&Name			= "NoiseLocation"
				@@^Value		= "ProxyBT_GetCombatTargetLocationPE"
				@@&Name			= "NoiseRadius"
				@@^Value		= "NPCProxyDamagedNoiseRadiusPE"
				@@&Name			= "NoiseUpdateTime"
				@@^Value		= "ProxyBT_GetCombatTargetLastKnownTimePE"

					[ProxyBT_GetCombatTargetLocationPE]
					PEType	= "RodinGetLastKnownLocation"
					Entity	= "ProxyBT_GetCombatTargetPE"

					[ProxyBT_GetCombatTargetLastKnownTimePE]
					PEType	= "RodinGetLastKnownTime"
					Entity	= "ProxyBT_GetCombatTargetPE"

				[ProxyBT_RangedAttackResource]
				NodeType	= "UseResource"
				Resource	= "Anim"
				ForceClaim	= true
				Child		= "ProxyBT_RangedAttack"

					[ProxyBT_RangedAttack]
					NodeType = "EldPlayAnim"
					Animation = "RangedAttack"

		[ProxyBT_PursueTargetLoop]
		NodeType	= "Loop"
		CanSucceed	= true	# Only loop if we've failed to path
		Child		= "ProxyBT_PursueTargetFailsafe"

			[ProxyBT_PursueTargetFailsafe]
			NodeType	= "Selector"
			NumChildren	= &
			@ Child
			@@&			= "ProxyBT_PursueTarget"
			@@&			= "ProxyBT_PursueTargetFailsafeCondition"

				[ProxyBT_PursueTarget]
				NodeType		= "UseStatMod"
				StatModEvent	= "Running"
				Child			= "ProxyBT_PursueTarget_StatModded"

					[ProxyBT_PursueTarget_StatModded]
					NodeType	= "Lookup"
					Key			= "PursueCombatTarget"
				
					[ProxyBT_PursueCombatTarget]
					NodeType				= "EldMoveTo"
					MoveTargetBlackboardKey	= "CombatTarget"
					ReachedThresholdMin		= 1.0	# Don't stop moving unless we're at least this close
					ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far

			# TODO: Break out of loop (by succeeding, ironically) if
			# we have updated info regarding target (a better target,
			# or this target is dead, or whatever). (Or, compare
			# BestCombatTarget with CombatTarget and succeed if they're
			# different.)
			
				# This runs if we've failed to path, and gives us a chance
				# to break out of the loop (by returning success) if we have
				# new target info.
				[ProxyBT_PursueTargetFailsafeCondition]
				NodeType	= "ConditionPE"
				ValuePE		= "ProxyBT_PursueTargetFailsafePE"

					[ProxyBT_PursueTargetFailsafePE]
					PEType	= "OR"
					InputA	= "ProxyBT_PursueTargetFailsafeNullTargetPE"
					InputB	= "ProxyBT_PursueTargetFailsafeNewTargetPE"

						# Return true if (current) CombatTarget is now null (e.g., entity was destroyed)
						[ProxyBT_PursueTargetFailsafeNullTargetPE]
						PEType	= "Conditional"
						Op		= "E"
						InputA	= "ProxyBT_GetCombatTargetPE"
						InputB	= "NullPE"

						# Return true if (current) CombatTarget is now different from (new) elected BestCombatTarget
						[ProxyBT_PursueTargetFailsafeNewTargetPE]
						PEType	= "Conditional"
						Op		= "NE"
						InputA	= "ProxyBT_GetBBTarget"
						InputB	= "ProxyBT_GetCombatTargetPE"

	[ProxyBT_AttackSelector]
	NodeType	= "Selector"
	NumChildren	= &
	@ Child
	@@&			= "ProxyBT_MeleeAttackSequence"
	@@&			= "ProxyBT_RangedAttackShortWarmupSequence"

		[ProxyBT_RangedAttackShortWarmupSequence]
		NodeType	= "Sequence"
		NumChildren	= &
		@ Child
		# Do the cooldown first so we guarantee this much time between attacks.
		@@&			= "ProxyBT_RangedAttackShortWarmup"
		@@&			= "CommonBT_AttackBark"
		@@&			= "ProxyBT_WarningAINoise"
		@@&			= "ProxyBT_RangedAttackResource"

			[ProxyBT_RangedAttackShortWarmup]
			NodeType = "Wait"
			TimePE = "ProxyBT_RangedAttackShortWarmupTime"

				[ProxyBT_RangedAttackShortWarmupTime]
				PEType	= "Mul"
				InputA	= "ProxyBT_RangedAttackWarmupTimeLookup"	# Don't also multiply in the hard scalar!
				InputB	= "ShortWarmupScalarPE"

					[ShortWarmupScalarPE]
					PEType	= "ConstantFloat"
					Value	= 0.25

		[ProxyBT_MeleeAttackSequence]
		NodeType = "Sequence"
		NumChildren = &
		@ Child
		@@& = "ProxyBT_IsCloseForMelee"
		@@& = "CommonBT_AttackBark"
		@@& = "ProxyBT_WarningAINoise"
		@@& = "ProxyBT_MeleeAttackResource"
		@@& = "ProxyBT_MeleeAttackCooldown"
		
			[ProxyBT_IsCloseForMelee]
			NodeType = "ConditionPE"
			ValuePE = "ProxyBT_IsCloseForMeleePE"

				[ProxyBT_IsCloseForMeleePE]
				PEType	= "Conditional"
				Op		= "LessThan"
				InputA	= "ProxyBT_CurrentDistancePE"
				InputB	= "ProxyBT_MeleeDistancePE"
				
					[ProxyBT_CurrentDistancePE]
					PEType = "EldDistance"
					InputA = "SelfPE"
					InputB = "ProxyBT_GetCombatTargetPE"

						[ProxyBT_GetCombatTargetPE]
						PEType			= "RodinBlackboardGet"
						BlackboardKey	= "CombatTarget"

					[ProxyBT_MeleeDistancePE]
					PEType = "ConstantFloat"
					Value = 1.5

			[ProxyBT_MeleeAttackResource]
			NodeType	= "UseResource"
			Resource	= "Anim"
			ForceClaim	= true
			Child		= "ProxyBT_MeleeAttack"

				[ProxyBT_MeleeAttack]
				NodeType = "EldPlayAnim"
				Animation = "MeleeAttack"

			[ProxyBT_MeleeAttackCooldown]
			NodeType = "Wait"
			TimePE = "ProxyBT_MeleeAttackCooldownTime"

				[ProxyBT_MeleeAttackCooldownTime]
				PEType	= "EldHardScalar"
				Input	= "ProxyBT_MeleeAttackCooldownTimeLookup"
				Scalar	= 0.5

					[ProxyBT_MeleeAttackCooldownTimeLookup]
					PEType		= "Lookup"
					Key			= "MeleeAttackCooldownTime"
					WarnFailure	= false						# PE not found in map just means no cooldown

# ******************************** Dodge ********************************

# Dodge that never fails
[CommonBT_TryDodgeSucceed]
NodeType	= "CastResult"
Child		= "CommonBT_TryDodge"
ValuePE		= "TruePE"

[CommonBT_TryDodge]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "CommonBT_CanDodge"
@@&			= "CommonBT_DodgeTimeout"

	[CommonBT_CanDodge]
	NodeType	= "ConditionPE"
	ValuePE		= "CommonBT_CanDodgePE"

		[CommonBT_CanDodgePE]
		PEType		= "Lookup"
		Key			= "CanDodge"
		WarnFailure	= false			# PE not found just means we can't dodge

	[CommonBT_DodgeTimeout]
	NodeType	= "Timeout"
	TimeoutPE	= "DodgeTimeoutPE"
	Child		= "CommonBT_DodgeSelector"

		[DodgeTimeoutPE]
		PEType	= "ConstantFloat"
		Value	= 3.0

		[CommonBT_DodgeSelector]
		NodeType	= "Selector"
		NumChildren	= &
		@ Child
		@@&			= "CommonBT_TryDodgeLeft"
		@@&			= "CommonBT_TryDodgeRight"

			[CommonBT_TryDodgeLeft]
			NodeType	= "Sequence"
			NumChildren	= &
			@ Child
			@@&			= "CommonBT_ShouldDodgeLeft"
			@@&			= "CommonBT_DodgeLeftResource"

				[CommonBT_ShouldDodgeLeft]
				NodeType	= "ConditionPE"
				ValuePE		= "CommonBT_ShouldDodgeLeftPE"

					[CommonBT_ShouldDodgeLeftPE]
					PEType		= "RandomBool"
					Probability	= 0.333

				[CommonBT_DodgeLeftResource]
				NodeType	= "UseResource"
				Resource	= "Anim"
				ForceClaim	= true
				Child		= "CommonBT_DodgeLeft"

					[CommonBT_DodgeLeft]
					NodeType	= "EldPlayAnim"
					Animation	= "DodgeLeft"

			[CommonBT_TryDodgeRight]
			NodeType	= "Sequence"
			NumChildren	= &
			@ Child
			@@&			= "CommonBT_ShouldDodgeRight"
			@@&			= "CommonBT_DodgeRightResource"

				[CommonBT_ShouldDodgeRight]
				NodeType	= "ConditionPE"
				ValuePE		= "CommonBT_ShouldDodgeRightPE"

					[CommonBT_ShouldDodgeRightPE]
					PEType		= "RandomBool"
					Probability	= 0.5

				[CommonBT_DodgeRightResource]
				NodeType	= "UseResource"
				Resource	= "Anim"
				ForceClaim	= true
				Child		= "CommonBT_DodgeRight"

					[CommonBT_DodgeRight]
					NodeType	= "EldPlayAnim"
					Animation	= "DodgeRight"

# ******************************** Search ********************************
[ProxyBT_SearchParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1	# Sequence can succeed; Monitor will loop forever
NumChildren				= &
@ Child
@@&						= "ProxyBT_SearchMonitor"
@@&						= "ProxyBT_SearchSequence"

	[ProxyBT_SearchSequence]
	NodeType = "Sequence"
	NumChildren = &
	@ Child
	@@& = "ProxyBT_HasSearchTarget"
	@@& = "ProxyBT_PromoteSearchTarget"
	@@& = "ProxyBT_LookAtSearchTarget"
	@@& = "CommonBT_SearchBarkTimeout"
	@@& = "ProxyBT_PursueSearchTarget"
	
		[ProxyBT_HasSearchTarget]
		NodeType		= "ConditionPE"
		ValuePE			= "ProxyBT_GetBBSearchTarget"

			[ProxyBT_GetBBSearchTarget]
			PEType			= "RodinBlackboardGet"
			BlackboardKey	= "BestSearchTarget"
		
		[ProxyBT_PromoteSearchTarget]
		NodeType		= "BlackboardWrite"
		BlackboardKey	= "SearchTarget"
		ValuePE			= "ProxyBT_GetBBSearchTarget"

		[ProxyBT_LookAtSearchTarget]
		NodeType				= "EldLookAt"
		LookTargetBlackboardKey	= "SearchTarget"

			[CommonBT_SearchBarkTimeout]
			NodeType		= "Timeout"
			TimeoutPE		= "SearchBarkTimeoutPE"
			Child			= "CommonBT_SearchBark"

				[SearchBarkTimeoutPE]
				PEType	= "RandomFloat"
				ValueA	= 3.0
				ValueB	= 4.0

				[CommonBT_SearchBark]
				NodeType		= "EldPlayBark"
				SoundPE			= "SearchBarkLookupPE"
				Category		= "VO"

					[SearchBarkLookupPE]
					PEType		= "Lookup"
					Key			= "SearchBark"
					WarnFailure	= false			# PE not found just means no bark

		[ProxyBT_PursueSearchTarget]
		NodeType				= "EldMoveTo"
		MoveTargetBlackboardKey	= "SearchTarget"
		ReachedThresholdMin		= 1.0	# Don't stop moving unless we're at least this close
		ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far

	[ProxyBT_SearchMonitor]
	NodeType = "Loop"
	Child = "ProxyBT_SearchCondition"
	CanFail = true

		[ProxyBT_SearchCondition]
		NodeType = "ConditionPE"
		ValuePE = "ProxyBT_NoCombatTarget"

# ******************************** Patrol ********************************
[ProxyBT_PatrolParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1	# PatrolSequence can succeed; PatrolMonitor will loop forever
NumChildren				= &
@ Child
@@&						= "ProxyBT_PatrolMonitor"
@@&						= "ProxyBT_PatrolSequence"

	[ProxyBT_PatrolSequence]
	NodeType		= "UseStatMod"
	StatModEvent	= "Unaware"
	Child			= "ProxyBT_PatrolSequenceStatModded"

		[ProxyBT_PatrolSequenceStatModded]
		NodeType = "Sequence"
		NumChildren = &
		@ Child
		@@& = "ProxyBT_PatrolWait"
		@@& = "CommonBT_PatrolBarkTimeout"
		@@& = "ProxyBT_PatrolMove"

			[ProxyBT_PatrolWait]
			NodeType = "Wait"
			TimePE = "ProxyBT_PatrolWaitTime"

				[ProxyBT_PatrolWaitTime]
				PEType = "RandomFloat"
				ValueA = 2.0
				ValueB = 4.0

			[CommonBT_PatrolBarkTimeout]
			NodeType		= "Timeout"
			TimeoutPE		= "PatrolBarkTimeoutPE"
			Child			= "CommonBT_PatrolBark"

				[PatrolBarkTimeoutPE]
				PEType	= "RandomFloat"
				ValueA	= 10.0
				ValueB	= 12.0

				[CommonBT_PatrolBark]
				NodeType		= "EldPlayBark"
				SoundPE			= "PatrolBarkLookupPE"
				Category		= "VO"

					[PatrolBarkLookupPE]
					PEType		= "Lookup"
					Key			= "PatrolBark"
					WarnFailure	= false			# PE not found just means no bark

			[ProxyBT_PatrolMove]
			NodeType		= "UseStatMod"
			StatModEvent	= "Patrolling"
			Child			= "ProxyBT_PatrolMove_StatModded"

				[ProxyBT_PatrolMove_StatModded]
				NodeType				= "EldMoveTo"
				Wander					= true
				WanderTargetDistance	= 15.0
				ReachedThresholdMin		= 1.0	# Don't stop moving unless we're at least this close
				ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far

	[ProxyBT_PatrolMonitor]
	NodeType = "Loop"
	Child = "ProxyBT_PatrolCondition"
	CanFail = true

		[ProxyBT_PatrolCondition]
		NodeType = "ConditionPE"
		ValuePE = "ProxyBT_NoTargets"

			[ProxyBT_NoTargets]
			PEType = "AND"
			InputA = "ProxyBT_NoCombatTarget"
			InputB = "ProxyBT_NoSearchTarget"

				[ProxyBT_NoCombatTarget]
				PEType = "NOT"
				Input = "ProxyBT_GetBBTarget"
				
				[ProxyBT_NoSearchTarget]
				PEType = "NOT"
				Input = "ProxyBT_GetBBSearchTarget"

# ******************************** HearWorm Reactions ********************************
# TODO: Make this a parallel of all possible reactions
[HearWormBT_React]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1	# Restart all reactions when one finishes
NumChildren				= &
@ Child
@@&						= "HearWormBT_React_Damage"
@@&						= "CommonBT_React_FactionChange"

# ******************************** HearWorm Damage Reaction ********************************
[HearWormBT_React_Damage]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "CommonBT_ReactWaitForDamageEvent"
@@&			= "HearWormBT_DamagedSequence"

	[HearWormBT_DamagedSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "CommonBT_DamagedBark"
	@@&			= "HearWormBT_ReactPlayAnimTimeout"
					
		[HearWormBT_ReactPlayAnimTimeout]
		NodeType		= "Timeout"
		TimeoutPE		= "HearWormBT_HitReactAnimTimeoutPE"
		Child			= "HearWormBT_PlayReact_Body"

			[HearWormBT_HitReactAnimTimeoutPE]
			PEType	= "ConstantFloat"
			Value	= 2.0

			[HearWormBT_PlayReact_Body]
			NodeType	= "UseResource"
			Resource	= "Body"
			ForceClaim	= true
			Child		= "HearWormBT_PlayReact_Resource"

				[HearWormBT_PlayReact_Resource]
				NodeType	= "UseResource"
				Resource	= "Anim"
				ForceClaim	= true
				Child		= "HearWormBT_ReactPlayAnim"

					[HearWormBT_ReactPlayAnim]
					NodeType	= "EldPlayAnim"
					Animation	= "Threaten"

# ******************************** HearWorm behave ********************************
[HearWormBT_Behave]
NodeType	= "Selector"
NumChildren	= &
@ Child
@@&			= "HearWormBT_Alarm"
@@&			= "HearWormBT_WatchParallel"
@@&			= "HearWormBT_WanderParallel"

# ******************************** HearWorm alarm ********************************
# Pursue threat and periodically call for help
[HearWormBT_Alarm]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "HearWormBT_HasAlarmTarget"
@@&			= "HearWormBT_PromoteAlarmTarget"
@@&			= "HearWormBT_PursueAndWarn"

	[HearWormBT_HasAlarmTarget]
	NodeType	= "ConditionPE"
	ValuePE		= "HearWormBT_GetBBAlarmTarget"

		[HearWormBT_GetBBAlarmTarget]
		PEType			= "RodinBlackboardGet"
		BlackboardKey	= "BestAlarmTarget"
	
	[HearWormBT_PromoteAlarmTarget]
	NodeType		= "BlackboardWrite"
	BlackboardKey	= "AlarmTarget"
	ValuePE			= "HearWormBT_GetBBAlarmTarget"

	[HearWormBT_PursueAndWarn]
	NodeType				= "Parallel"
	NumChildrenToSucceed	= 1
	NumChildrenToFail		= 2
	NumChildren				= &
	@ Child
	@@&						= "HearWormBT_PursueAlarmTargetLoop"
	@@&						= "HearWormBT_WarnLoop"

		[HearWormBT_WarnLoop]
		NodeType = "Loop"
		Child = "HearWormBT_WarnTimeout"

			[HearWormBT_WarnTimeout]
			NodeType		= "Timeout"
			TimeoutPE		= "HearWormBT_WarnTimeoutTimePE"
			Child			= "HearWormBT_WarnSequence"

				[HearWormBT_WarnTimeoutTimePE]
				PEType	= "ConstantFloat"
				Value	= 4.0

				[HearWormBT_WarnSequence]
				NodeType	= "Sequence"
				NumChildren	= &
				@ Child
				@@&			= "CommonBT_DamagedBark"
				@@&			= "HearWormBT_WarningAINoise"
				@@&			= "HearWormBT_WarnAnimResource"

					[HearWormBT_WarnAnimResource]
					NodeType	= "UseResource"
					Resource	= "Anim"
					ForceClaim	= true
					Child		= "HearWormBT_WarnAnim"

						[HearWormBT_WarnAnim]
						NodeType	= "EldPlayAnim"
						Animation	= "Threaten"

					[HearWormBT_WarningAINoise]
					NodeType		= "SendEvent"
					EventName		= "OnAINoise"
					NumParameters	= &
					@ Parameter
					# NOTE: Report the last known location of the alarm target as the source.
					@@&Name			= "NoiseEntity"
					@@^Value		= "HearWormBT_GetAlarmTargetPE"
					@@&Name			= "NoiseLocation"
					@@^Value		= "HearWormBT_GetAlarmTargetLocationPE"
					@@&Name			= "NoiseRadius"
					@@^Value		= "HearWormBT_WarningNoiseRadiusPE"
					@@&Name			= "NoiseUpdateTime"
					@@^Value		= "HearWormBT_GetAlarmTargetLastKnownTimePE"
					@@&Name			= "ExpireTimeBonus"
					@@^Value		= "HearWormWarningExpireTimeBonusPE"

						[HearWormBT_GetAlarmTargetPE]
						PEType			= "RodinBlackboardGet"
						BlackboardKey	= "AlarmTarget"

						[HearWormBT_GetAlarmTargetLocationPE]
						PEType	= "RodinGetLastKnownLocation"
						Entity	= "HearWormBT_GetAlarmTargetPE"
						
						[HearWormBT_GetAlarmTargetLastKnownTimePE]
						PEType	= "RodinGetLastKnownTime"
						Entity	= "HearWormBT_GetAlarmTargetPE"

						[HearWormBT_WarningNoiseRadiusPE]
						PEType	= "ConstantFloat"
						Value	= 20.0

						[HearWormWarningExpireTimeBonusPE]
						PEType	= "ConstantFloat"
						Value	= 5.0

	[HearWormBT_PursueAlarmTargetLoop]
	NodeType	= "Loop"
	CanSucceed	= true	# Only loop if we've failed to path
	Child		= "HearWormBT_PursueAlarmTarget"

		[HearWormBT_PursueAlarmTarget]
		NodeType				= "EldMoveTo"
		MoveTargetBlackboardKey	= "AlarmTarget"
		ReachedThresholdMin		= 1.0	# Don't stop moving unless we're at least this close
		ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far

# ******************************** HearWorm watch ********************************
# Stand still and face source of noise
[HearWormBT_WatchParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1
NumChildren				= &
@ Child
@@&						= "HearWormBT_WatchMonitor"
@@&						= "HearWormBT_WatchSequence"

	[HearWormBT_WatchSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "HearWormBT_HasWatchTarget"
	@@&			= "HearWormBT_PromoteWatchTarget"
	@@&			= "HearWormBT_FaceWatchTarget"
	
		[HearWormBT_HasWatchTarget]
		NodeType		= "ConditionPE"
		ValuePE			= "HearWormBT_GetBBWatchTarget"

			[HearWormBT_GetBBWatchTarget]
			PEType			= "RodinBlackboardGet"
			BlackboardKey	= "BestWatchTarget"
		
		[HearWormBT_PromoteWatchTarget]
		NodeType		= "BlackboardWrite"
		BlackboardKey	= "WatchTarget"
		ValuePE			= "HearWormBT_GetBBWatchTarget"

		[HearWormBT_FaceWatchTarget]
		NodeType				= "EldTurnToward"
		TurnTargetBlackboardKey	= "WatchTarget"

	[HearWormBT_WatchMonitor]
	NodeType	= "Loop"
	Child		= "HearWormBT_WatchCondition"
	CanFail		= true

		[HearWormBT_WatchCondition]
		NodeType	= "ConditionPE"
		ValuePE		= "HearWormBT_NoAlarmTarget"

# ******************************** HearWorm wander ********************************
[HearWormBT_WanderParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1
NumChildren				= &
@ Child
@@&						= "HearWormBT_WanderMonitor"
@@&						= "HearWormBT_WanderSequence"

	[HearWormBT_WanderSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "HearWormBT_WanderMove"
	@@&			= "HearWormBT_WanderWait"

		[HearWormBT_WanderMove]
		NodeType				= "EldMoveTo"
		Wander					= true
		WanderTargetDistance	= 5.0
		ReachedThresholdMin		= 0.5	# Don't stop moving unless we're at least this close
		ReachedThresholdMax		= 1.0	# Don't start moving unless we're at least this far

		[HearWormBT_WanderWait]
		NodeType	= "Wait"
		TimePE		= "HearWormBT_WanderWaitTimePE"

			[HearWormBT_WanderWaitTimePE]
			PEType	= "RandomFloat"
			ValueA	= 1.0
			ValueB	= 3.0

	[HearWormBT_WanderMonitor]
	NodeType	= "Loop"
	Child		= "HearWormBT_WanderCondition"
	CanFail		= true

		[HearWormBT_WanderCondition]
		NodeType	= "ConditionPE"
		ValuePE		= "HearWormBT_NoTargets"

			[HearWormBT_NoTargets]
			PEType	= "AND"
			InputA	= "HearWormBT_NoAlarmTarget"
			InputB	= "HearWormBT_NoWatchTarget"

				[HearWormBT_NoAlarmTarget]
				PEType	= "NOT"
				Input	= "HearWormBT_GetBBAlarmTarget"

				[HearWormBT_NoWatchTarget]
				PEType	= "NOT"
				Input	= "HearWormBT_GetBBWatchTarget"

# ******************************** Shoggoth Reactions ********************************
[ShoggothBT_React]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1	# Restart all reactions when one finishes
NumChildren				= &
@ Child
@@&						= "CommonBT_React_FactionChange"

# ******************************** Shoggoth behave ********************************
[ShoggothBT_Behave]
NodeType	= "Selector"
NumChildren	= &
@ Child
@@&			= "ShoggothBT_Combat"
@@&			= "ShoggothBT_SearchParallel"
@@&			= "ShoggothBT_PatrolParallel"

# *************************** Shoggoth shopkeeper behave **************************
[ShoggothShopkeeperBT_Behave]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ShopkeeperBT_BecomeNonFrobbable"
@@&			= "ShoggothShopkeeperBT_BehaveSelector"

[ShoggothShopkeeperBT_BehaveSelector]
NodeType	= "Selector"
NumChildren	= &
@ Child
@@&			= "ShoggothBT_Combat"
@@&			= "ShoggothBT_SearchParallel"
@@&			= "ShopkeeperBT_IdleParallel"

# ******************************** Shoggoth Combat ********************************
[ShoggothBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ShoggothBT_HasTarget"
@@&			= "ShoggothBT_PromoteTarget"
@@&			= "ShoggothBT_WarningAINoise"
@@&			= "ShoggothBT_PursueTargetLoop"
@@&			= "ShoggothBT_MeleeAttackSequence"

	# TODO: Unify this kind of stuff in a common place, it's the same as NPCProxy behaviors
	[ShoggothBT_HasTarget]
	NodeType		= "ConditionPE"
	ValuePE			= "ShoggothBT_GetBBTarget"

		[ShoggothBT_GetBBTarget]
		PEType			= "RodinBlackboardGet"
		BlackboardKey	= "BestCombatTarget"
	
	[ShoggothBT_PromoteTarget]
	NodeType		= "BlackboardWrite"
	BlackboardKey	= "CombatTarget"
	ValuePE			= "ShoggothBT_GetBBTarget"

	[ShoggothBT_WarningAINoise]
	NodeType		= "SendEvent"
	EventName		= "OnAINoise"
	NumParameters	= &
	@ Parameter
	# NOTE: Report the last known location of the combat target as the source.
	@@&Name			= "NoiseEntity"
	@@^Value		= "ShoggothBT_GetCombatTargetPE"
	@@&Name			= "NoiseLocation"
	@@^Value		= "ShoggothBT_GetCombatTargetLocationPE"
	@@&Name			= "NoiseRadius"
	@@^Value		= "ShoggothBT_WarningNoiseRadiusPE"
	@@&Name			= "NoiseUpdateTime"
	@@^Value		= "ShoggothBT_GetCombatTargetLastKnownTimePE"

		[ShoggothBT_GetCombatTargetPE]
		PEType			= "RodinBlackboardGet"
		BlackboardKey	= "CombatTarget"

		[ShoggothBT_GetCombatTargetLocationPE]
		PEType	= "RodinGetLastKnownLocation"
		Entity	= "ShoggothBT_GetCombatTargetPE"

		[ShoggothBT_WarningNoiseRadiusPE]
		PEType	= "ConstantFloat"
		Value	= 20.0

		[ShoggothBT_GetCombatTargetLastKnownTimePE]
		PEType	= "RodinGetLastKnownTime"
		Entity	= "ShoggothBT_GetCombatTargetPE"

	[ShoggothBT_PursueTargetLoop]
	NodeType	= "Loop"
	CanSucceed	= true	# Only loop if we've failed to path
	Child		= "ShoggothBT_PursueTargetFailsafe"

		[ShoggothBT_PursueTargetFailsafe]
		NodeType	= "Selector"
		NumChildren	= &
		@ Child
		@@&			= "ShoggothBT_PursueTarget"
		@@&			= "ProxyBT_PursueTargetFailsafeCondition"

			[ShoggothBT_PursueTarget]
			NodeType		= "UseStatMod"
			StatModEvent	= "Running"
			Child			= "ShoggothBT_PursueTarget_StatModded"

				[ShoggothBT_PursueTarget_StatModded]
				NodeType				= "EldMoveTo"
				MoveTargetBlackboardKey	= "CombatTarget"
				ReachedThresholdMin		= 2.5	# Don't stop moving unless we're at least this close
				ReachedThresholdMax		= 3.0	# Don't start moving unless we're at least this far

	[ShoggothBT_MeleeAttackSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "ShoggothBT_IsCloseForMelee"
	@@&			= "ShoggothBT_WarningAINoise"
	@@&			= "ShoggothBT_CombatBark"
	@@&			= "ShoggothBT_MeleeAttackResource"
	@@&			= "ShoggothBT_MeleeAttackCooldown"
	
		[ShoggothBT_IsCloseForMelee]
		NodeType	= "ConditionPE"
		ValuePE		= "ShoggothBT_IsCloseForMeleePE"

			[ShoggothBT_IsCloseForMeleePE]
			PEType	= "Conditional"
			Op		= "LessThan"
			InputA	= "ShoggothBT_CurrentDistancePE"
			InputB	= "ShoggothBT_MeleeDistancePE"
			
				[ShoggothBT_CurrentDistancePE]
				PEType	= "EldDistance"
				InputA	= "SelfPE"
				InputB	= "ShoggothBT_GetCombatTargetPE"

				[ShoggothBT_MeleeDistancePE]
				PEType	= "ConstantFloat"
				Value	= 2.75

		[ShoggothBT_CombatBark]
		NodeType	= "EldPlayBark"
		Sound		= "Bark_Shoggoth_Combat"
		Category	= "VO"

		[ShoggothBT_MeleeAttackResource]
		NodeType	= "UseResource"
		Resource	= "Anim"
		ForceClaim	= true
		Child		= "ShoggothBT_MeleeAttack"

			[ShoggothBT_MeleeAttack]
			NodeType	= "EldPlayAnim"
			Animation	= "MeleeAttack"

		[ShoggothBT_MeleeAttackCooldown]
		NodeType	= "Wait"
		TimePE		= "ShoggothBT_MeleeAttackCooldownTime"

			[ShoggothBT_MeleeAttackCooldownTime]
			PEType	= "EldHardScalar"
			Input	= "ShoggothBT_MeleeAttackCooldownTimeNormal"
			Scalar	= 0.5

				[ShoggothBT_MeleeAttackCooldownTimeNormal]
				PEType	= "RandomFloat"
				ValueA	= 0.5
				ValueB	= 0.75

# ******************************** Shoggoth Search ********************************
[ShoggothBT_SearchParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1
NumChildren				= &
@ Child
@@&						= "ShoggothBT_SearchMonitor"
@@&						= "ShoggothBT_SearchSequence"

	[ShoggothBT_SearchSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "ShoggothBT_HasSearchTarget"
	@@&			= "ShoggothBT_PromoteSearchTarget"
	@@&			= "ShoggothBT_PursueSearchTarget"

		# TODO: Unify with common
		[ShoggothBT_HasSearchTarget]
		NodeType		= "ConditionPE"
		ValuePE			= "ShoggothBT_GetBBSearchTarget"

			[ShoggothBT_GetBBSearchTarget]
			PEType			= "RodinBlackboardGet"
			BlackboardKey	= "BestSearchTarget"
		
		[ShoggothBT_PromoteSearchTarget]
		NodeType		= "BlackboardWrite"
		BlackboardKey	= "SearchTarget"
		ValuePE			= "ShoggothBT_GetBBSearchTarget"

		[ShoggothBT_PursueSearchTarget]
		NodeType				= "EldMoveTo"
		MoveTargetBlackboardKey	= "SearchTarget"
		ReachedThresholdMin		= 2.5	# Don't stop moving unless we're at least this close
		ReachedThresholdMax		= 3.0	# Don't start moving unless we're at least this far

	[ShoggothBT_SearchMonitor]
	NodeType	= "Loop"
	Child		= "ShoggothBT_SearchCondition"
	CanFail		= true

		[ShoggothBT_SearchCondition]
		NodeType	= "ConditionPE"
		ValuePE		= "ShoggothBT_NoCombatTarget"

# ******************************** Shoggoth Patrol ********************************
[ShoggothBT_PatrolParallel]
NodeType				= "Parallel"
NumChildrenToSucceed	= 1
NumChildren				= &
@ Child
@@&						= "ShoggothBT_PatrolMonitor"
@@&						= "ShoggothBT_PatrolSequence"

	[ShoggothBT_PatrolSequence]
	NodeType	= "Sequence"
	NumChildren	= &
	@ Child
	@@&			= "ShoggothBT_PatrolMove"
	@@&			= "ShoggothBT_PatrolWait"

		[ShoggothBT_PatrolMove]
		NodeType		= "UseStatMod"
		StatModEvent	= "Patrolling"
		Child			= "ShoggothBT_PatrolMove_StatModded"

			[ShoggothBT_PatrolMove_StatModded]
			NodeType				= "EldMoveTo"
			Wander					= true
			WanderTargetDistance	= 15.0
			ReachedThresholdMin		= 1.0	# Don't stop moving unless we're at least this close
			ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far

		[ShoggothBT_PatrolWait]
		NodeType = "Wait"
		TimePE = "ShoggothBT_PatrolWaitTime"

			[ShoggothBT_PatrolWaitTime]
			PEType = "RandomFloat"
			ValueA = 2.0
			ValueB = 4.0

	[ShoggothBT_PatrolMonitor]
	NodeType	= "Loop"
	Child		= "ShoggothBT_PatrolCondition"
	CanFail		= true

		[ShoggothBT_PatrolCondition]
		NodeType	= "ConditionPE"
		ValuePE		= "ShoggothBT_NoTargets"

			[ShoggothBT_NoTargets]
			PEType	= "AND"
			InputA	= "ShoggothBT_NoCombatTarget"
			InputB	= "ShoggothBT_NoSearchTarget"

				[ShoggothBT_NoCombatTarget]
				PEType	= "NOT"
				Input	= "ShoggothBT_GetBBTarget"
				
				[ShoggothBT_NoSearchTarget]
				PEType	= "NOT"
				Input	= "ShoggothBT_GetBBSearchTarget"

# ******************************** Eyes Behave ********************************
[EyeBT_Behave]
NodeType	= "Selector"
NumChildren	= &
@ Child
@@&			= "EyeBT_Combat"
@@&			= "ProxyBT_SearchParallel"
@@&			= "ProxyBT_PatrolParallel"

# ******************************** Eyes Combat ********************************
[EyeBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ProxyBT_HasTarget"
@@&			= "ProxyBT_PromoteTarget"
@@&			= "ProxyBT_LookAtTarget"
@@&			= "CommonBT_CombatBarkTimeout"
@@&			= "ProxyBT_WarningAINoise"
@@&			= "ProxyBT_PursueAndAttack"

	[EyesBT_PursueCombatTarget]
	NodeType				= "EldMoveTo"
	MoveTargetBlackboardKey	= "CombatTarget"
	ReachedThresholdMin		= 0.0	# Don't stop moving unless we're at least this close
	ReachedThresholdMax		= 1.5	# Don't start moving unless we're at least this far
	DeflectionRadius		= 8.0

# ******************************** Migo AI ********************************
[MigoBT_Behave]
NodeType = "Selector"
NumChildren = &
@ Child
@@& = "MigoBT_Combat"
@@& = "ProxyBT_SearchParallel"
@@& = "ProxyBT_PatrolParallel"

[MigoBT_Combat]
NodeType	= "Sequence"
NumChildren	= &
@ Child
@@&			= "ProxyBT_HasTarget"
@@&			= "ProxyBT_PromoteTarget"
@@&			= "ProxyBT_LookAtTarget"
@@&			= "CommonBT_CombatBarkTimeout"
@@&			= "ProxyBT_WarningAINoise"
@@&			= "ProxyBT_PursueTargetLoop"
@@&			= "MigoBT_MeleeAttackSequence"
				
	[MigoBT_PursueCombatTarget]
	NodeType				= "EldMoveTo"
	MoveTargetBlackboardKey	= "CombatTarget"
	ReachedThresholdMin		= 3.0	# Don't stop moving unless we're at least this close
	ReachedThresholdMax		= 3.5	# Don't start moving unless we're at least this far

	[MigoBT_MeleeAttackSequence]
	NodeType = "Sequence"
	NumChildren = &
	@ Child
	@@& = "MigoBT_IsCloseForMelee"
	@@& = "CommonBT_AttackBark"
	@@& = "ProxyBT_WarningAINoise"
	@@& = "ProxyBT_MeleeAttackResource"
	@@& = "ProxyBT_MeleeAttackCooldown"
	
		[MigoBT_IsCloseForMelee]
		NodeType = "ConditionPE"
		ValuePE = "MigoBT_IsCloseForMeleePE"

			[MigoBT_IsCloseForMeleePE]
			PEType	= "Conditional"
			Op		= "LessThan"
			InputA	= "ProxyBT_CurrentDistancePE"
			InputB	= "MigoBT_MeleeDistancePE"

				[MigoBT_MeleeDistancePE]
				PEType = "ConstantFloat"
				Value = 3.5